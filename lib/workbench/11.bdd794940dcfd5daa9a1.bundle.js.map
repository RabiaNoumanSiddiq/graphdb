{"version":3,"sources":["webpack:///./src/js/angular/utils/uri-utils.js","webpack:///./src/js/angular/import/controllers.js"],"names":["iriRegExp","angular","module","factory","isValidIri","iri","undefined","match","validateRdfUri","value","hasAngleBrackets","indexOf","noAngleBrackets","lastIndexOf","validProtocol","test","validPath","schemaSlashesIdx","substring","length","RegExp","e","FILE_STATUS","importCtrl","controller","$scope","$http","toastr","$interval","$repositories","$modal","$filter","$jwtAuth","$location","LicenseRestService","files","fileChecked","checkAll","popoverTemplateUrl","fileQuery","getAppData","getInfo","success","data","appData","properties","i","key","source","maxUploadFileSizeMB","error","msg","getError","fileFormats","gzs","_","map","f","basics","fileFormatsExtended","reduce","union","el","all","fileFormatsHuman","textFileFormatsHuman","filter","updateListHttp","force","method","url","getBaseUrl","forEach","type","defaultType","rebatch","remoteStatus","find","matches","name","status","assign","viewType","showClearStatuses","file","savedSettings","mapKeys","loader","warning","$watch","$","tabId","is","hash","updateList","canWriteActiveRepo","init","setRestricted","isRestricted","getSettings","$on","pullList","timer","updating","cancel","getVisibleFiles","getTypeFilter","showItems","selectAllFiles","importable","getSettingsFor","fileName","withDefaultSettings","isEmpty","copy","defaultSettings","setSettingsFor","settingsFor","settings","open","templateUrl","resolve","hasParserSettings","isLocalLocation","isMultiple","size","result","then","importSelected","importFile","updateImport","stopImport","params","hasImportable","showTable","switchBatch","batch","newFileChecked","each","getSelectedFiles","overrideSettings","selectedFileNames","importNext","shift","resetStatusOrRemoveEntry","names","remove","headers","resetStatus","resetStatusSelected","removeEntry","removeEntrySelected","location","getActiveLocation","local","filterSettings","filtered","omitBy","isNull","omit","keys","viewUrl","getActiveRepository","pritifySettings","JSON","stringify","toTitleCase","s","upperFirst","toLowerCase","$controller","extend","this","importServerFiles","importSettings","fileNames","Upload","currentFiles","fileSelected","$files","$file","$newFiles","$duplicateFiles","$invalidFiles","Math","floor","$watchCollection","substr","fileIdx","splice","uniqBy","startImport","nextCallback","fileIndex","findIndex","format","message","finally","jsonBlob","upload","progress","evt","progressPercentage","parseInt","loaded","total","updateTextImport","pastedDataIdx","formattedDate","date","Date","getFullYear","padStart","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","pasteData","text","unshift","rdfDataFromURL","scope","existing","$modalInstance","importFormat","dismiss","ok","close","dataUrl","importFormats","rdfText","setFormat","isCollapsed","changeHelpTemplate","templateFile","commonUrl","UriUtils","hasError","input","o","context","target","enableReplace","replaceGraphs","fixSettings","settingsForm","replaceGraph","$setValidity","$valid","reset","addReplaceGraph","graph","valid","$setTouched","push","checkEnterReplaceGraph","event","keyCode","preventDefault","showAdvancedSettings","switchParserSettings"],"mappings":"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","file":"11.bdd794940dcfd5daa9a1.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.utils.uriutils', [])\n    .factory('UriUtils', UriUtils);\n\nlet iriRegExp;\ntry {\n    // Real validation but it requires a relatively new browser\n    iriRegExp = new RegExp(\"^[a-z](?:[-a-z0-9\\\\+\\\\.])*:(?:\\\\/\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:])*@)?(?:\\\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\\\._~!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:]+)\\\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=@])*)(?::[0-9]*)?(?:\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))*)*|\\\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))+)(?:\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))+)(?:\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@])))(?:\\\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@])|[\\\\u{E000}-\\\\u{F8FF}\\\\u{F0000}-\\\\u{FFFFD}\\\\u{100000}-\\\\u{10FFFD}\\\\/\\\\?])*)?(?:#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@])|[\\\\/\\\\?])*)?$\", \"ui\");\n} catch (e) {\n    // Fallback to simple validation, works in all browsers\n    iriRegExp = new RegExp(\"^[a-z](?:[-a-z0-9\\\\+\\\\.])*:\", \"i\");\n}\n\nfunction UriUtils() {\n    function validateRdfUri(value) {\n        const hasAngleBrackets = value.indexOf(\"<\") >= 0 && value.indexOf(\">\") >= 0;\n        const noAngleBrackets = value.indexOf(\"<\") === -1 && value.lastIndexOf(\">\") === -1;\n        const validProtocol = /^<?(http|urn).*>?/.test(value) && (hasAngleBrackets || noAngleBrackets);\n        let validPath = false;\n        if (validProtocol) {\n            if (value.indexOf(\"http\") >= 0) {\n                const schemaSlashesIdx = value.indexOf('//');\n                validPath = schemaSlashesIdx > 4\n                    && value.substring(schemaSlashesIdx + 2).length > 0;\n            } else if (value.indexOf(\"urn\") >= 0) {\n                validPath = value.substring(4).length > 0;\n            }\n        }\n        return validProtocol && validPath;\n    }\n\n    function isValidIri(iri) {\n        return iri !== undefined && !!iri.match(iriRegExp);\n    }\n\n    return {\n        isValidIri: isValidIri,\n        validateRdfUri: validateRdfUri\n    };\n}\n","import 'angular/core/services';\nimport 'angular/utils/uri-utils';\n\nconst FILE_STATUS = {\n    'UPLOADING': 'UPLOADING',\n    'PENDING': 'PENDING',\n    'ERROR': 'ERROR',\n    'DONE': 'DONE',\n    'NONE': 'NONE'\n};\n\nconst modules = [\n    'ui.bootstrap',\n    'toastr',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.utils.uriutils'\n];\n\nconst importCtrl = angular.module('graphdb.framework.impex.import.controllers', modules);\n\nimportCtrl.controller('CommonCtrl', ['$scope', '$http', 'toastr', '$interval', '$repositories', '$modal', '$filter', '$jwtAuth', '$location', 'LicenseRestService',\n    function ($scope, $http, toastr, $interval, $repositories, $modal, $filter, $jwtAuth, $location, LicenseRestService) {\n        $scope.files = [];\n        $scope.fileChecked = {};\n        $scope.checkAll = false;\n        $scope.popoverTemplateUrl = 'settingsPopoverTemplate.html';\n        $scope.fileQuery = '';\n\n        $scope.getAppData = function () {\n            LicenseRestService.getInfo().success(function (data) {\n                $scope.appData = {};\n\n                $scope.appData.properties = {};\n\n                for (let i = 0; i < data.length; i++) {\n                    $scope.appData.properties[data[i].key] = {\n                        source: data[i].source,\n                        value: data[i].value\n                    };\n                }\n                $scope.maxUploadFileSizeMB = $scope.appData.properties['graphdb.workbench.maxUploadSize'].value / (1024 * 1024);\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error');\n            });\n        };\n\n        $scope.getAppData();\n\n        $scope.fileFormats = ['ttl', 'ttls',  'rdf', 'rj', 'n3', 'nt', 'nq', 'trig', 'trigs', 'trix', 'brf', 'owl', 'jsonld'];\n\n        {\n            const gzs = _.map($scope.fileFormats, function (f) {\n                return '.' + f + '.gz';\n            });\n            const basics = _.map($scope.fileFormats, function (f) {\n                return '.' + f;\n            });\n            $scope.fileFormatsExtended = _.reduce(_.union(gzs, basics, ['.zip']), function (el, all) {\n                return el + ', ' + all;\n            });\n            $scope.fileFormatsHuman = _.reduce(basics, function (el, all) {\n                return el + ' ' + all;\n            }) + ', as well as their .gz versions and .zip archives';\n            $scope.textFileFormatsHuman = _.reduce(_.filter(basics, function (el) {\n                    return el !== '.brf';\n                }),\n                function (el, all) {\n                    return el + ' ' + all;\n                });\n        }\n\n        $scope.updateListHttp = function (force) {\n            $http({\n                method: 'GET',\n                url: $scope.getBaseUrl()\n            }).success(function (data) {\n                if ($scope.files.length === 0 || force) {\n                    $scope.files = data;\n                    _.forEach($scope.files, function (f) {\n                        if (!f.type) {\n                            f.type = $scope.defaultType;\n                        }\n                    });\n                    $scope.rebatch();\n                } else {\n                    $scope.files.forEach(function (f) {\n                        const remoteStatus = _.find(data, _.matches({'name': f.name}));\n                        if (f.status && remoteStatus) {\n                            _.assign(f, remoteStatus);\n                        }\n                        if (!f.type) {\n                            f.type = $scope.defaultType;\n                        }\n                    });\n                }\n                // Need new status here\n                if (force && 'user' === $scope.viewType) {\n                    $scope.files = _.filter($scope.files, function (f) {\n                        return f.status !== undefined;\n                    });\n                }\n                $scope.showClearStatuses = _.filter($scope.files, function (file) {\n                    return file.status === FILE_STATUS.DONE || file.status === FILE_STATUS.ERROR;\n                }).length > 0;\n\n                $scope.savedSettings = _.mapKeys(_.filter($scope.files, 'parserSettings'), 'name');\n\n                $scope.loader = false;\n            }).error(function (data) {\n                toastr.warning('Could not get files; ' + getError(data));\n                $scope.loader = false;\n            });\n        };\n\n        // update the list instantly when the tab is changed\n        $scope.$watch(function () {\n            return $($scope.tabId).is(':visible');\n        }, function () {\n            if ($($scope.tabId).is(':visible')) {\n                $scope.updateListHttp(false);\n                $location.hash($scope.viewType);\n            }\n        });\n\n        $scope.updateList = function (force) {\n            if (!$scope.canWriteActiveRepo()) {\n                return;\n            }\n\n            if (!$($scope.tabId).is(':visible')) {\n                return;\n            }\n            $scope.updateListHttp(force);\n        };\n\n        $scope.init = function () {\n            // Update restricted on repositoryIsSet\n            $scope.setRestricted();\n            if ($scope.isRestricted) {\n                return;\n            }\n            $scope.updateList(true);\n            $scope.getSettings();\n        };\n\n        $scope.$on('repositoryIsSet', $scope.init);\n\n        $scope.pullList = function () {\n            const timer = $interval(function () {\n                // Skip iteration if we are updating something\n                if (!$scope.updating) {\n                    $scope.updateList(false);\n                }\n            }, 4000);\n            $scope.$on('$destroy', function () {\n                $interval.cancel(timer);\n            });\n        };\n\n        $scope.getVisibleFiles = function () {\n            return $filter('filter')($scope.files, {name: $scope.fileQuery, type: $scope.getTypeFilter()});\n        };\n\n        $scope.getTypeFilter = function () {\n            if ($scope.viewType === 'server' && ($scope.showItems === 'file' || $scope.showItems === 'directory')) {\n                return $scope.showItems;\n            } else {\n                return '';\n            }\n        };\n\n        $scope.selectAllFiles = function () {\n            $scope.getVisibleFiles().forEach(function (file) {\n                $scope.fileChecked[file.name] = $scope.checkAll && $scope.importable(file);\n            });\n        };\n\n        $scope.getSettingsFor = function (fileName, withDefaultSettings) {\n            if (!withDefaultSettings && !_.isEmpty(fileName) && !_.isEmpty($scope.savedSettings[fileName])) {\n                return $scope.savedSettings[fileName];\n            } else {\n                return angular.copy($scope.defaultSettings);\n            }\n        };\n\n        $scope.setSettingsFor = function (fileName, withDefaultSettings) {\n            $scope.settingsFor = fileName;\n            $scope.settings = $scope.getSettingsFor(fileName, withDefaultSettings);\n\n            const modalInstance = $modal.open({\n                templateUrl: 'js/angular/import/templates/settingsModal.html',\n                controller: 'SettingsModalCtrl',\n                resolve: {\n                    settings: function () {\n                        return angular.copy($scope.settings);\n                    },\n                    hasParserSettings: $scope.isLocalLocation,\n                    defaultSettings: function () {\n                        return $scope.defaultSettings;\n                    },\n                    isMultiple: function () {\n                        return !fileName;\n                    }\n                },\n                size: 'lg'\n            });\n\n\n            modalInstance.result.then(function (settings) {\n                $scope.settings = settings;\n                if ($scope.settingsFor === '') {\n                    $scope.importSelected();\n                } else {\n                    $scope.importFile($scope.settingsFor, true);\n                }\n\n            }, function (settings) {\n                $scope.settings = settings;\n            });\n        };\n\n        $scope.updateImport = function (fileName, withDefaultSettings) {\n            $scope.settingsFor = fileName;\n            $scope.settings = $scope.getSettingsFor(fileName, withDefaultSettings);\n\n            $scope.importFile(fileName, false);\n        };\n\n        $scope.stopImport = function (file) {\n            $http({\n                method: 'DELETE',\n                url: $scope.getBaseUrl(),\n                params: {name: file.name, type: file.type}\n            }).success(function () {\n                $scope.updateList();\n            }).error(function (data) {\n                toastr.warning('Could not stop import; ' + getError(data));\n            });\n        };\n\n        $scope.importable = function () {\n            return true;\n        };\n\n        $scope.hasImportable = function () {\n            return _.filter($scope.files, function (f) {\n                return $scope.importable(f);\n            }).length > 0;\n        };\n\n        $scope.showTable = function () {\n            const showTable = $scope.files.length > 0 && ('user' === $scope.viewType || 'server' === $scope.viewType);\n            if ($scope.checkAll) {\n                $scope.switchBatch(true);\n            }\n            return showTable;\n        };\n\n        $scope.switchBatch = function (all) {\n            if (all) {\n                $scope.selectAllFiles();\n            } else {\n                if ($scope.checkAll) {\n                    $scope.checkAll = false;\n                }\n            }\n            $scope.batch = _.map(_.filter($scope.files, function (f) {\n                return $scope.fileChecked[f.name] && $scope.importable(f);\n            }), 'name').length > 0;\n        };\n\n        $scope.rebatch = function () {\n            const newFileChecked = {};\n            $scope.batch = false;\n            _.each($scope.files, function (file) {\n                newFileChecked[file.name] = $scope.fileChecked[file.name];\n                $scope.batch |= $scope.fileChecked[file.name];\n            });\n            if (!$scope.batch) {\n                $scope.checkAll = false;\n            }\n            $scope.fileChecked = newFileChecked;\n        };\n\n        $scope.getSelectedFiles = function () {\n            return _.map(_.filter($scope.getVisibleFiles(), function (f) {\n                return $scope.fileChecked[f.name] && $scope.importable(f);\n            }), 'name');\n        };\n\n        $scope.importSelected = function (overrideSettings) {\n            const selectedFileNames = $scope.getSelectedFiles();\n\n            // Calls the REST API sequentially for the selected files\n            const importNext = function () {\n                const fileName = selectedFileNames.shift();\n                if (fileName) {\n                    if (overrideSettings) {\n                        $scope.settings = $scope.getSettingsFor(fileName);\n                    }\n                    $scope.importFile(fileName, true, importNext);\n                }\n            };\n\n            importNext();\n        };\n\n        const resetStatusOrRemoveEntry = function (names, remove) {\n            $http({\n                method: 'DELETE',\n                url: $scope.getBaseUrl() + '/status',\n                params: {remove: remove},\n                data: names,\n                headers: {'Content-type': 'application/json;charset=utf-8'}\n            }).success(function () {\n                $scope.updateList(true);\n            }).error(function (data) {\n                toastr.warning('Could not clear status; ' + getError(data));\n            });\n        };\n\n        $scope.resetStatus = function (names) {\n            resetStatusOrRemoveEntry(names, false);\n        };\n\n        $scope.resetStatusSelected = function () {\n            $scope.resetStatus($scope.getSelectedFiles());\n        };\n\n        $scope.removeEntry = function (names) {\n            resetStatusOrRemoveEntry(names, true);\n        };\n\n        $scope.removeEntrySelected = function () {\n            $scope.removeEntry($scope.getSelectedFiles());\n        };\n\n        $scope.isLocalLocation = function () {\n            const location = $repositories.getActiveLocation();\n            return location && location.local;\n        };\n        // Settings\n\n        $scope.filterSettings = function (fileName) {\n            let filtered = _.omitBy($scope.savedSettings[fileName], _.isNull);\n            filtered = _.omit(filtered, ['repoLocationHash', 'status', 'message', 'name', 'data', 'type', 'format', 'fileNames', '$$hashKey']);\n            return _.map(_.keys(filtered), function (key) {\n                return [key, filtered[key]];\n            });\n        };\n\n        $scope.getSettings = function () {\n            if (!$scope.canWriteActiveRepo()) {\n                return;\n            }\n\n            $http({\n                method: 'GET',\n                url: 'rest/data/import/settings/default'\n            }).success(function (data) {\n                $scope.defaultSettings = data;\n            }).error(function (data) {\n                toastr.warning('Could not get default settings; ' + getError(data));\n            });\n        };\n\n        $scope.getBaseUrl = function () {\n            return 'rest/data/import/' + $scope.viewUrl + '/' + $repositories.getActiveRepository();\n        };\n\n        $scope.pritifySettings = function (settings) {\n            return JSON.stringify(settings, null, ' ');\n        };\n\n        $scope.toTitleCase = function (s) {\n            if (!s) {\n                return s;\n            }\n            return _.upperFirst(s.toLowerCase());\n        };\n    }]);\n\nimportCtrl.controller('ImportCtrl', ['$scope', '$http', 'toastr', '$controller', function ($scope, $http, toastr, $controller) {\n    $scope.loader = true;\n    angular.extend(this, $controller('CommonCtrl', {$scope: $scope}));\n    $scope.viewUrl = 'server';\n    $scope.defaultType = 'server';\n    $scope.tabId = '#import-server';\n    $scope.showItems = 'all';\n\n    $scope.pullList();\n\n    const importServerFiles = function (selectedFileNames, overrideSettings) {\n        if (!$scope.canWriteActiveRepo()) {\n            return;\n        }\n\n        $http({\n            method: 'POST',\n            url: $scope.getBaseUrl(),\n            data: {importSettings: overrideSettings ? null : $scope.settings, fileNames: selectedFileNames}\n        }).success(function () {\n            $scope.updateList();\n            $scope.batch = false;\n            $scope.fileChecked = {};\n        }).error(function (data) {\n            toastr.error('Could not send file for import; ' + getError(data));\n        });\n    };\n\n    $scope.importSelected = function (overrideSettings) {\n        const selectedFileNames = $scope.getSelectedFiles();\n        importServerFiles(selectedFileNames, overrideSettings);\n    };\n\n    $scope.importFile = function (fileName) {\n        importServerFiles([fileName]);\n    };\n\n    $scope.init();\n}]);\n\nimportCtrl.controller('UploadCtrl', ['$scope', 'Upload', '$http', 'toastr', '$controller', '$modal', function ($scope, Upload, $http, toastr, $controller, $modal) {\n    $scope.loader = true;\n    angular.extend(this, $controller('CommonCtrl', {$scope: $scope}));\n    $scope.viewUrl = 'upload';\n    $scope.defaultType = 'file';\n    $scope.tabId = '#import-user';\n\n    $scope.pullList();\n\n    $scope.currentFiles = [];\n\n    $scope.importable = function () {\n        return true;\n    };\n\n    $scope.fileSelected = function ($files, $file, $newFiles, $duplicateFiles, $invalidFiles) {\n        if ($invalidFiles.length > 0) {\n            $invalidFiles.forEach(function (f) {\n                toastr.warning('File ' + f.name + ' too big ' + Math.floor(f.size / (1024 * 1024)) + ' MB. Use Server Files import.');\n            });\n        }\n    };\n\n    $scope.$watchCollection('currentFiles', function () {\n        function disallowBZip2Files() {\n            $scope.currentFiles.forEach(function (f) {\n                if (f.name.substr(f.name.lastIndexOf('.') + 1) === 'bz2') {\n                    const fileIdx = $scope.currentFiles.indexOf(f);\n                    if (fileIdx > -1) {\n                        $scope.currentFiles.splice(fileIdx, 1);\n                    }\n                    toastr.error('Could not upload file ' + f.name + '. BZip2 archives are not supported.');\n                }\n            });\n        }\n\n        if ($scope.currentFiles) {\n            // RDF4J does not support decompressing .bz2 files so we want to reject importing them\n            disallowBZip2Files();\n        }\n        $scope.files = _.uniqBy(\n            _.union(\n                _.map($scope.currentFiles, function (file) {\n                    return {name: file.name, type: 'file', file: file}\n                }),\n                $scope.files\n            ),\n            function (file) {\n                return file.name;\n            }\n        );\n        $scope.savedSettings = _.mapKeys(_.filter($scope.files, 'parserSettings'), 'name');\n        _.each($scope.currentFiles, function (file) {\n            $scope.updateImport(file.name);\n        });\n    });\n\n    $scope.importFile = function (fileName, startImport, nextCallback) {\n        const fileIndex = _.findIndex($scope.files, {name: fileName});\n        if (fileIndex < 0) {\n            toastr.warning('No such file; ' + fileName);\n        } else {\n            const file = $scope.files[fileIndex];\n            if (file.type === 'text') {\n                // Import text snippet\n                $scope.settings.name = file.name;\n                $scope.settings.type = file.type;\n                $scope.settings.data = file.data;\n                $scope.settings.format = file.format;\n                file.status = FILE_STATUS.PENDING;\n                $http({\n                    method: 'POST',\n                    url: $scope.getBaseUrl() + (startImport ? '' : '/update') + '/text',\n                    data: $scope.settings\n                }).success(function () {\n                    $scope.updateList();\n                }).error(function (data) {\n                    toastr.error('Could not send data for import; ' + getError(data));\n                    file.status = FILE_STATUS.ERROR;\n                    file.message = getError(data);\n                }).finally(nextCallback || function () {\n                });\n            } else if (file.type === 'url') {\n                // Submit URL\n                $scope.settings.name = file.name;\n                $scope.settings.type = file.type;\n                $scope.settings.data = file.data;\n                $scope.settings.format = file.format;\n                file.status = FILE_STATUS.PENDING;\n                $http({\n                    method: 'POST',\n                    url: $scope.getBaseUrl() + (startImport ? '' : '/update') + '/url',\n                    data: $scope.settings\n                }).success(function () {\n                    $scope.updateList();\n                }).error(function (data) {\n                    toastr.error('Could not send url for import; ' + getError(data));\n                }).finally(nextCallback || function () {\n                });\n            } else {\n                // Upload real file\n                $scope.settings.name = file.name;\n                let data;\n                if (file.file) {\n                    data = {file: file.file, importSettings: Upload.jsonBlob($scope.settings)};\n                } else {\n                    data = {importSettings: Upload.jsonBlob($scope.settings)};\n                }\n                Upload.upload({\n                    url: $scope.getBaseUrl() + (startImport ? '' : '/update') + '/file',\n                    data: data\n                }).progress(function (evt) {\n                    if (file.file) {\n                        file.file = null;\n                        file.status = FILE_STATUS.UPLOADING;\n                    } else if (file.status !== FILE_STATUS.UPLOADING) {\n                        file.status = FILE_STATUS.PENDING;\n                    }\n\n                    if (file.status === FILE_STATUS.UPLOADING) {\n                        const progressPercentage = parseInt(100.0 * evt.loaded / evt.total);\n                        file.message = progressPercentage + '% uploaded';\n                    }\n                }).success(function () {\n                    $scope.updateList();\n                }).error(function (data) {\n                    toastr.error('Could not upload file; ' + getError(data));\n                    file.status = FILE_STATUS.ERROR;\n                    file.message = getError(data);\n                }).finally(nextCallback || function () {\n                });\n            }\n        }\n    };\n\n    $scope.updateTextImport = function (settings) {\n        $scope.updating = true;\n        $http({\n            method: 'POST',\n            url: $scope.getBaseUrl() + '/update/text',\n            data: settings\n        }).success(function (data) {\n        }).error(function (data) {\n            toastr.error('Could not update text import; ' + getError(data));\n        }).finally(function () {\n            $scope.updating = false;\n        });\n    };\n\n    $scope.pastedDataIdx = 1;\n\n    const formattedDate = function () {\n        const date = new Date();\n        return date.getFullYear() + '-' + _.padStart(date.getMonth() + 1, 2, '0') + '-' + _.padStart(date.getDate(), 2, '0')\n            + ' ' + _.padStart(date.getHours(), 2, '0') + ':' + _.padStart(date.getMinutes(), 2, '0') + ':' + _.padStart(date.getSeconds(), 2, '0')\n            + '.' + _.padStart(date.getMilliseconds(), 3, '0');\n    };\n\n    $scope.pasteData = function (file) {\n        const scope = {};\n        if (file) {\n            scope.rdfText = file.data;\n        }\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/import/templates/textSnippet.html',\n            controller: 'TextCtrl',\n            resolve: {\n                text: function () {\n                    return file ? file.data : '';\n                },\n                format: function () {\n                    return file ? file.format : 'text/turtle';\n                }\n            }\n        });\n\n        modalInstance.result.then(function (data) {\n            if (file) {\n                if ((file.data !== data.text || file.format !== data.format) && file.status !== FILE_STATUS.NONE) {\n                    file.status = FILE_STATUS.NONE;\n                    file.message = 'Text snippet was edited but has not been imported again.';\n                }\n                file.data = data.text;\n                file.format = data.format;\n                $scope.updateTextImport(file);\n            } else {\n                file = {type: 'text', name: 'Text snippet ' + formattedDate(), format: data.format, data: data.text};\n                $scope.files.unshift(file);\n                $scope.updateImport(file.name);\n            }\n            if (data.startImport) {\n                $scope.setSettingsFor(file.name);\n            }\n        });\n    };\n\n    $scope.rdfDataFromURL = function () {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/import/templates/urlImport.html',\n            controller: 'UrlCtrl',\n            scope: $scope\n        });\n\n        modalInstance.result.then(function (data) {\n            // URL may already exist\n            const existing = _.find($scope.files, {type: 'url', name: data.url});\n            if (existing) {\n                existing.format = data.format;\n            } else {\n                $scope.files.unshift({type: 'url', name: data.url, format: data.format, data: data.url});\n            }\n            $scope.updateImport(data.url, true);\n            if (data.startImport) {\n                $scope.setSettingsFor(data.url, true);\n            }\n        });\n    };\n\n    $scope.init();\n}]);\n\nimportCtrl.controller('UrlCtrl', ['$scope', '$modalInstance', 'toastr', function ($scope, $modalInstance) {\n    $scope.importFormat = {name: 'Auto', type: ''};\n    $scope.startImport = true;\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n\n    $scope.ok = function () {\n        $modalInstance.close({\n            url: $scope.dataUrl,\n            format: $scope.importFormat.type,\n            startImport: $scope.startImport\n        });\n    };\n}]);\n\nimportCtrl.controller('TextCtrl', ['$scope', '$modalInstance', 'text', 'format', function ($scope, $modalInstance, text, format) {\n    $scope.importFormats = [\n        {name: 'RDF/JSON', type: 'application/rdf+json'},\n        {name: 'JSON-LD', type: 'application/ld+json'},\n        {name: 'RDF/XML', type: 'application/rdf+xml'},\n        {name: 'N3', type: 'text/rdf+n3'},\n        {name: 'N-Triples', type: 'text/plain'},\n        {name: 'N-Quads', type: 'text/x-nquads'},\n        {name: 'Turtle', type: 'text/turtle'},\n        {name: 'Turtle*', type: 'application/x-turtlestar'},\n        {name: 'TriX', type: 'application/trix'},\n        {name: 'TriG', type: 'application/x-trig'},\n        {name: 'TriG*', type: 'application/x-trigstar'},\n    ];\n\n    $scope.rdfText = text;\n    $scope.importFormat = _.find($scope.importFormats, {type: format});\n    $scope.startImport = true;\n\n    $scope.setFormat = function (format) {\n        $scope.importFormat = format;\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n\n    $scope.ok = function () {\n        $modalInstance.close({\n            text: $scope.rdfText,\n            format: $scope.importFormat.type,\n            startImport: $scope.startImport\n        });\n    };\n}]);\n\nimportCtrl.controller('TabCtrl', ['$scope', '$location', function ($scope, $location) {\n    $scope.viewType = $location.hash();\n    if ($scope.viewType !== 'user' && $scope.viewType !== 'server') {\n        $scope.viewType = 'user';\n    }\n    $scope.isCollapsed = false;\n    if ($scope.viewType === 'user') {\n        $scope.templateUrl = 'js/angular/import/templates/uploadInfo.html';\n    } else {\n        $scope.templateUrl = 'js/angular/import/templates/importInfo.html';\n    }\n    $scope.changeHelpTemplate = function (templateFile) {\n        $scope.templateUrl = 'js/angular/import/templates/' + templateFile;\n    };\n    $scope.commonUrl = 'js/angular/import/templates/commonInfo.html';\n}]);\n\nimportCtrl.controller('SettingsModalCtrl', ['$scope', '$modalInstance', 'toastr', 'UriUtils', 'settings', 'hasParserSettings', 'defaultSettings', 'isMultiple',\n    function ($scope, $modalInstance, toastr, UriUtils, settings, hasParserSettings, defaultSettings, isMultiple) {\n    $scope.hasError = function (error, input) {\n        return _.find(error, function (o) {\n            return input === o['$name'];\n        });\n    };\n\n    $scope.settings = settings;\n    $scope.hasParserSettings = hasParserSettings;\n    if ($scope.settings.context) {\n        if ($scope.settings.context === 'default') {\n            $scope.target = 'default';\n            $scope.settings.context = '';\n        } else {\n            $scope.target = 'named';\n        }\n    } else {\n        $scope.target = 'data';\n    }\n    $scope.isMultiple = isMultiple;\n    $scope.enableReplace = !!($scope.settings.replaceGraphs && $scope.settings.replaceGraphs.length);\n\n    const fixSettings = function () {\n        if ($scope.target === 'default') {\n            $scope.settings.context = 'default';\n        } else if ($scope.target === 'data') {\n            $scope.settings.context = '';\n        }\n        if ($scope.enableReplace) {\n            if ($scope.target === 'default' || $scope.target === 'named') {\n                $scope.settings.replaceGraphs = [$scope.settings.context];\n            }\n        } else {\n            $scope.settings.replaceGraphs = [];\n        }\n    };\n\n    $scope.ok = function () {\n        // resets the validity of a field only used for temporary things\n        $scope.settingsForm.replaceGraph.$setValidity('replaceGraph', true);\n\n        if ($scope.settingsForm.$valid) {\n            fixSettings();\n            $modalInstance.close($scope.settings);\n        }\n    };\n\n    $scope.cancel = function () {\n        fixSettings();\n        $modalInstance.dismiss($scope.settings);\n    };\n\n    $scope.reset = function () {\n        $scope.settings = angular.copy(defaultSettings);\n        $scope.target = 'data';\n    };\n\n    $scope.addReplaceGraph = function (graph) {\n        let valid = true;\n        if (graph !== 'default') {\n            valid = UriUtils.isValidIri(graph);\n        }\n        $scope.settingsForm.replaceGraph.$setTouched();\n        $scope.settingsForm.replaceGraph.$setValidity('replaceGraph', valid);\n\n        if ($scope.settingsForm.replaceGraph.$valid) {\n            $scope.settings.replaceGraphs = $scope.settings.replaceGraphs || [];\n            if (_.indexOf($scope.settings.replaceGraphs, graph) === -1) {\n                $scope.replaceGraph = '';\n                $scope.settings.replaceGraphs.push(graph);\n            } else {\n                toastr.warning('This graph is already in the list.');\n            }\n        }\n    };\n\n    $scope.checkEnterReplaceGraph = function (event, graph) {\n        if (event.keyCode === 13) {\n            event.preventDefault();\n\n            $scope.addReplaceGraph(graph);\n        }\n    };\n\n    $scope.showAdvancedSettings = false;\n    $scope.switchParserSettings = function () {\n        $scope.showAdvancedSettings = !$scope.showAdvancedSettings;\n    };\n}]);\n"],"sourceRoot":""}