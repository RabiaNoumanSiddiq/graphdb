{"version":3,"sources":["webpack:///./src/js/angular/namespaces/controllers.js"],"names":["namespaces","angular","module","pnPrefixRe","pnCharsBase","pnChars","pnCharsU","RegExp","controller","$scope","$http","$repositories","toastr","$modal","ModalService","RepositoriesRestService","RDF4JRepositoriesRestService","deleteNamespace","namespace","prefix","deleteNamespacePrefix","getActiveRepository","success","length","shift","selectedAll","getNamespaces","searchNamespaces","haveSelected","loader","displayedNamespaces","undefined","error","data","msg","getError","validatePrefixAndNamespace","match","validatePrefix","isUndefined","pageSizeOptions","page","pageSize","results","bindings","map","e","value","sort","a","b","prefixA","toUpperCase","prefixB","matchedElements","changePagination","isDefined","slice","changePageSize","size","$","removeClass","$watch","onNamespaceSearch","deselectAll","filterResults","forEach","item","indexOf","push","saveNamespace","updateNamespacePrefix","editPrefix","oldPrefix","newPrefix","getPrefix","from","to","confirmReplace","okCallback","cancelCallback","openSimpleModal","title","message","warning","result","then","editPrefixAndNamespace","namespaceObject","prefixExist","elem","addNamespace","i","removeNamespace","checkAll","selected","deleteSelected","modalInstanceOpened","checkIfSelectedNamespace","$modalInstance","ok","close","cancel","dismiss"],"mappings":"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","file":"68.05bddc936e473bd1b642.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/services/jwt-auth.service';\nimport 'angular/core/services/repositories.service';\nimport 'angular/rest/rdf4j.repositories.rest.service';\n\nconst modules = [\n    'ui.bootstrap',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.core.services.jwtauth',\n    'graphdb.framework.rest.repositories.service',\n    'graphdb.framework.rest.rdf4j.repositories.service',\n    'toastr'\n];\n\nconst namespaces = angular.module('graphdb.framework.namespaces.controllers', modules);\n\n// A regular expression that validates a prefix according to the SPARQL 1.1 specification.\n// XXX: Technically this should include Unicode chars > 0xFFFF but those aren't fully supported in JavaScript\nconst pnPrefixRe = function () {\n    const pnCharsBase = '[A-Z]|[a-z]|[\\u00C0-\\u00D6]|[\\u00D8-\\u00F6]|[\\u00F8-\\u02FF]|[\\u0370-\\u037D]'\n        + '|[\\u037F-\\u1FFF]|[\\u200C-\\u200D]|[\\u2070-\\u218F]|[\\u2C00-\\u2FEF]|[\\u3001-\\uD7FF]'\n        + '|[\\uF900-\\uFDCF]|[\\uFDF0-\\uFFFD]';\n    const pnCharsU = pnCharsBase + '|_';\n    const pnChars = pnCharsU + '|-|[0-9]|\\u00B7|[\\u0300-\\u036F]|[\\u203F-\\u2040]';\n\n    return new RegExp('^(?:' + pnCharsBase + ')(?:(?:' + pnChars + '|\\\\.)*(?:' + pnChars + '))?$');\n}();\n\nfunction validatePrefix(prefix) {\n    return prefix === '' || prefix.match(pnPrefixRe);\n}\n\nnamespaces.controller('NamespacesCtrl', ['$scope', '$http', '$repositories', 'toastr', '$modal', 'ModalService', 'RepositoriesRestService', 'RDF4JRepositoriesRestService',\n    function ($scope, $http, $repositories, toastr, $modal, ModalService, RepositoriesRestService, RDF4JRepositoriesRestService) {\n        $scope.namespaces = {};\n        $scope.namespace = {};\n        $scope.loader = false;\n        $scope.haveSelected = false;\n        $scope.pageSizeOptions = [10, 20, 50, 100];\n        $scope.page = 1;\n        $scope.pageSize = $scope.pageSizeOptions[0];\n        $scope.displayedNamespaces = [];\n\n        $scope.getNamespaces = function () {\n            if (!$repositories.getActiveRepository()) {\n                return;\n            }\n\n            $scope.loader = true;\n            $scope.namespaces = {};\n            RDF4JRepositoriesRestService.getNamespaces($repositories.getActiveRepository())\n                .success(function (data) {\n                    $scope.namespaces = data.results.bindings.map(function (e) {\n                        return {\n                            prefix: e.prefix.value,\n                            namespace: e.namespace.value\n                        };\n                    });\n                    if ($scope.namespaces.length > 0) {\n                        $scope.namespaces.sort(function (a, b) {\n                            const prefixA = a.prefix.toUpperCase(); // ignore upper and lowercase\n                            const prefixB = b.prefix.toUpperCase(); // ignore upper and lowercase\n                            if (prefixA < prefixB) {\n                                return -1;\n                            }\n                            if (prefixA > prefixB) {\n                                return 1;\n                            }\n                            return 0;\n                        });\n                        $scope.matchedElements = $scope.namespaces;\n                        $scope.changePagination();\n                    }\n                    if ($scope.namespaces.length === 0) {\n                        // Remove the loader ourselves\n                        $scope.loader = false;\n                    } // else let the loaderPostRepeatDirective do it\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg);\n                    $scope.loader = false;\n                });\n        };\n\n        $scope.changePagination = function () {\n            if (angular.isDefined($scope.namespaces)) {\n                $scope.displayedNamespaces = $scope.namespaces.slice($scope.pageSize * ($scope.page - 1), $scope.pageSize * $scope.page);\n            }\n        };\n\n        $scope.changePageSize = function (size) {\n            $('.ot-graph-page-size').removeClass('active');\n            $scope.page = 1;\n            $scope.searchNamespaces = '';\n            if (size) {\n                $scope.getNamespaces();\n                $scope.pageSize = size;\n            }\n        };\n\n        $scope.$watch('matchedElements', function () {\n            if (angular.isDefined($scope.matchedElements)) {\n                $scope.displayedNamespaces = $scope.matchedElements.slice($scope.pageSize * ($scope.page - 1), $scope.pageSize * $scope.page);\n            }\n        });\n\n        $scope.$watch(function () {\n            return $repositories.getActiveRepository();\n        }, function () {\n            $scope.searchNamespaces = '';\n            $scope.getNamespaces();\n            $scope.selectedAll = false;\n        });\n\n        $scope.onNamespaceSearch = function() {\n            $scope.haveSelected = false;\n            $scope.selectedAll = false;\n            $scope.matchedElements = [];\n            $scope.deselectAll();\n            $scope.filterResults();\n        };\n\n        $scope.filterResults = function() {\n            angular.forEach($scope.namespaces, function (item) {\n                if (item.namespace.indexOf($scope.searchNamespaces) !== -1 || item.prefix.indexOf($scope.searchNamespaces) !== -1) {\n                    $scope.matchedElements.push(item);\n                }\n            });\n        };\n\n        $scope.saveNamespace = function (prefix, namespace) {\n            $scope.loader = true;\n            return RDF4JRepositoriesRestService.updateNamespacePrefix($repositories.getActiveRepository(), namespace, prefix)\n                .success(function () {\n                    $scope.getNamespaces();\n                    $scope.loader = false;\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error');\n                    $scope.loader = false;\n                });\n        };\n\n        $scope.editPrefix = function (oldPrefix, newPrefix) {\n            $scope.loader = true;\n            RepositoriesRestService.getPrefix($repositories.getActiveRepository(), {from: oldPrefix, to: newPrefix})\n                .success(function () {\n                    $scope.getNamespaces();\n                    $scope.loader = false;\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error');\n                    $scope.loader = false;\n                });\n        };\n\n        $scope.confirmReplace = function (okCallback, cancelCallback) {\n            ModalService.openSimpleModal({\n                title: 'Confirm replace',\n                message: 'This namespace prefix already exists. Do you want to replace it?',\n                warning: true\n            }).result.then(okCallback, cancelCallback);\n        };\n\n        $scope.editPrefixAndNamespace = function (prefix, namespace, namespaceObject) {\n            if (angular.isUndefined(prefix)) {\n                prefix = '';\n            }\n\n            if (!validatePrefixAndNamespace(prefix, namespace)) {\n                return '';\n            }\n\n            let prefixExist = false;\n            const oldPrefix = namespaceObject.prefix;\n            angular.forEach($scope.namespaces, function (elem) {\n                if (elem.prefix === prefix && oldPrefix !== prefix) {\n                    prefixExist = true;\n                }\n            });\n            if (prefixExist) {\n                $scope.confirmReplace(function () {\n                    $scope.saveNamespace(oldPrefix, namespace).then(function () {\n                        if (oldPrefix !== prefix) {\n                            $scope.editPrefix(oldPrefix, prefix);\n                        }\n                    });\n                }, function () {\n                    $scope.getNamespaces();\n                });\n            } else if (angular.isDefined(prefixExist)) {\n                $scope.saveNamespace(oldPrefix, namespace).then(function () {\n                    if (oldPrefix !== prefix) {\n                        $scope.editPrefix(oldPrefix, prefix);\n                    }\n                });\n            }\n        };\n\n        $scope.addNamespace = function () {\n            if (angular.isUndefined($scope.namespace.prefix)) {\n                $scope.namespace.prefix = '';\n            }\n\n            if (!validatePrefixAndNamespace($scope.namespace.prefix, $scope.namespace.namespace)) {\n                return;\n            }\n\n            $scope.selectedAll = false;\n            let prefixExist = false;\n            for (let i = 0; i < $scope.namespaces.length; i++) {\n                if ($scope.namespaces[i].prefix === $scope.namespace.prefix) {\n                    prefixExist = true;\n                }\n            }\n            if (prefixExist) {\n                $scope.confirmReplace(function () {\n                    $scope.saveNamespace($scope.namespace.prefix, $scope.namespace.namespace);\n                    $scope.namespace = {};\n                });\n            } else {\n                $scope.saveNamespace($scope.namespace.prefix, $scope.namespace.namespace);\n                $scope.namespace = {};\n            }\n        };\n\n        $scope.removeNamespace = function (namespace) {\n            ModalService.openSimpleModal({\n                title: 'Confirm delete',\n                message: 'Are you sure you want to delete the namespace \\'' + namespace.prefix + '\\'?',\n                warning: true\n            }).result.then(function () {\n                deleteNamespace(namespace);\n            });\n        };\n\n        $scope.checkAll = function () {\n            angular.forEach($scope.displayedNamespaces, function (item) {\n                item.selected = $scope.selectedAll;\n            });\n        };\n\n        $scope.deleteSelected = function () {\n            const openModalInstance = function () {\n                ModalService.openSimpleModal({\n                    title: 'Confirm delete',\n                    message: 'Are you sure you want to delete the selected namespace(s)?',\n                    warning: true\n                }).result.then(function () {\n                    $scope.loader = true;\n                    const namespaces = [];\n                    angular.forEach($scope.displayedNamespaces, function (namespace) {\n                        if (namespace.selected) {\n                            namespaces.push(namespace);\n                        }\n                    });\n                    deleteNamespace(namespaces.shift(), namespaces);\n                    $scope.selectedAll = false;\n                }, function () {\n                    $scope.getNamespaces();\n                    $scope.selectedAll = false;\n                    $scope.searchNamespaces = '';\n                });\n            };\n\n            let modalInstanceOpened = false;\n            angular.forEach($scope.displayedNamespaces, function (namespace) {\n                if (!modalInstanceOpened) {\n                    if (namespace.selected) {\n                        modalInstanceOpened = true;\n                        openModalInstance();\n                    }\n                }\n            });\n        };\n\n        function deleteNamespace(namespace, namespaces) {\n            let prefix;\n            if (typeof namespace === 'object') {\n                prefix = namespace.prefix;\n            } else {\n                prefix = namespace;\n            }\n            RDF4JRepositoriesRestService.deleteNamespacePrefix($repositories.getActiveRepository(), prefix)\n                .success(function () {\n                    if (namespaces && namespaces.length > 0) {\n                        namespace = namespaces.shift();\n                        deleteNamespace(namespace, namespaces);\n                    } else {\n                        $scope.selectedAll = false;\n                        $scope.namespace = {};\n                        $scope.getNamespaces();\n                        $scope.searchNamespaces = '';\n                        $scope.haveSelected = false;\n                        $scope.loader = false;\n                        $scope.displayedNamespaces = [];\n                        if (namespaces === undefined) {\n                            toastr.success('Namespace with prefix \\'' + prefix + '\\' was deleted successfully.', '');\n                        } else {\n                            toastr.success('Selected namespaces were deleted successfully.', '');\n                        }\n                    }\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error');\n                    $scope.loader = false;\n                });\n        }\n\n        $scope.checkIfSelectedNamespace = function () {\n            $scope.haveSelected = false;\n            angular.forEach($scope.namespaces, function (item) {\n                if (item.selected) {\n                    $scope.haveSelected = true;\n                }\n            });\n        };\n\n        $scope.deselectAll = function () {\n            angular.forEach($scope.namespaces, function (item) {\n                item.selected = false;\n            });\n        };\n\n        function validatePrefixAndNamespace(prefix, namespace) {\n            if (!validatePrefix(prefix)) {\n                toastr.error('Invalid prefix: ' + prefix, 'Error');\n                return false;\n            }\n\n            if (angular.isUndefined(namespace) || namespace === '') {\n                toastr.error('Please provide namespace.', 'Error');\n                return false;\n            }\n\n            return true;\n        }\n    }]);\n\nnamespaces.controller('StandartModalCtrl', ['$scope', '$modalInstance', function ($scope, $modalInstance) {\n\n    $scope.ok = function () {\n        const result = true;\n        $modalInstance.close(result);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}]);\n"],"sourceRoot":""}