{"version":3,"sources":["webpack:///./src/js/angular/core/directives/queryeditor/query-editor.controller.js"],"names":["QueryEditorCtrl","$scope","$timeout","toastr","$repositories","$modal","ModalService","SparqlRestService","$filter","$window","$jwtAuth","RDF4JRepositoriesRestService","MonitoringRestService","LocalStorageAdapter","LSKeys","defaultTabConfig","id","name","query","inference","sameAs","checkQueryIntervalId","principal","getPrincipal","initTabs","scope","appSettings","DEFAULT_INFERENCE","DEFAULT_SAMEAS","skipCountQuery","EXECUTE_COUNT","ignoreSharedQueries","IGNORE_SHARED_QUERIES","tabsData","tabs","get","TABS_STATE","$watchCollection","newVal","oldVal","saveQueryToLocal","currentQuery","$on","deleteCachedSparqlResults","currentQueryTab","forEach","tab","index","set","setLoader","isRunning","progressMessage","extraMessage","noTimer","yasrInnerContainer","angular","element","document","getElementById","queryIsRunning","queryStartTime","Date","now","countTimeouted","noLoaderTimer","addClass","currentTrackAlias","abortRequested","removeClass","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalView","visibleWindowHeight","window","innerHeight","documentElement","clientHeight","body","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","editor","timer","cancel","yasr","container","resize","showHideEditor","foo","params","newRepo","item","yasrData","undefined","queryType","resultsCount","allResultsCount","sizeDelta","errorMessage","repositoryError","selectTab","$","runQuery","changePage","explain","executedQueryTab","getQueryType","warning","isActiveRepoOntopType","explainRequested","currentTabConfig","resetCurrentTabConfig","lastRunQueryMode","getQueryMode","toggleSampleQueries","showSampleQueries","getSavedQueries","success","data","sampleQueries","collapse","width","error","msg","getError","getExistingTabId","existingTabId","showModal","modalSelector","shared","savedQuery","getValue","modal","findTabIndexByID","i","length","currentScope","this","hint","createElement","innerHTML","fontSize","color","backgroundColor","position","zIndex","$watch","newValue","elRect","appendChild","top","left","right","offsetWidth","parentNode","removeChild","pageSize","page","queryExists","saveTab","idx","loadTab","setValue","updateDownloadDropdown","$broadcast","options","output","outputType","customError","results","getException","setYasrResponse","textStatus","jqXhrOrErrorString","hasClass","click","TABS_STATE_CURRENT_ID","offset","allResultsCountExact","timeFinished","timeTook","customUpdateMessage","warningMessage","css","setInterval","showOrHideSaveAsDropDown","isOntop","isFedX","isActiveRepoFedXType","sameAsBtn","inferenceBtn","disabled","handleSameAsAndInferenceBtns","nocount","overrideSameAsInferenceAndNoCountIfNeeded","addNewTab","callback","tabName","isTabChangeOk","maxID","newID","newTab","push","TABS_STATE_MAXID","callbackArgs","Array","prototype","slice","call","arguments","apply","abortCurrentQuery","abortQueryByAlias","editQuery","open","templateUrl","controller","resolve","title","edit","okButtonText","result","then","queryModal","addNewSavedQuery","deleteQueryHttp","editSavedQuery","getNamespaces","namespacesLoading","getRepositoryNamespaces","usedPrefixes","bindings","e","prefix","value","namespace","namespaces","finally","changePagination","addKnownPrefixes","JSON","stringify","isDefined","querySelected","tabId","highlightNextTabChange","deleteQuery","savedQueryName","openSimpleModal","message","deleteSavedQuery","saveQuery","saveQueryHttp","getLoaderMessage","timeSeconds","timeHuman","getHumanReadableSeconds","changeViewMode","VIEW_MODE","focusQueryEditor","find","is","focus","getActiveRepository","getActiveRepositoryNoError","onbeforeunload","clearInterval","mouseup","event","target","has","getQueryID","attr","$saveAsDropDown","queryValid","header","remove","isNew","info","tabEvent","relatedTarget","colors","times","highlightFun","editQueryModal","deleteQueryModal","saveQueryModal","getResultsDescription","desc","currentPageEnd","Math","min","getUpdateDescription","abs","getStaleWarningMessage","secondsAgo","round","bind","unbind","QuerySampleModalCtrl","$modalInstance","copy","ok","form","$valid","close","dismiss","module","$inject"],"mappings":"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","file":"48.14a8f14de3765cbe330c.bundle.js","sourcesContent":["import 'angular/utils/local-storage-adapter';\nimport 'angular/rest/sparql.rest.service';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.controllers', [\n        'graphdb.framework.utils.localstorageadapter',\n        'graphdb.framework.rest.sparql.service'\n    ])\n    .controller('QueryEditorCtrl', QueryEditorCtrl)\n    .controller('QuerySampleModalCtrl', QuerySampleModalCtrl);\n\nQueryEditorCtrl.$inject = ['$scope', '$timeout', 'toastr', '$repositories', '$modal', 'ModalService', 'SparqlRestService', '$filter', '$window', '$jwtAuth', 'RDF4JRepositoriesRestService', 'MonitoringRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction QueryEditorCtrl($scope, $timeout, toastr, $repositories, $modal, ModalService, SparqlRestService, $filter, $window, $jwtAuth, RDF4JRepositoriesRestService, MonitoringRestService, LocalStorageAdapter, LSKeys) {\n    const defaultTabConfig = {\n        id: \"1\",\n        name: '',\n        query: 'select * where { \\n' +\n        '\\t?s ?p ?o .\\n' +\n        '} limit 100 \\n',\n        inference: true,\n        sameAs: true\n    };\n\n    let principal = $jwtAuth.getPrincipal();\n    let checkQueryIntervalId;\n    if (principal) {\n        initTabs($scope, principal);\n        // principal is not yet set, wait for its initialization\n    } else {\n        $scope.$on('securityInit', function (scope) {\n            principal = $jwtAuth.getPrincipal();\n            initTabs(scope.currentScope, principal);\n        });\n    }\n\n    function initTabs(scope, principal) {\n        defaultTabConfig.inference = principal.appSettings.DEFAULT_INFERENCE;\n        defaultTabConfig.sameAs = principal.appSettings.DEFAULT_SAMEAS;\n\n        scope.skipCountQuery = !principal.appSettings.EXECUTE_COUNT;\n        scope.ignoreSharedQueries = principal.appSettings.IGNORE_SHARED_QUERIES;\n        scope.tabsData = scope.tabs = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function (newVal, oldVal, scope) {\n            saveQueryToLocal(scope.currentQuery);\n        });\n\n        scope.$on('repositoryIsSet', deleteCachedSparqlResults);\n    }\n\n    this.hint =  document.createElement(\"span\");\n    this.hint.innerHTML = \"Hint: \\\"abC\\\" matches \\\"abC*\\\", \\\"ab c*\\\" and \\\"ab-c*\\\"\";\n    this.hint.style.fontSize = \"12px\";\n    this.hint.style.color = \"gray\";\n    this.hint.style.backgroundColor = \"white\";\n    this.hint.style.position = \"absolute\";\n    this.hint.style.zIndex = \"3\";\n    this.hint.style.paddingLeft = 12 + \"px\";\n\n    $scope.$watch(function() {\n        return angular.element('.CodeMirror-hints').length;\n    }, (newValue) => {\n        if (newValue) {\n            const elRect = angular.element('.CodeMirror-hints')[0].getBoundingClientRect();\n            document.body.appendChild(this.hint);\n            this.hint.style.top = elRect.top - 20 + \"px\";\n            this.hint.style.left = elRect.right - this.hint.offsetWidth - 12 +  \"px\";\n        } else {\n            this.hint && this.hint.parentNode && this.hint.parentNode.removeChild(this.hint);\n        }\n    });\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 1000,\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n    $scope.isTabChangeOk = isTabChangeOk;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.abortCurrentQuery = abortCurrentQuery;\n    $scope.editQuery = editQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.deleteQuery = deleteQuery;\n    $scope.deleteQueryHttp = deleteQueryHttp;\n    $scope.saveQuery = saveQuery;\n    $scope.saveQueryHttp = saveQueryHttp;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = LocalStorageAdapter.get(LSKeys.VIEW_MODE) ? LocalStorageAdapter.get(LSKeys.VIEW_MODE) === \"true\" : true;\n    $scope.viewMode = 'none';\n\n    // start of repository actions\n    // FIXME: do we need this??\n    // $scope.getActiveRepository();\n    $scope.getActiveRepository = function () {\n        // same as getActiveRepository() but takes into account repo errors\n        return $repositories.getActiveRepository();\n    };\n\n    $scope.getActiveRepositoryNoError = function () {\n        if (!$scope.repositoryError) {\n            return $repositories.getActiveRepository();\n        }\n    };\n\n    function saveQueryToLocal(currentQueryTab) {\n        $scope.tabs.forEach(function (tab, index) {\n            if (tab.id === currentQueryTab.id) {\n                $scope.tabs[index].query = currentQueryTab.query;\n                $scope.tabs[index].inference = currentQueryTab.inference;\n                $scope.tabs[index].sameAs = currentQueryTab.sameAs;\n            }\n        });\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage, noTimer) {\n        const yasrInnerContainer = angular.element(document.getElementById(\"yasr-inner\"));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            $scope.noLoaderTimer = noTimer;\n            yasrInnerContainer.addClass(\"hide\");\n        } else {\n            $scope.progressMessage = \"\";\n            $scope.extraMessage = \"\";\n            $scope.noLoaderTimer = false;\n            $scope.currentTrackAlias = null;\n            $scope.abortRequested = false;\n            yasrInnerContainer.removeClass(\"hide\");\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        let timeHuman = \"\";\n        let message = \"\";\n\n        if (!$scope.noLoaderTimer) {\n            timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        }\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + \"... \" + timeHuman;\n        } else {\n            message = \"Running operation... \" + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += \"\\n\" + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalView) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on(\"$destroy\", function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n                //window.editor.refresh();\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode() {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        LocalStorageAdapter.set(LSKeys.VIEW_MODE, $scope.orientationViewMode);\n        fixSizesOnHorizontalViewModeSwitch();\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(\":focus\")) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function deleteCachedSparqlResults(foo, params) {\n        if (params.newRepo) {\n            $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE);\n            $scope.tabsData.forEach(function (item) {\n                item.yasrData = undefined;\n                item.queryType = undefined;\n                item.resultsCount = 0;\n                item.allResultsCount = 0;\n                item.sizeDelta = undefined;\n            });\n\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n            $scope.tabs = $scope.tabsData;\n\n            // The repository is changed. Remove error messages as well, if any\n            $scope.currentQuery = {};\n            $scope.errorMessage = null;\n            $scope.repositoryError = null;\n        }\n    }\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    window.onbeforeunload = function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    };\n\n    $scope.$on('$destroy', function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n        clearInterval(checkQueryIntervalId);\n    });\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (explain) {\n            if (!(window.editor.getQueryType() === 'SELECT' || window.editor.getQueryType() === 'CONSTRUCT')) {\n                toastr.warning('Explain only works with SELECT or CONSTRUCT queries.');\n                return;\n            }\n\n            if ($repositories.isActiveRepoOntopType()) {\n                toastr.warning('Explain not supported for Virtual repositories.');\n                return;\n            }\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            $scope.lastRunQueryMode = window.editor.getQueryMode();\n\n            if ($scope.lastRunQueryMode === 'update' && $repositories.isActiveRepoOntopType()) {\n                toastr.warning('Updates are not supported for Virtual repositories.');\n                return;\n            }\n\n            setLoader(true, $scope.lastRunQueryMode === 'update' ? 'Executing update' : 'Evaluating query');\n            if ($scope.viewMode !== 'none') {\n                $scope.viewMode = 'none';\n                if ($scope.orientationViewMode) {\n                    $scope.fixSizesOnHorizontalViewModeSwitch();\n                }\n                const timer = $timeout(window.editor.query, 500);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            } else {\n                window.editor.query();\n            }\n        }\n    }\n\n    function abortCurrentQuery() {\n        MonitoringRestService.abortQueryByAlias($scope.currentTrackAlias)\n            .success(function () {\n                $scope.abortRequested = true;\n            });\n    }\n\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        $scope.namespacesLoading = true;\n\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                $scope.namespacesLoading = false;\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    $scope.$on(\"$destroy\", function () {\n        clearInterval(checkQueryIntervalId);\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n        $scope.showSampleQueries = !$scope.showSampleQueries;\n        if ($scope.showSampleQueries) {\n            SparqlRestService.getSavedQueries()\n                .success(function (data) {\n                    $scope.sampleQueries = data;\n                    $('#sampleQueriesCollapse').collapse('show').width('300px');\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error! Could not get saved queries');\n                });\n        } else {\n            $('#sampleQueriesCollapse').collapse('hide');\n        }\n    }\n\n    // Hide the sample queries when the user clicks somewhere else in the UI.\n    $(document).mouseup(function (event) {\n        const container = $('#sampleQueriesCollapse');\n        if (!container.is(event.target) // if the target of the click isn't the container..\n            && container.has(event.target).length === 0 //... nor a descendant of the container\n            && $scope.showSampleQueries) {\n            toggleSampleQueries();\n        }\n    });\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n\n        if ($scope.isTabChangeOk(false)) {\n            $scope.highlightNextTabChange = true;\n            if (!angular.isDefined(tabId)) {\n                $scope.addNewTab(null, query.name, query.body);\n            } else {\n                selectTab(tabId);\n            }\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        $scope.tabsData.forEach(function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n        return existingTabId;\n    }\n\n    function editQuery(query) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: 'Edit Saved Query: \"' + query.name + '\"',\n                        query: query,\n                        edit: true,\n                        okButtonText: 'Save'\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (queryModal) {\n            const data = {\n                name: queryModal.name,\n                body: queryModal.body,\n                shared: queryModal.shared\n            };\n            if (query.name !== queryModal.name) {\n                SparqlRestService.addNewSavedQuery(data)\n                    .success(function () {\n                        $scope.deleteQueryHttp(query.name, true);\n                    })\n                    .error(function (data) {\n                        const msg = getError(data);\n                        toastr.error(msg, 'Error! Cannot edit saved query');\n                    });\n            } else {\n                SparqlRestService.editSavedQuery(data)\n                    .success(function () {\n                        $('#editQueryContainer').modal('hide');\n                        $scope.toggleSampleQueries();\n                        toastr.success('Saved query ' + query.name + ' was edited.');\n                    })\n                    .error(function (data) {\n                        const msg = getError(data);\n                        toastr.error(msg, 'Error! Cannot edit Saved query');\n                    });\n            }\n        });\n    }\n\n    function deleteQueryHttp(savedQueryName, edit) {\n        SparqlRestService.deleteSavedQuery(savedQueryName)\n            .success(function () {\n                $scope.toggleSampleQueries();\n                if (!edit) {\n                    toastr.success('Saved query: ' + savedQueryName + ' was deleted.');\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Cannot delete saved query');\n            });\n    }\n\n    function deleteQuery(savedQueryName) {\n        ModalService.openSimpleModal({\n            title: 'Confirm',\n            message: 'Are you sure you want to delete the saved query ' + '\\'' + savedQueryName + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                $scope.deleteQueryHttp(savedQueryName);\n            });\n    }\n\n    function saveQueryHttp(query) {\n        SparqlRestService.addNewSavedQuery(query)\n            .success(function () {\n                toastr.success('Saved query ' + query.name + ' was saved.');\n            })\n            .error(function (data) {\n                let msg = getError(data);\n                toastr.error(msg, 'Error! Cannot create saved query');\n                // TODO: This condition will always be true\n                if (msg = \"Query '\" + query.name + \"' already exists!\") {\n                    query.query = query.body;\n                    const queryExists = true;\n                    $scope.saveQuery(query, queryExists);\n                }\n            });\n    }\n\n    function saveQuery(query, queryExists) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: 'Create New Saved Query',\n                        query: {name: query.name, body: query.query, shared: query.shared},\n                        edit: false,\n                        okButtonText: 'Create',\n                        queryExists: queryExists\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (query) {\n            $scope.saveQueryHttp(query);\n        }, function () {\n        });\n    }\n\n    // end of query operations\n\n    function showModal(modalSelector) {\n        return function (name, query, shared) {\n            $scope.savedQuery = {\n                name: name,\n                query: query || window.editor.getValue(),\n                shared: shared\n            };\n            $(modalSelector).modal('show');\n        };\n    }\n\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    let maxID = LocalStorageAdapter.get(LSKeys.TABS_STATE_MAXID) || 1;\n\n    function addNewTab(callback, tabName, savedQuery) { // optional callback to call after tab has been added\n        if (!isTabChangeOk(true)) {\n            return;\n        }\n        let defaultTabConfig;\n        if (tabName || savedQuery) {\n            defaultTabConfig = {\n                id: \"1\",\n                name: tabName,\n                query: savedQuery,\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        } else {\n            defaultTabConfig = {\n                id: \"1\",\n                name: '',\n                query: 'select * where { \\n' +\n                '\\t?s ?p ?o .\\n' +\n                '} limit 100 \\n',\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        }\n\n        maxID++;\n        const newID = '' + maxID;\n        $scope.tabsData = $scope.tabs;\n\n        const newTab = defaultTabConfig;\n        newTab.id = newID;\n\n        $scope.tabsData.push(newTab);\n\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_MAXID, maxID);\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n        const callbackArgs = Array.prototype.slice.call(arguments, 1); // skip one argument, i.e. the callback itself\n        $timeout(function () {\n            $scope.$apply();\n            selectTab(newID);\n            if (callback) {\n                callback.apply(this, callbackArgs);\n            }\n        }, 0);\n        $scope.tabs = $scope.tabsData;\n    }\n\n    function loadTab(id) {\n        $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        // find available tab\n        const idx = findTabIndexByID(id);\n        const tab = $scope.tabsData[idx];\n\n        if (tab.yasrData) {\n            setLoader(true, 'Rendering results', null, true);\n        }\n\n        // set query in editor available on the current tab\n        $timeout(function () {\n            if ($scope.currentQuery.query === '') {\n                $scope.currentQuery.query = \" \";\n            }\n            $timeout(function () {\n                window.editor.setValue($scope.currentQuery.query);\n                $scope.yasr.updateDownloadDropdown();\n                $scope.$broadcast('tabLoaded', $scope.currentQuery.id);\n\n                // set query results in query results sections after\n                // previous query execution. Yasr response rendering depends on the\n                // query type of window.editor!\n                $scope.yasr.options.output = tab.outputType; // this may be undefined, that's fine!\n                if (tab.yasrData) {\n                    if (tab.yasrData.customError) {\n                        // Our injected custom (not real HTTP) error\n                        $scope.yasr.results = {\n                            getException: function () {\n                                return tab.yasrData.customError;\n                            }\n                        };\n                        setLoader(false);\n                    } else {\n                        // Real YASR result\n                        $timeout(function () {\n                            $scope.setYasrResponse(tab.yasrData, tab.textStatus, tab.jqXhrOrErrorString);\n                            setLoader(false);\n                            if ($('.yasr_btnGroup li:nth-child(2)').hasClass(\"active\")) {\n                                $timeout(function () {\n                                    $('.yasr_btnGroup li:nth-child(2) a').get(0).click();\n                                }, 0);\n                            }\n                        }, 0);\n                    }\n                }\n            }, 0);\n        }, 0);\n\n\n        // persist current tab id in local storage\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_CURRENT_ID, id);\n\n        $scope.currentQuery = tab;\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.allResultsCountExact = tab.allResultsCountExact;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.currentTabConfig.customUpdateMessage = tab.customUpdateMessage;\n            $scope.currentTabConfig.errorMessage = tab.errorMessage;\n            $scope.currentTabConfig.warningMessage = tab.warningMessage;\n\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n\n        if (!checkQueryIntervalId) {\n            checkQueryIntervalId = setInterval(showOrHideSaveAsDropDown, 200);\n        }\n        overrideSameAsInferenceAndNoCountIfNeeded();\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    function showOrHideSaveAsDropDown() {\n        // If selected tab has results and query in editor controller is invalid save as\n        // dropdown menu will be removed and on fixing query latter will be added\n        if ($scope.currentTabConfig.resultsCount >= 0) {\n            const $saveAsDropDown = $('.saveAsDropDown');\n            if ($saveAsDropDown.length > 0 && !window.editor.queryValid) {\n                yasr.header.find('.saveAsDropDown').remove();\n            } else if ($saveAsDropDown.length === 0 && window.editor.queryValid) {\n                yasr.updateDownloadDropdown();\n            }\n        }\n    }\n\n    function isTabChangeOk(isNew) {\n        if ($scope.queryIsRunning && !$scope.namespacesLoading) {\n            if (isNew) {\n                toastr.info('New tabs may not be opened while query or update is running.');\n            } else {\n                toastr.info('Tabs may not be switched while query or update is running.');\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    // Raise this flag to provide visual feedback to the user the next time a tab changes\n    // (either manually or by the system). See GDB-1983.\n    $scope.highlightNextTabChange = false;\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            // Cancel any highlight timer that might have been left by the last highlight\n            $timeout.cancel(tabEvent.relatedTarget.timer);\n            $(tabEvent.relatedTarget).css('color', '');\n\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n\n        $scope.loadTab(getQueryID(tabEvent.target));\n\n        // These arrays define how the tab change will be visually enhanced.\n        // colors contains the colors to set to the tab name,\n        // while times defines the times in milliseconds to keep each color.\n        // Once we cycle through the arrays we restore the default color.\n        const colors = ['#ED4F2F', '', '#ED4F2F'];\n        const times = [400, 400, 400];\n        if ($scope.highlightNextTabChange) {\n            $scope.highlightNextTabChange = false;\n            let index = 0;\n            $(tabEvent.target).css('color', colors[index]);\n            const highlightFun = function () {\n                index++;\n                if (index < colors.length) {\n                    $(tabEvent.target).css('color', colors[index]);\n                    tabEvent.target.timer = $timeout(highlightFun, times[index]);\n                } else {\n                    $(tabEvent.target).css('color', '');\n                }\n            };\n            $timeout(highlightFun, times[index]);\n        }\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = {};\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n    $scope.editQueryModal = showModal('#editQueryContainer');\n    $scope.deleteQueryModal = showModal('#confirmDeleteContainer');\n    $scope.saveQueryModal = showModal('#saveQueryContainer');\n\n    $scope.getResultsDescription = function () {\n        let desc;\n        if ($scope.currentTabConfig.resultsCount === 0) {\n            desc = \"No results.\";\n        } else {\n            const currentPageEnd = ($scope.currentTabConfig.page - 1) * $scope.currentTabConfig.pageSize\n                + Math.min($scope.currentTabConfig.resultsCount, $scope.currentTabConfig.pageSize);\n            desc = \"Showing results from \" + $filter('currency')($scope.currentTabConfig.offset, '', 0)\n                + \" to \" + $filter('currency')(currentPageEnd, '', 0);\n            if ($scope.currentTabConfig.allResultsCount > 0) {\n                // Unsure total results count \"of at least\" happens if counting timed out or\n                // counting was disabled and we got at least $pageSize + 1 results for the current page.\n                // It may reset become exact when we navigate and reach the end of results.\n                desc += $scope.currentTabConfig.allResultsCountExact\n                    ? \" of \" : \" of at least \";\n                desc += $filter('currency')($scope.currentTabConfig.allResultsCount, '', 0);\n            }\n            desc += \".\";\n        }\n\n        return desc;\n    };\n\n    $scope.getUpdateDescription = function () {\n        if ($scope.currentTabConfig.customUpdateMessage) {\n            return $scope.currentTabConfig.customUpdateMessage;\n        } else if ($scope.currentTabConfig.sizeDelta === undefined) {\n            return '';\n        } else if ($scope.currentTabConfig.sizeDelta < 0) {\n            return 'Removed ' + Math.abs($scope.currentTabConfig.sizeDelta) + ' statements.';\n        } else if ($scope.currentTabConfig.sizeDelta > 0) {\n            return 'Added ' + $scope.currentTabConfig.sizeDelta + ' statements.';\n        } else {\n            return 'The number of statements did not change.';\n        }\n    };\n\n    $scope.getStaleWarningMessage = function () {\n        const secondsAgo = Math.round((Date.now() - $scope.currentTabConfig.timeFinished) / 60000) * 60;\n        if (secondsAgo >= 3600) { // must be at least an hour\n            return \"Possibly stale result (obtained \" + $scope.getHumanReadableSeconds(secondsAgo) + \" ago).\";\n        }\n    };\n\n    const resize = function () {\n        // $scope.fixSizesOnHorizontalViewModeSwitch();\n    };\n\n    angular.element($window).bind('resize', resize);\n\n    $scope.$on('$destroy', function () {\n        angular.element($window).unbind('resize', resize);\n    });\n\n    /**\n     * In case of Ontop repository, sameAs, inference and nocount are\n     * overridden to true and #sameAs and #inference buttons is disabled, In case of FedX repo nocount is overriden\n     */\n    function overrideSameAsInferenceAndNoCountIfNeeded() {\n        const isOntop = $repositories.isActiveRepoOntopType();\n        const isFedX = $repositories.isActiveRepoFedXType();\n        handleSameAsAndInferenceBtns(isOntop);\n\n        $scope.nocount = (isOntop || isFedX) ? true : !principal.appSettings.EXECUTE_COUNT;\n        $scope.currentQuery.inference = isOntop ? true : principal.appSettings.DEFAULT_INFERENCE;\n        $scope.currentQuery.sameAs = isOntop ? true : principal.appSettings.DEFAULT_SAMEAS;\n    }\n\n    function handleSameAsAndInferenceBtns(isOntop) {\n        const sameAsBtn = document.getElementById('sameAs');\n        const inferenceBtn = document.getElementById('inference');\n\n        sameAsBtn.disabled = !!(sameAsBtn && isOntop);\n        inferenceBtn.disabled = !!(inferenceBtn && isOntop);\n    }\n}\n\nQuerySampleModalCtrl.$inject = ['$scope', '$modalInstance', 'data'];\n\nfunction QuerySampleModalCtrl($scope, $modalInstance, data) {\n    if (data.queryExists) {\n        $scope.queryExists = true;\n    }\n    $scope.query = angular.copy(data.query);\n    $scope.title = data.title;\n    $scope.edit = data.edit;\n    $scope.okButtonText = data.okButtonText;\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            $modalInstance.close($scope.query);\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n"],"sourceRoot":""}