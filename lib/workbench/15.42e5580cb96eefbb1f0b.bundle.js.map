{"version":3,"sources":["webpack:///./src/js/angular/sparql-template/app.js","webpack:///./src/js/angular/rest/connectors.rest.service.js","webpack:///./src/js/angular/utils/uri-utils.js","webpack:///./src/js/angular/utils/notifications.js","webpack:///./src/js/angular/externalsync/controllers.js","webpack:///./src/js/angular/core/directives/queryeditor/query-editor.controller.js","webpack:///./src/js/angular/core/directives/queryeditor/query-editor.directive.js","webpack:///./src/js/angular/core/directives/queryeditor/sparql-tab.directive.js","webpack:///./src/js/angular/rest/sparql-templates.rest.service.js","webpack:///./src/js/angular/sparql-template/controllers.js"],"names":["angular","module","factory","ConnectorsRestService","$inject","CONNECTORS_ENDPOINT","$http","getConnectors","get","initConnector","prefix","hasConnector","checkConnector","data","post","headers","iriRegExp","isValidIri","iri","undefined","match","validateRdfUri","value","hasAngleBrackets","indexOf","noAngleBrackets","lastIndexOf","validProtocol","test","validPath","schemaSlashesIdx","substring","length","RegExp","e","Notifications","toastr","showToastMessageWithDelay","message","Promise","r","success","setTimeout","jsonToFormData","str","Object","keys","forEach","key","push","encodeURIComponent","join","mapCreateValuesToUiValues","values","options","i","option","__type","__name","j","__childOptions","child","k","valueK","hasOwnProperty","isDefined","__defaultValue","optionEl","isUndefined","map","_","toJson","_evaluateSparqlQuery","http","repository","query","buildNamePrefix","createConnectorQuery","name","fields","reportError","fcopy","sortObject","obj","newObject","each","childOption","copy","arrayMap","reduce","acc","Error","fromJson","__label","removeEmptyValues","Array","isArray","filter","item","trim","finalString","replace","ConnectorsCtrl","$scope","$repositories","$modal","ModalService","$q","RDF4JRepositoriesRestService","resetProgress","repair","beingBuiltConnector","percentDone","status","processedEntities","estimatedEntities","indexedEntities","entitiesPerSecond","actionName","waitOnRepairStartOnce","eta","inline","openProgressModal","$","extend","doneCallback","modalInstance","dismiss","open","templateUrl","controller","size","backdrop","scope","executeCreate","connector","errorCallback","modal","addStatements","getActiveRepository","update","then","res","existing","err","error","getError","finally","loader","controllers","definitions","getLoaderMessage","timeSeconds","Date","now","loaderStartTime","timeHuman","getHumanReadableSeconds","progressMessage","extraMessage","setLoader","isRunning","canWriteActiveRepo","connectors","all","connectorIris","createStatusQueryForAny","evaluateSparqlQuery","results","bindings","statusObject","JSON","parse","console","parseFirstBuildingResult","d","split","catch","getOptions","isEmpty","isObject","toPrettyJson","$watch","getActiveLocation","copyConnector","newValues","resolve","result","skipConversion","newConnector","inst","type","openSimpleModal","title","warning","delete","isExternal","force","namePrefix","deleteConnectorQuery","viewQuery","DeleteConnectorCtrl","$modalInstance","ok","close","cancel","ExtendNewConnectorCtrl","toQuery","label","addField","index","optionName","newField","defaultValues","splice","addOption","array","deleteOption","addMapOption","deleteMapOption","form","$valid","CreateConnectorCtrl","$controller","this","CreateProgressCtrl","$interval","initProgress","statusIri","createStatusQueryForIri","progressInterval","getFirstStatusFromResult","toFixed","etaSeconds","$on","input","Math","ceil","QueryEditorCtrl","$timeout","SparqlRestService","$filter","$window","$jwtAuth","MonitoringRestService","LocalStorageAdapter","LSKeys","defaultTabConfig","id","inference","sameAs","checkQueryIntervalId","principal","getPrincipal","initTabs","appSettings","DEFAULT_INFERENCE","DEFAULT_SAMEAS","skipCountQuery","EXECUTE_COUNT","ignoreSharedQueries","IGNORE_SHARED_QUERIES","tabsData","tabs","TABS_STATE","$watchCollection","newVal","oldVal","saveQueryToLocal","currentQuery","deleteCachedSparqlResults","currentQueryTab","tab","set","noTimer","yasrInnerContainer","element","document","getElementById","queryIsRunning","queryStartTime","countTimeouted","noLoaderTimer","addClass","currentTrackAlias","abortRequested","removeClass","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalView","visibleWindowHeight","window","innerHeight","documentElement","clientHeight","body","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","editor","timer","yasr","container","resize","showHideEditor","foo","params","newRepo","yasrData","queryType","resultsCount","allResultsCount","sizeDelta","errorMessage","repositoryError","selectTab","runQuery","changePage","explain","executedQueryTab","getQueryType","isActiveRepoOntopType","explainRequested","currentTabConfig","resetCurrentTabConfig","lastRunQueryMode","getQueryMode","toggleSampleQueries","showSampleQueries","getSavedQueries","sampleQueries","collapse","width","msg","getExistingTabId","existingTabId","showModal","modalSelector","shared","savedQuery","getValue","findTabIndexByID","currentScope","hint","createElement","innerHTML","fontSize","color","backgroundColor","position","zIndex","newValue","elRect","appendChild","top","left","right","offsetWidth","parentNode","removeChild","pageSize","page","queryExists","saveTab","idx","loadTab","setValue","updateDownloadDropdown","$broadcast","output","outputType","customError","getException","setYasrResponse","textStatus","jqXhrOrErrorString","hasClass","click","TABS_STATE_CURRENT_ID","offset","allResultsCountExact","timeFinished","timeTook","customUpdateMessage","warningMessage","css","setInterval","showOrHideSaveAsDropDown","isOntop","isFedX","isActiveRepoFedXType","sameAsBtn","inferenceBtn","disabled","handleSameAsAndInferenceBtns","nocount","overrideSameAsInferenceAndNoCountIfNeeded","addNewTab","callback","tabName","isTabChangeOk","maxID","newID","newTab","TABS_STATE_MAXID","callbackArgs","prototype","slice","call","arguments","apply","abortCurrentQuery","abortQueryByAlias","editQuery","edit","okButtonText","queryModal","addNewSavedQuery","deleteQueryHttp","editSavedQuery","getNamespaces","namespacesLoading","getRepositoryNamespaces","usedPrefixes","namespace","namespaces","changePagination","addKnownPrefixes","stringify","querySelected","tabId","highlightNextTabChange","deleteQuery","savedQueryName","deleteSavedQuery","saveQuery","saveQueryHttp","changeViewMode","VIEW_MODE","focusQueryEditor","find","is","focus","getActiveRepositoryNoError","onbeforeunload","clearInterval","mouseup","event","target","has","getQueryID","attr","$saveAsDropDown","queryValid","header","remove","isNew","info","tabEvent","relatedTarget","colors","times","highlightFun","editQueryModal","deleteQueryModal","saveQueryModal","getResultsDescription","desc","currentPageEnd","min","getUpdateDescription","abs","getStaleWarningMessage","secondsAgo","round","bind","unbind","QuerySampleModalCtrl","queryEditorDirective","$location","callbackOnChange","restrict","link","attrs","nostorage","notabs","notoolbar","notoolbarSaved","notoolbarCopy","notoolbarInference","notoolbarSameAs","nostatus","norun","runButtonName","saveQueryAction","runQueryAction","explainQueryAction","goToNextTabAction","goToPreviousTabAction","requestedTab","first","fromTextArea","persistent","indentUnit","createShareLink","cursorHeight","sparql","showQueryButton","acceptHeaderGraph","acceptHeaderSelect","extraKeys","toastBuildIndex","allowHtml","toastError","on","clearTimeout","changesTimeout","hasError","toggleClass","hide","afterCopy","blur","originalExecuteQuery","executeQuery","originalGetUrlArguments","getUrlArguments","createCustomError","statusText","responseText","connectorProgressModal","drawButtons","yasqe","buttons","config","qType","cm","resultsContainer","empty","performance","endpoint","args","thisTabConfig","thisTabId","handlers","countCallback","dataOrJqXhr","setResultsCount","allCount","getTime","setQueryLimit","getValueWithoutComments","doExecute","getRepositorySize","repoSize","parseInt","command","hasSupport","connectorName","pluginName","setNewTabState","progressScope","$new","originalGetAjaxConfig","getAjaxConfig","getResponseHeader","contentType","response","executedQueryTabIdx","queryResultState","toBoolean","v","loadQueryIntoExistingOrNewTab","infer","onHandler","search","execute","addTabWithQueryIfNeeded","owner","getSavedQuery","updateRepositoryAndSecurity","signal","getAuthToken","callbackOrConfig","copyToClipboardQuery","openCopyToClipboardModal","url","location","protocol","host","pathname","param","createQueryURL","copyToClipboardResult","resultURI","goToVisual","paramsToParse","path","getUsedPrefixes","persistency","getQueryResultsAsFormat","downloadFormat","$wbDownload","val","auth","localStorage","getItem","submit","complete","setNewTabStateForThis","updateResultsCallback","repoSizeDiff","Number","responseJSON","max","resetResults","setResponse","drawQueryEditor","directive","sparqlTabDirective","$rootScope","template","$element","state","deleteTab","preventDefault","stopPropagation","shiftKey","selectedTabId","idForDelete","deleteTabByID","editCurrentTab","editCurrentlySelectedOnly","$show","$editableButtons","children","$el","currentTarget","$$currentValue","selectThisTab","SparqlTemplatesRestService","SPARQL_TEMPLATES_ENDPOINT","getSparqlTemplates","getSparqlTemplate","templateID","createSparqlTemplate","updateSparqlTemplate","put","deleteSparqlTemplate","SparqlTemplatesCtrl","sparqlTemplateIds","deleteTemplate","SparqlTemplateCreateCtrl","UriUtils","hash","templateExist","oldValue","goBack","history","back","locationChangeListener","isPristine","confirm","removeEventListener","showBeforeunloadMessage","confirmExit","returnValue","addEventListener","isNewTemplate","readOnly","setQueryFromTabConfig","setQuery","setDirty","saveNewTemplate","templateContent","saveTemplate","validateQuery","isInvalidTemplateId","templateId","modalMsg"],"mappings":"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","file":"15.42e5580cb96eefbb1f0b.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/resources/controllers';\nimport 'angular/core/services/repositories.service';\nimport 'angular/sparql-template/controllers';\nimport 'angular/rest/sparql-templates.rest.service';\nimport 'angular/core/directives/queryeditor/sparql-tab.directive';\nimport 'angular/core/directives/queryeditor/query-editor.controller';\nimport 'angular/core/directives/queryeditor/query-editor.directive';\nimport 'angular/utils/uri-utils';\n\nconst modules = [\n    'toastr',\n    'ui.bootstrap',\n    'graphdb.framework.sparql-template.controllers',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.core.directives',\n    'graphdb.framework.rest.sparql-templates.service',\n    'graphdb.framework.core.directives.queryeditor.controllers',\n    'graphdb.framework.core.directives.queryeditor.sparqltab',\n    'graphdb.framework.core.directives.queryeditor.queryeditor',\n    'graphdb.framework.utils.uriutils'\n];\n\nangular.module('graphdb.framework.sparql-template', modules);\n\n","angular\n    .module('graphdb.framework.rest.connectors.service', [])\n    .factory('ConnectorsRestService', ConnectorsRestService);\n\nConnectorsRestService.$inject = ['$http'];\n\nconst CONNECTORS_ENDPOINT = 'rest/connectors';\n\nfunction ConnectorsRestService($http) {\n\n    return {\n        getConnectors,\n        initConnector,\n        hasConnector,\n        checkConnector\n    };\n\n    function getConnectors() {\n        return $http.get(CONNECTORS_ENDPOINT);\n    }\n\n    function initConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/options?prefix=${prefix}`);\n    }\n\n    function hasConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/existing?prefix=${prefix}`);\n    }\n\n    function checkConnector(data) {\n        return $http.post(`${CONNECTORS_ENDPOINT}/check`, data, {\n            headers: {\n                'Content-Type': 'text/plain'\n            }\n        });\n    }\n}\n","angular\n    .module('graphdb.framework.utils.uriutils', [])\n    .factory('UriUtils', UriUtils);\n\nlet iriRegExp;\ntry {\n    // Real validation but it requires a relatively new browser\n    iriRegExp = new RegExp(\"^[a-z](?:[-a-z0-9\\\\+\\\\.])*:(?:\\\\/\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:])*@)?(?:\\\\[(?:(?:(?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:[0-9a-f]{1,4}:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3})|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|v[0-9a-f]+[-a-z0-9\\\\._~!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:]+)\\\\]|(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(?:\\\\.(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}|(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=@])*)(?::[0-9]*)?(?:\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))*)*|\\\\/(?:(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))+)(?:\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))*)*)?|(?:(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))+)(?:\\\\/(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@]))*)*|(?!(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@])))(?:\\\\?(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@])|[\\\\u{E000}-\\\\u{F8FF}\\\\u{F0000}-\\\\u{FFFFD}\\\\u{100000}-\\\\u{10FFFD}\\\\/\\\\?])*)?(?:#(?:(?:%[0-9a-f][0-9a-f]|[-a-z0-9\\\\._~\\\\u{A0}-\\\\u{D7FF}\\\\u{F900}-\\\\u{FDCF}\\\\u{FDF0}-\\\\u{FFEF}\\\\u{10000}-\\\\u{1FFFD}\\\\u{20000}-\\\\u{2FFFD}\\\\u{30000}-\\\\u{3FFFD}\\\\u{40000}-\\\\u{4FFFD}\\\\u{50000}-\\\\u{5FFFD}\\\\u{60000}-\\\\u{6FFFD}\\\\u{70000}-\\\\u{7FFFD}\\\\u{80000}-\\\\u{8FFFD}\\\\u{90000}-\\\\u{9FFFD}\\\\u{A0000}-\\\\u{AFFFD}\\\\u{B0000}-\\\\u{BFFFD}\\\\u{C0000}-\\\\u{CFFFD}\\\\u{D0000}-\\\\u{DFFFD}\\\\u{E1000}-\\\\u{EFFFD}!\\\\$&'\\\\(\\\\)\\\\*\\\\+,;=:@])|[\\\\/\\\\?])*)?$\", \"ui\");\n} catch (e) {\n    // Fallback to simple validation, works in all browsers\n    iriRegExp = new RegExp(\"^[a-z](?:[-a-z0-9\\\\+\\\\.])*:\", \"i\");\n}\n\nfunction UriUtils() {\n    function validateRdfUri(value) {\n        const hasAngleBrackets = value.indexOf(\"<\") >= 0 && value.indexOf(\">\") >= 0;\n        const noAngleBrackets = value.indexOf(\"<\") === -1 && value.lastIndexOf(\">\") === -1;\n        const validProtocol = /^<?(http|urn).*>?/.test(value) && (hasAngleBrackets || noAngleBrackets);\n        let validPath = false;\n        if (validProtocol) {\n            if (value.indexOf(\"http\") >= 0) {\n                const schemaSlashesIdx = value.indexOf('//');\n                validPath = schemaSlashesIdx > 4\n                    && value.substring(schemaSlashesIdx + 2).length > 0;\n            } else if (value.indexOf(\"urn\") >= 0) {\n                validPath = value.substring(4).length > 0;\n            }\n        }\n        return validProtocol && validPath;\n    }\n\n    function isValidIri(iri) {\n        return iri !== undefined && !!iri.match(iriRegExp);\n    }\n\n    return {\n        isValidIri: isValidIri,\n        validateRdfUri: validateRdfUri\n    };\n}\n","angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr'];\n\nfunction Notifications(toastr) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success(message);\n            setTimeout(r, 200);\n        });\n    }\n}\n","import 'angular/rest/rdf4j.repositories.rest.service';\nimport 'angular/rest/connectors.rest.service';\n\nconst modules = [\n    'graphdb.framework.rest.rdf4j.repositories.service',\n    'graphdb.framework.rest.connectors.service'\n];\n\nangular\n    .module('graphdb.framework.externalsync.controllers', modules)\n    .controller('ConnectorsCtrl', ConnectorsCtrl)\n    .controller('ExtendNewConnectorCtrl', ExtendNewConnectorCtrl)\n    .controller('CreateConnectorCtrl', CreateConnectorCtrl)\n    .controller('CreateProgressCtrl', CreateProgressCtrl)\n    .controller('DeleteConnectorCtrl', DeleteConnectorCtrl)\n    .filter('ceil', ceil);\n\nfunction jsonToFormData(data) {\n    const str = [];\n    Object.keys(data).forEach(function (key) {\n        str.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    });\n    return str.join('&');\n}\n\nfunction toArrayMap(map) {\n    return _.map(map, function (value, key) {\n        return {key: key, value: value};\n    });\n}\n\nfunction fromArrayMap(arrayMap) {\n    return _.reduce(arrayMap, function (acc, value) {\n        if (value.key === '' && value.value === '') {\n            // empty pair, skip it\n        } else if (value.key === '') {\n            throw new Error('Key may not be empty with value \"' + value.value + '\"');\n        } else if (acc.hasOwnProperty(value.key)) {\n            throw new Error('Duplicate key ' + value.key);\n        } else {\n            acc[value.key] = value.value;\n        }\n        return acc;\n    }, {});\n}\n\nfunction mapCreateValuesToUiValues(values, options) {\n    for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        if (option.__type === 'StringArray') {\n            if (!values[option.__name]) {\n                values[option.__name] = [''];\n            }\n        } else if (option.__type === 'OptionArray') {\n            if (!values[option.__name]) { // values has no entry for this option\n                values[option.__name] = [];\n                const optionEl = {};\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'StringArray') {\n                        optionEl[child.__name] = [''];\n                    } else {\n                        optionEl[child.__name] = (!angular.isUndefined(child.__defaultValue) ? child.__defaultValue : '');\n                    }\n                }\n                values[option.__name].push(optionEl);\n            } else { // values already has en entry for this option\n                // Copies the default value for Boolean child options if no explicit value is set\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'Boolean') {\n                        for (let k = 0; k < values[option.__name].length; k++) {\n                            const valueK = values[option.__name][k];\n                            if (!valueK.hasOwnProperty([child.__name]) && angular.isDefined(child.__defaultValue)) {\n                                valueK[child.__name] = child.__defaultValue;\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (option.__type === 'Map') {\n            if (!values[option.__name]) {\n                values[option.__name] = [];\n            } else {\n                values[option.__name] = toArrayMap(values[option.__name]);\n            }\n        } else if (option.__type === 'JsonString') {\n            if (values[option.__name]) {\n                values[option.__name] = angular.toJson(values[option.__name], 2);\n            }\n        } else {\n            if (angular.isUndefined(values[option.__name])) {\n                values[option.__name] = (!angular.isUndefined(option.__defaultValue) ? option.__defaultValue : '');\n            }\n        }\n    }\n\n    return values;\n}\n\nfunction _evaluateSparqlQuery(http, repository, query) {\n    return http.post('repositories/' + repository, jsonToFormData({query: query}),\n        {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/sparql-results+json',\n                'X-GraphDB-Local-Consistency': 'updating'\n            }\n        });\n}\n\nfunction buildNamePrefix(prefix) {\n    return prefix.substring(0, prefix.length - 1) + '/instance#';\n}\n\nfunction createConnectorQuery(name, prefix, fields, options, reportError) {\n    // Returns a copy of the parameter obj sorted according to the order in options\n    function sortObject(obj, options) {\n        const newObject = {};\n        _.each(options, function (option) {\n            if (angular.isDefined(obj[option.__name])) {\n                if (option.__type === 'OptionArray') {\n                    newObject[option.__name] = [];\n                    _.each(obj[option.__name], function (childOption) {\n                        newObject[option.__name].push(sortObject(childOption, option.__childOptions));\n                    });\n                } else {\n                    newObject[option.__name] = angular.copy(obj[option.__name]);\n                }\n            }\n        });\n        return newObject;\n    }\n\n    const fcopy = sortObject(fields, options);\n\n    for (let i = 0; i < options.length; i++) {\n        try {\n            if (options[i].__type === 'Map') {\n                fcopy[options[i].__name] = fromArrayMap(fcopy[options[i].__name]);\n            } else if (options[i].__type === 'JsonString') {\n                fcopy[options[i].__name] = angular.fromJson(fcopy[options[i].__name]);\n            }\n        } catch (e) {\n            reportError(options[i].__label, e.message);\n            return null;\n        }\n    }\n\n    removeEmptyValues(fcopy);\n    //escapeValues(fields);\n    let finalString = '';\n    finalString += 'PREFIX :<' + prefix + '>\\n';\n    const namePrefix = buildNamePrefix(prefix);\n    finalString += 'PREFIX inst:<' + namePrefix + '>\\n';\n    finalString += 'INSERT DATA {\\n';\n    finalString += \"\\tinst:\" + name + \" :createConnector '''\\n\"; // eslint-disable-line quotes\n    finalString += angular.toJson(fcopy, 2);\n    finalString += \"\\n''' .\\n}\\n\"; // eslint-disable-line quotes\n    finalString = finalString.replace(/\\\\/g, '\\\\\\\\\\\\');\n    return finalString;\n}\n\nfunction createStatusQueryForIri(iri) {\n    const statusIri = iri.replace(/\\/instance#.+$/, '#connectorStatus');\n    let finalString = '';\n    finalString += 'SELECT ?status {\\n';\n    finalString += '\\t<' + iri + '> <' + statusIri + '> ?status';\n    finalString += '\\n}';\n    return finalString;\n}\n\nfunction createStatusQueryForAny(connectors) {\n    const connectorIris = _.map(connectors,\n        function (k) {\n            return '<' + k.value + 'connectorStatus' + '>';\n        }).join('|');\n\n    if (connectorIris) {\n        return 'SELECT ?connector ?status { ?connector ' + connectorIris + ' ?status }';\n    }\n\n    return null;\n}\n\nfunction repairConnectorQuery(name, prefix) {\n    const namePrefix = buildNamePrefix(prefix);\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:repairConnector \"\"\\n' +\n        '}';\n}\n\nfunction deleteConnectorQuery(name, prefix, force) {\n    const namePrefix = prefix.substring(0, prefix.length - 1) + \"/instance#\";\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:dropConnector \"' + (force ? \"force\" : \"\") + '\"\\n' +\n        '}';\n}\n\nfunction removeEmptyValues(data) {\n    // remove empty values from array\n    if (Array.isArray(data)) {\n        data = _.filter(data, function (item) {\n            return item !== null && (!item.trim || item.trim() !== '');\n        });\n    }\n    // remove empty values from object values\n    Object.keys(data).forEach(function (key) {\n        if ((data[key] === '' || data[key] == null) && data[key] !== false) {\n            delete data[key];\n        } else if (typeof data[key] === 'object') {\n            data[key] = removeEmptyValues(data[key]);\n        }\n    });\n    return data;\n}\n\nfunction parseFirstBuildingResult(results) {\n    if (results.bindings) {\n        for (let i = 0; i < results.bindings.length; i++) {\n            try {\n                const statusObject = JSON.parse(results.bindings[i].status.value);\n                if (statusObject.status === 'BUILDING') {\n                    return {\n                        connector: results.bindings[i].connector.value,\n                        status: statusObject\n                    };\n                }\n            } catch (e) {\n                console.error(e); // eslint-disable-line no-console\n            }\n        }\n    }\n\n    return {};\n}\n\nConnectorsCtrl.$inject = ['$scope', '$http', '$repositories', '$modal', 'toastr', 'ModalService', '$q', 'RDF4JRepositoriesRestService', 'ConnectorsRestService'];\n\nfunction ConnectorsCtrl($scope, $http, $repositories, $modal, toastr, ModalService, $q, RDF4JRepositoriesRestService, ConnectorsRestService) {\n    $scope.loader = false;\n\n    $scope.controllers = [];\n\n    $scope.existing = {};\n\n    $scope.definitions = {};\n\n    $scope.getLoaderMessage = function () {\n        const timeSeconds = (Date.now() - $scope.loaderStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = 'Running operation...' + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    };\n\n    $scope.setLoader = function (isRunning, progressMessage, extraMessage) {\n        if (isRunning) {\n            $scope.loader = true;\n            $scope.loaderStartTime = Date.now();\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n        } else {\n            $scope.loader = false;\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n        }\n    };\n\n    $scope.initConnector = function (connector) {\n        return ConnectorsRestService.initConnector(encodeURIComponent(connector.value))\n            .then(function (res) {\n                $scope.definitions[connector.key] = res.data;\n\n                return ConnectorsRestService.hasConnector(encodeURIComponent(connector.value))\n                    .then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n\n                    });\n            });\n    };\n\n    $scope.getConnectors = function () {\n        if (!$scope.canWriteActiveRepo()) {\n            return;\n        }\n\n        $scope.setLoader(true, 'Fetching connectors', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n\n        ConnectorsRestService.getConnectors()\n            .then(function (res) {\n                $scope.connectors = Object.keys(res.data).map(function (key) {\n                    return {key: key, value: res.data[key]};\n                });\n\n                $q.all(_.map($scope.connectors, function (connector) {\n                    return $scope.initConnector(connector);\n                })).finally(function () {\n                    resetProgress();\n\n                    const query = createStatusQueryForAny($scope.connectors);\n\n                    if (query) {\n                        evaluateSparqlQuery(query)\n                            .then(function (res) {\n                                const status = parseFirstBuildingResult(res.data.results);\n                                if (status.connector) {\n                                    // has a building connector, open progress indicator\n                                    const d = status.connector.split(/#/);\n                                    d[0] = d[0].replace(/\\/instance$/, '#');\n                                    showProgress(d[0], d[1]);\n                                }\n                            })\n                            .finally(function () {\n                                $scope.setLoader(false);\n                            });\n                    } else {\n                        $scope.setLoader(false);\n                    }\n                });\n            }).catch(function (e) {\n                $scope.setLoader(false);\n                toastr.error(getError(e), 'Could not get connectors');\n            });\n\n        $scope.existing = {};\n    };\n\n    $scope.getOptions = function (connector) {\n        return $scope.definitions[connector.key];\n    };\n\n    $scope.isEmpty = function (value) {\n        return angular.isObject(value) && Object.keys(value).length === 0;\n    };\n\n    $scope.toPrettyJson = function (value) {\n        return angular.toJson(value, 2);\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, $scope.getConnectors);\n\n    $scope.$watch(function () {\n        return $repositories.getActiveLocation();\n    }, $scope.getConnectors);\n\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function resetProgress(repair) {\n        $scope.beingBuiltConnector = {\n            percentDone: 0,\n            status: {\n                processedEntities: 0,\n                estimatedEntities: 0,\n                indexedEntities: 0,\n                entitiesPerSecond: 0\n            },\n            actionName: repair ? 'Repairing' : 'Creating',\n            waitOnRepairStartOnce: !!repair,\n            eta: '-',\n            inline: false,\n            iri: null\n        };\n    }\n\n    function openProgressModal(prefix, name, repair) {\n        resetProgress(repair);\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: false,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.modalInstance.dismiss('cancel');\n            }\n        });\n\n        $scope.beingBuiltConnector.modalInstance = $modal.open({\n            templateUrl: 'pages/connectorProgress.html',\n            controller: 'CreateProgressCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            scope: $scope\n        });\n\n        return $scope.beingBuiltConnector.modalInstance;\n    }\n\n    function showProgress(prefix, name) {\n        resetProgress();\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: true,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.inline = false;\n            }\n        });\n    }\n\n    function executeCreate(connector, obj, errorCallback) {\n        const modal = openProgressModal(connector.value, obj.name, false);\n        RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: obj.query}))\n            .then(function () {\n                ConnectorsRestService.getConnectors().then(function () {\n                    ConnectorsRestService.hasConnector(encodeURIComponent(connector.value)).then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n                    });\n                });\n                toastr.success('Created connector ' + obj.name);\n            }, function (err) {\n                toastr.error(getError(err));\n                errorCallback();\n            }).finally(function () {\n                modal.dismiss('cancel');\n            });\n    }\n\n    $scope.copyConnector = function (connector, values) {\n        let newValues;\n        if (!angular.isUndefined(values)) {\n            newValues = angular.copy(values);\n            newValues.name = newValues.name + '-copy';\n        }\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(newValues) ? {name: '', values: {}} : newValues;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.newConnector = function (connector, values) {\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(values) ? {name: '', values: {}} : values;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.repair = function (inst, type) {\n        ModalService.openSimpleModal({\n            title: 'Confirm repair',\n            message: 'Are you sure you want to repair this connector?<br>Note that repair means delete + recreate with the same settings.',\n            warning: true\n        }).result\n            .then(function () {\n                const modal = openProgressModal(type.value, inst.name, true);\n\n                const query = repairConnectorQuery(inst.name, type.value);\n\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        toastr.success('Repaired connector ' + inst.name);\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function () {\n                        modal.dismiss('cancel');\n                    });\n            });\n    };\n\n    $scope.delete = function (inst, type) {\n        const isExternal = type.key.indexOf(\"Elastic\") >= 0 || type.key.indexOf(\"Solr\") >= 0;\n\n        $modal.open({\n            templateUrl: 'js/angular/externalsync/templates/deleteConnector.html',\n            controller: 'DeleteConnectorCtrl',\n            resolve: {\n                type: function () {\n                    return type.key;\n                },\n                isExternal: function () {\n                    return isExternal;\n                }\n            }\n        }).result\n            .then(function(force) {\n                $scope.setLoader(true, 'Deleting connector ' + inst.name, 'This is usually a fast operation but it might take a while.');\n\n                const query = deleteConnectorQuery(inst.name, type.value, force);\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        if (force) {\n                            toastr.success(\"Deleted (with force) connector \" + inst.name);\n                            if (isExternal) {\n                                toastr.warning(\"You may have to remove the index manually from \" + type.key);\n                            }\n                        } else {\n                            toastr.success(\"Deleted connector \" + inst.name);\n                        }\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function() {\n                        $scope.setLoader(false);\n                    });\n            });\n    };\n\n    $scope.viewQuery = function (connector, inst) {\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    const options = $scope.getOptions(connector);\n                    return createConnectorQuery(inst.name, connector.value,\n                        mapCreateValuesToUiValues(inst.values, options), options);\n                }\n            }\n        });\n    };\n}\n\nDeleteConnectorCtrl.$inject = ['$scope', '$modalInstance', 'type', 'isExternal'];\nfunction DeleteConnectorCtrl($scope, $modalInstance, type, isExternal) {\n    $scope.force = false;\n    $scope.type = type;\n    $scope.isExternal = isExternal;\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.force);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n}\n\nExtendNewConnectorCtrl.$inject = ['$scope', '$modalInstance', 'connector', '$modal', 'toastr'];\nfunction ExtendNewConnectorCtrl($scope, $modalInstance, connector, $modal, toastr) {\n\n    $scope.connector = connector;\n\n    $scope.addField = function (index, optionName) {\n        const newField = angular.copy($scope.defaultValues[optionName][0]);\n        $scope.values[optionName].splice(index + 1, 0, newField);\n    };\n\n    $scope.addOption = function (index, array) {\n        array.splice(index + 1, 0, '');\n    };\n\n    $scope.deleteOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    $scope.addMapOption = function (index, array) {\n        array.splice(index + 1, 0, {key: '', value: ''});\n    };\n\n    $scope.deleteMapOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    function toQuery() {\n        return createConnectorQuery($scope.name, connector.value, $scope.values, $scope.options,\n            function (label, error) {\n                toastr.error(error, label);\n            });\n    }\n\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            const query = toQuery();\n\n            if (query) {\n                $modalInstance.close({name: $scope.name, values: $scope.values, options: $scope.options, query: query});\n            }\n        }\n    };\n\n    $scope.viewQuery = function () {\n        const query = toQuery();\n\n        if (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nCreateConnectorCtrl.$inject = ['$scope', '$controller', '$http', '$modalInstance', 'connector', '$modal', 'values', 'options'];\n\nfunction CreateConnectorCtrl($scope, $controller, $http, $modalInstance, connector, $modal, values, options) {\n    angular.extend(this, $controller('ExtendNewConnectorCtrl', {\n        $scope: $scope,\n        $modalInstance: $modalInstance,\n        connector: connector,\n        $modal: $modal\n    }));\n    $scope.values = values.values;\n    $scope.options = options;\n    $scope.name = values.name;\n    if (!values.skipConversion) {\n        $scope.values = mapCreateValuesToUiValues($scope.values, $scope.options);\n    }\n    $scope.defaultValues = angular.copy($scope.values);\n}\n\n// Note that this is a fancy controller: it's used both for a modal and for a directive.\n// This means you can't rely on custom injection through resolve in the modal and the scope\n// must be shared with the main connectors controller.\nCreateProgressCtrl.$inject = ['$scope', '$interval', '$http', '$repositories'];\n\nfunction CreateProgressCtrl($scope, $interval, $http, $repositories) {\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function initProgress() {\n        const query = createStatusQueryForIri($scope.beingBuiltConnector.iri);\n\n        // reset iri value so that watch will fire again when we do something with the same connector\n        $scope.beingBuiltConnector.iri = null;\n\n        $scope.progressInterval = $interval(function () {\n            function getFirstStatusFromResult(results) {\n                if (results.bindings) {\n                    if (results.bindings.length > 0) {\n                        try {\n                            return JSON.parse(results.bindings[0].status.value);\n                        } catch (e) {\n                            console.error(e); // eslint-disable-line no-console\n                        }\n                    }\n                }\n\n                return {};\n            }\n\n            evaluateSparqlQuery(query)\n                .then(function (res) {\n                    const status = getFirstStatusFromResult(res.data.results);\n                    if (status.status === 'BUILDING') {\n                        $scope.beingBuiltConnector.status = status;\n                        $scope.beingBuiltConnector.percentDone = (100 * status.processedEntities / status.estimatedEntities).toFixed(0);\n                        $scope.beingBuiltConnector.eta = $scope.getHumanReadableSeconds(status.etaSeconds);\n                        $scope.beingBuiltConnector.actionName = status.repair ? 'Repairing' : 'Creating';\n                        $scope.beingBuiltConnector.waitOnRepairStartOnce = false;\n                    } else if (status.status === 'BUILT' && !$scope.beingBuiltConnector.waitOnRepairStartOnce) {\n                        // done\n                        $interval.cancel($scope.progressInterval);\n                        if ($scope.beingBuiltConnector.doneCallback) {\n                            $scope.beingBuiltConnector.doneCallback();\n                        }\n                    }\n                });\n        }, 1000);\n\n        $scope.$on('$destroy', function () {\n            $interval.cancel($scope.progressInterval);\n        });\n    }\n\n    $scope.beingBuiltConnector = $scope.beingBuiltConnector || {};\n\n    // for modal instance we get the iri before hand and can start progress now\n    if (!$scope.beingBuiltConnector.inline && $scope.beingBuiltConnector.iri) {\n        initProgress();\n    }\n\n    // for inline progress we need to watch for the iri value\n    $scope.$watch('beingBuiltConnector.iri', function (value) {\n        if ($scope.beingBuiltConnector.inline && value) {\n            initProgress();\n        }\n    });\n}\n\nfunction ceil() {\n    return function (input) {\n        return Math.ceil(input);\n    };\n}\n","import 'angular/utils/local-storage-adapter';\nimport 'angular/rest/sparql.rest.service';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.controllers', [\n        'graphdb.framework.utils.localstorageadapter',\n        'graphdb.framework.rest.sparql.service'\n    ])\n    .controller('QueryEditorCtrl', QueryEditorCtrl)\n    .controller('QuerySampleModalCtrl', QuerySampleModalCtrl);\n\nQueryEditorCtrl.$inject = ['$scope', '$timeout', 'toastr', '$repositories', '$modal', 'ModalService', 'SparqlRestService', '$filter', '$window', '$jwtAuth', 'RDF4JRepositoriesRestService', 'MonitoringRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction QueryEditorCtrl($scope, $timeout, toastr, $repositories, $modal, ModalService, SparqlRestService, $filter, $window, $jwtAuth, RDF4JRepositoriesRestService, MonitoringRestService, LocalStorageAdapter, LSKeys) {\n    const defaultTabConfig = {\n        id: \"1\",\n        name: '',\n        query: 'select * where { \\n' +\n        '\\t?s ?p ?o .\\n' +\n        '} limit 100 \\n',\n        inference: true,\n        sameAs: true\n    };\n\n    let principal = $jwtAuth.getPrincipal();\n    let checkQueryIntervalId;\n    if (principal) {\n        initTabs($scope, principal);\n        // principal is not yet set, wait for its initialization\n    } else {\n        $scope.$on('securityInit', function (scope) {\n            principal = $jwtAuth.getPrincipal();\n            initTabs(scope.currentScope, principal);\n        });\n    }\n\n    function initTabs(scope, principal) {\n        defaultTabConfig.inference = principal.appSettings.DEFAULT_INFERENCE;\n        defaultTabConfig.sameAs = principal.appSettings.DEFAULT_SAMEAS;\n\n        scope.skipCountQuery = !principal.appSettings.EXECUTE_COUNT;\n        scope.ignoreSharedQueries = principal.appSettings.IGNORE_SHARED_QUERIES;\n        scope.tabsData = scope.tabs = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function (newVal, oldVal, scope) {\n            saveQueryToLocal(scope.currentQuery);\n        });\n\n        scope.$on('repositoryIsSet', deleteCachedSparqlResults);\n    }\n\n    this.hint =  document.createElement(\"span\");\n    this.hint.innerHTML = \"Hint: \\\"abC\\\" matches \\\"abC*\\\", \\\"ab c*\\\" and \\\"ab-c*\\\"\";\n    this.hint.style.fontSize = \"12px\";\n    this.hint.style.color = \"gray\";\n    this.hint.style.backgroundColor = \"white\";\n    this.hint.style.position = \"absolute\";\n    this.hint.style.zIndex = \"3\";\n    this.hint.style.paddingLeft = 12 + \"px\";\n\n    $scope.$watch(function() {\n        return angular.element('.CodeMirror-hints').length;\n    }, (newValue) => {\n        if (newValue) {\n            const elRect = angular.element('.CodeMirror-hints')[0].getBoundingClientRect();\n            document.body.appendChild(this.hint);\n            this.hint.style.top = elRect.top - 20 + \"px\";\n            this.hint.style.left = elRect.right - this.hint.offsetWidth - 12 +  \"px\";\n        } else {\n            this.hint && this.hint.parentNode && this.hint.parentNode.removeChild(this.hint);\n        }\n    });\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 1000,\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n    $scope.isTabChangeOk = isTabChangeOk;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.abortCurrentQuery = abortCurrentQuery;\n    $scope.editQuery = editQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.deleteQuery = deleteQuery;\n    $scope.deleteQueryHttp = deleteQueryHttp;\n    $scope.saveQuery = saveQuery;\n    $scope.saveQueryHttp = saveQueryHttp;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = LocalStorageAdapter.get(LSKeys.VIEW_MODE) ? LocalStorageAdapter.get(LSKeys.VIEW_MODE) === \"true\" : true;\n    $scope.viewMode = 'none';\n\n    // start of repository actions\n    // FIXME: do we need this??\n    // $scope.getActiveRepository();\n    $scope.getActiveRepository = function () {\n        // same as getActiveRepository() but takes into account repo errors\n        return $repositories.getActiveRepository();\n    };\n\n    $scope.getActiveRepositoryNoError = function () {\n        if (!$scope.repositoryError) {\n            return $repositories.getActiveRepository();\n        }\n    };\n\n    function saveQueryToLocal(currentQueryTab) {\n        $scope.tabs.forEach(function (tab, index) {\n            if (tab.id === currentQueryTab.id) {\n                $scope.tabs[index].query = currentQueryTab.query;\n                $scope.tabs[index].inference = currentQueryTab.inference;\n                $scope.tabs[index].sameAs = currentQueryTab.sameAs;\n            }\n        });\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage, noTimer) {\n        const yasrInnerContainer = angular.element(document.getElementById(\"yasr-inner\"));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            $scope.noLoaderTimer = noTimer;\n            yasrInnerContainer.addClass(\"hide\");\n        } else {\n            $scope.progressMessage = \"\";\n            $scope.extraMessage = \"\";\n            $scope.noLoaderTimer = false;\n            $scope.currentTrackAlias = null;\n            $scope.abortRequested = false;\n            yasrInnerContainer.removeClass(\"hide\");\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        let timeHuman = \"\";\n        let message = \"\";\n\n        if (!$scope.noLoaderTimer) {\n            timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        }\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + \"... \" + timeHuman;\n        } else {\n            message = \"Running operation... \" + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += \"\\n\" + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalView) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on(\"$destroy\", function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n                //window.editor.refresh();\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode() {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        LocalStorageAdapter.set(LSKeys.VIEW_MODE, $scope.orientationViewMode);\n        fixSizesOnHorizontalViewModeSwitch();\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(\":focus\")) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function deleteCachedSparqlResults(foo, params) {\n        if (params.newRepo) {\n            $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE);\n            $scope.tabsData.forEach(function (item) {\n                item.yasrData = undefined;\n                item.queryType = undefined;\n                item.resultsCount = 0;\n                item.allResultsCount = 0;\n                item.sizeDelta = undefined;\n            });\n\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n            $scope.tabs = $scope.tabsData;\n\n            // The repository is changed. Remove error messages as well, if any\n            $scope.currentQuery = {};\n            $scope.errorMessage = null;\n            $scope.repositoryError = null;\n        }\n    }\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    window.onbeforeunload = function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    };\n\n    $scope.$on('$destroy', function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n        clearInterval(checkQueryIntervalId);\n    });\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (explain) {\n            if (!(window.editor.getQueryType() === 'SELECT' || window.editor.getQueryType() === 'CONSTRUCT')) {\n                toastr.warning('Explain only works with SELECT or CONSTRUCT queries.');\n                return;\n            }\n\n            if ($repositories.isActiveRepoOntopType()) {\n                toastr.warning('Explain not supported for Virtual repositories.');\n                return;\n            }\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            $scope.lastRunQueryMode = window.editor.getQueryMode();\n\n            if ($scope.lastRunQueryMode === 'update' && $repositories.isActiveRepoOntopType()) {\n                toastr.warning('Updates are not supported for Virtual repositories.');\n                return;\n            }\n\n            setLoader(true, $scope.lastRunQueryMode === 'update' ? 'Executing update' : 'Evaluating query');\n            if ($scope.viewMode !== 'none') {\n                $scope.viewMode = 'none';\n                if ($scope.orientationViewMode) {\n                    $scope.fixSizesOnHorizontalViewModeSwitch();\n                }\n                const timer = $timeout(window.editor.query, 500);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            } else {\n                window.editor.query();\n            }\n        }\n    }\n\n    function abortCurrentQuery() {\n        MonitoringRestService.abortQueryByAlias($scope.currentTrackAlias)\n            .success(function () {\n                $scope.abortRequested = true;\n            });\n    }\n\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        $scope.namespacesLoading = true;\n\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                $scope.namespacesLoading = false;\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    $scope.$on(\"$destroy\", function () {\n        clearInterval(checkQueryIntervalId);\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n        $scope.showSampleQueries = !$scope.showSampleQueries;\n        if ($scope.showSampleQueries) {\n            SparqlRestService.getSavedQueries()\n                .success(function (data) {\n                    $scope.sampleQueries = data;\n                    $('#sampleQueriesCollapse').collapse('show').width('300px');\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error! Could not get saved queries');\n                });\n        } else {\n            $('#sampleQueriesCollapse').collapse('hide');\n        }\n    }\n\n    // Hide the sample queries when the user clicks somewhere else in the UI.\n    $(document).mouseup(function (event) {\n        const container = $('#sampleQueriesCollapse');\n        if (!container.is(event.target) // if the target of the click isn't the container..\n            && container.has(event.target).length === 0 //... nor a descendant of the container\n            && $scope.showSampleQueries) {\n            toggleSampleQueries();\n        }\n    });\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n\n        if ($scope.isTabChangeOk(false)) {\n            $scope.highlightNextTabChange = true;\n            if (!angular.isDefined(tabId)) {\n                $scope.addNewTab(null, query.name, query.body);\n            } else {\n                selectTab(tabId);\n            }\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        $scope.tabsData.forEach(function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n        return existingTabId;\n    }\n\n    function editQuery(query) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: 'Edit Saved Query: \"' + query.name + '\"',\n                        query: query,\n                        edit: true,\n                        okButtonText: 'Save'\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (queryModal) {\n            const data = {\n                name: queryModal.name,\n                body: queryModal.body,\n                shared: queryModal.shared\n            };\n            if (query.name !== queryModal.name) {\n                SparqlRestService.addNewSavedQuery(data)\n                    .success(function () {\n                        $scope.deleteQueryHttp(query.name, true);\n                    })\n                    .error(function (data) {\n                        const msg = getError(data);\n                        toastr.error(msg, 'Error! Cannot edit saved query');\n                    });\n            } else {\n                SparqlRestService.editSavedQuery(data)\n                    .success(function () {\n                        $('#editQueryContainer').modal('hide');\n                        $scope.toggleSampleQueries();\n                        toastr.success('Saved query ' + query.name + ' was edited.');\n                    })\n                    .error(function (data) {\n                        const msg = getError(data);\n                        toastr.error(msg, 'Error! Cannot edit Saved query');\n                    });\n            }\n        });\n    }\n\n    function deleteQueryHttp(savedQueryName, edit) {\n        SparqlRestService.deleteSavedQuery(savedQueryName)\n            .success(function () {\n                $scope.toggleSampleQueries();\n                if (!edit) {\n                    toastr.success('Saved query: ' + savedQueryName + ' was deleted.');\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Cannot delete saved query');\n            });\n    }\n\n    function deleteQuery(savedQueryName) {\n        ModalService.openSimpleModal({\n            title: 'Confirm',\n            message: 'Are you sure you want to delete the saved query ' + '\\'' + savedQueryName + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                $scope.deleteQueryHttp(savedQueryName);\n            });\n    }\n\n    function saveQueryHttp(query) {\n        SparqlRestService.addNewSavedQuery(query)\n            .success(function () {\n                toastr.success('Saved query ' + query.name + ' was saved.');\n            })\n            .error(function (data) {\n                let msg = getError(data);\n                toastr.error(msg, 'Error! Cannot create saved query');\n                // TODO: This condition will always be true\n                if (msg = \"Query '\" + query.name + \"' already exists!\") {\n                    query.query = query.body;\n                    const queryExists = true;\n                    $scope.saveQuery(query, queryExists);\n                }\n            });\n    }\n\n    function saveQuery(query, queryExists) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: 'Create New Saved Query',\n                        query: {name: query.name, body: query.query, shared: query.shared},\n                        edit: false,\n                        okButtonText: 'Create',\n                        queryExists: queryExists\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (query) {\n            $scope.saveQueryHttp(query);\n        }, function () {\n        });\n    }\n\n    // end of query operations\n\n    function showModal(modalSelector) {\n        return function (name, query, shared) {\n            $scope.savedQuery = {\n                name: name,\n                query: query || window.editor.getValue(),\n                shared: shared\n            };\n            $(modalSelector).modal('show');\n        };\n    }\n\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    let maxID = LocalStorageAdapter.get(LSKeys.TABS_STATE_MAXID) || 1;\n\n    function addNewTab(callback, tabName, savedQuery) { // optional callback to call after tab has been added\n        if (!isTabChangeOk(true)) {\n            return;\n        }\n        let defaultTabConfig;\n        if (tabName || savedQuery) {\n            defaultTabConfig = {\n                id: \"1\",\n                name: tabName,\n                query: savedQuery,\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        } else {\n            defaultTabConfig = {\n                id: \"1\",\n                name: '',\n                query: 'select * where { \\n' +\n                '\\t?s ?p ?o .\\n' +\n                '} limit 100 \\n',\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        }\n\n        maxID++;\n        const newID = '' + maxID;\n        $scope.tabsData = $scope.tabs;\n\n        const newTab = defaultTabConfig;\n        newTab.id = newID;\n\n        $scope.tabsData.push(newTab);\n\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_MAXID, maxID);\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n        const callbackArgs = Array.prototype.slice.call(arguments, 1); // skip one argument, i.e. the callback itself\n        $timeout(function () {\n            $scope.$apply();\n            selectTab(newID);\n            if (callback) {\n                callback.apply(this, callbackArgs);\n            }\n        }, 0);\n        $scope.tabs = $scope.tabsData;\n    }\n\n    function loadTab(id) {\n        $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        // find available tab\n        const idx = findTabIndexByID(id);\n        const tab = $scope.tabsData[idx];\n\n        if (tab.yasrData) {\n            setLoader(true, 'Rendering results', null, true);\n        }\n\n        // set query in editor available on the current tab\n        $timeout(function () {\n            if ($scope.currentQuery.query === '') {\n                $scope.currentQuery.query = \" \";\n            }\n            $timeout(function () {\n                window.editor.setValue($scope.currentQuery.query);\n                $scope.yasr.updateDownloadDropdown();\n                $scope.$broadcast('tabLoaded', $scope.currentQuery.id);\n\n                // set query results in query results sections after\n                // previous query execution. Yasr response rendering depends on the\n                // query type of window.editor!\n                $scope.yasr.options.output = tab.outputType; // this may be undefined, that's fine!\n                if (tab.yasrData) {\n                    if (tab.yasrData.customError) {\n                        // Our injected custom (not real HTTP) error\n                        $scope.yasr.results = {\n                            getException: function () {\n                                return tab.yasrData.customError;\n                            }\n                        };\n                        setLoader(false);\n                    } else {\n                        // Real YASR result\n                        $timeout(function () {\n                            $scope.setYasrResponse(tab.yasrData, tab.textStatus, tab.jqXhrOrErrorString);\n                            setLoader(false);\n                            if ($('.yasr_btnGroup li:nth-child(2)').hasClass(\"active\")) {\n                                $timeout(function () {\n                                    $('.yasr_btnGroup li:nth-child(2) a').get(0).click();\n                                }, 0);\n                            }\n                        }, 0);\n                    }\n                }\n            }, 0);\n        }, 0);\n\n\n        // persist current tab id in local storage\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_CURRENT_ID, id);\n\n        $scope.currentQuery = tab;\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.allResultsCountExact = tab.allResultsCountExact;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.currentTabConfig.customUpdateMessage = tab.customUpdateMessage;\n            $scope.currentTabConfig.errorMessage = tab.errorMessage;\n            $scope.currentTabConfig.warningMessage = tab.warningMessage;\n\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n\n        if (!checkQueryIntervalId) {\n            checkQueryIntervalId = setInterval(showOrHideSaveAsDropDown, 200);\n        }\n        overrideSameAsInferenceAndNoCountIfNeeded();\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    function showOrHideSaveAsDropDown() {\n        // If selected tab has results and query in editor controller is invalid save as\n        // dropdown menu will be removed and on fixing query latter will be added\n        if ($scope.currentTabConfig.resultsCount >= 0) {\n            const $saveAsDropDown = $('.saveAsDropDown');\n            if ($saveAsDropDown.length > 0 && !window.editor.queryValid) {\n                yasr.header.find('.saveAsDropDown').remove();\n            } else if ($saveAsDropDown.length === 0 && window.editor.queryValid) {\n                yasr.updateDownloadDropdown();\n            }\n        }\n    }\n\n    function isTabChangeOk(isNew) {\n        if ($scope.queryIsRunning && !$scope.namespacesLoading) {\n            if (isNew) {\n                toastr.info('New tabs may not be opened while query or update is running.');\n            } else {\n                toastr.info('Tabs may not be switched while query or update is running.');\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    // Raise this flag to provide visual feedback to the user the next time a tab changes\n    // (either manually or by the system). See GDB-1983.\n    $scope.highlightNextTabChange = false;\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            // Cancel any highlight timer that might have been left by the last highlight\n            $timeout.cancel(tabEvent.relatedTarget.timer);\n            $(tabEvent.relatedTarget).css('color', '');\n\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n\n        $scope.loadTab(getQueryID(tabEvent.target));\n\n        // These arrays define how the tab change will be visually enhanced.\n        // colors contains the colors to set to the tab name,\n        // while times defines the times in milliseconds to keep each color.\n        // Once we cycle through the arrays we restore the default color.\n        const colors = ['#ED4F2F', '', '#ED4F2F'];\n        const times = [400, 400, 400];\n        if ($scope.highlightNextTabChange) {\n            $scope.highlightNextTabChange = false;\n            let index = 0;\n            $(tabEvent.target).css('color', colors[index]);\n            const highlightFun = function () {\n                index++;\n                if (index < colors.length) {\n                    $(tabEvent.target).css('color', colors[index]);\n                    tabEvent.target.timer = $timeout(highlightFun, times[index]);\n                } else {\n                    $(tabEvent.target).css('color', '');\n                }\n            };\n            $timeout(highlightFun, times[index]);\n        }\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = {};\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n    $scope.editQueryModal = showModal('#editQueryContainer');\n    $scope.deleteQueryModal = showModal('#confirmDeleteContainer');\n    $scope.saveQueryModal = showModal('#saveQueryContainer');\n\n    $scope.getResultsDescription = function () {\n        let desc;\n        if ($scope.currentTabConfig.resultsCount === 0) {\n            desc = \"No results.\";\n        } else {\n            const currentPageEnd = ($scope.currentTabConfig.page - 1) * $scope.currentTabConfig.pageSize\n                + Math.min($scope.currentTabConfig.resultsCount, $scope.currentTabConfig.pageSize);\n            desc = \"Showing results from \" + $filter('currency')($scope.currentTabConfig.offset, '', 0)\n                + \" to \" + $filter('currency')(currentPageEnd, '', 0);\n            if ($scope.currentTabConfig.allResultsCount > 0) {\n                // Unsure total results count \"of at least\" happens if counting timed out or\n                // counting was disabled and we got at least $pageSize + 1 results for the current page.\n                // It may reset become exact when we navigate and reach the end of results.\n                desc += $scope.currentTabConfig.allResultsCountExact\n                    ? \" of \" : \" of at least \";\n                desc += $filter('currency')($scope.currentTabConfig.allResultsCount, '', 0);\n            }\n            desc += \".\";\n        }\n\n        return desc;\n    };\n\n    $scope.getUpdateDescription = function () {\n        if ($scope.currentTabConfig.customUpdateMessage) {\n            return $scope.currentTabConfig.customUpdateMessage;\n        } else if ($scope.currentTabConfig.sizeDelta === undefined) {\n            return '';\n        } else if ($scope.currentTabConfig.sizeDelta < 0) {\n            return 'Removed ' + Math.abs($scope.currentTabConfig.sizeDelta) + ' statements.';\n        } else if ($scope.currentTabConfig.sizeDelta > 0) {\n            return 'Added ' + $scope.currentTabConfig.sizeDelta + ' statements.';\n        } else {\n            return 'The number of statements did not change.';\n        }\n    };\n\n    $scope.getStaleWarningMessage = function () {\n        const secondsAgo = Math.round((Date.now() - $scope.currentTabConfig.timeFinished) / 60000) * 60;\n        if (secondsAgo >= 3600) { // must be at least an hour\n            return \"Possibly stale result (obtained \" + $scope.getHumanReadableSeconds(secondsAgo) + \" ago).\";\n        }\n    };\n\n    const resize = function () {\n        // $scope.fixSizesOnHorizontalViewModeSwitch();\n    };\n\n    angular.element($window).bind('resize', resize);\n\n    $scope.$on('$destroy', function () {\n        angular.element($window).unbind('resize', resize);\n    });\n\n    /**\n     * In case of Ontop repository, sameAs, inference and nocount are\n     * overridden to true and #sameAs and #inference buttons is disabled, In case of FedX repo nocount is overriden\n     */\n    function overrideSameAsInferenceAndNoCountIfNeeded() {\n        const isOntop = $repositories.isActiveRepoOntopType();\n        const isFedX = $repositories.isActiveRepoFedXType();\n        handleSameAsAndInferenceBtns(isOntop);\n\n        $scope.nocount = (isOntop || isFedX) ? true : !principal.appSettings.EXECUTE_COUNT;\n        $scope.currentQuery.inference = isOntop ? true : principal.appSettings.DEFAULT_INFERENCE;\n        $scope.currentQuery.sameAs = isOntop ? true : principal.appSettings.DEFAULT_SAMEAS;\n    }\n\n    function handleSameAsAndInferenceBtns(isOntop) {\n        const sameAsBtn = document.getElementById('sameAs');\n        const inferenceBtn = document.getElementById('inference');\n\n        sameAsBtn.disabled = !!(sameAsBtn && isOntop);\n        inferenceBtn.disabled = !!(inferenceBtn && isOntop);\n    }\n}\n\nQuerySampleModalCtrl.$inject = ['$scope', '$modalInstance', 'data'];\n\nfunction QuerySampleModalCtrl($scope, $modalInstance, data) {\n    if (data.queryExists) {\n        $scope.queryExists = true;\n    }\n    $scope.query = angular.copy(data.query);\n    $scope.title = data.title;\n    $scope.edit = data.edit;\n    $scope.okButtonText = data.okButtonText;\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            $modalInstance.close($scope.query);\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n","import 'angular/rest/connectors.rest.service';\nimport 'angular/utils/local-storage-adapter';\nimport 'angular/externalsync/controllers';\nimport YASQE from 'lib/yasqe.bundled';\nimport YASR from 'lib/yasr.bundled';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.queryeditor', [\n        'ngCookies',\n        'graphdb.framework.externalsync.controllers',\n        'graphdb.framework.rest.connectors.service',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .directive('queryEditor', queryEditorDirective);\n\nqueryEditorDirective.$inject = ['$timeout', '$location', 'toastr', '$repositories', 'SparqlRestService', 'ModalService', '$modal', '$jwtAuth', 'RDF4JRepositoriesRestService', 'ConnectorsRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction queryEditorDirective($timeout, $location, toastr, $repositories, SparqlRestService, ModalService, $modal, $jwtAuth, RDF4JRepositoriesRestService, ConnectorsRestService, LocalStorageAdapter, LSKeys) {\n\n    let callbackOnChange;\n\n    return {\n        restrict: 'AE',\n        scope: false,\n        templateUrl: 'js/angular/core/directives/queryeditor/templates/query-editor.html',\n        link: linkFunc\n    };\n\n    //function updateLineGutter() in Yasqe receive wrong data and line numbers div have width 100%\n    // magic value 150 seems to work well (including Safari), smaller values work on other browsers but not always on Safari\n    function linkFunc(scope, element, attrs) {\n        // Doesn't store anything in local storage\n        scope.nostorage = attrs.hasOwnProperty('nostorage');\n        // Doesn't allow multiple tabs in the editor, only a single tab is active\n        scope.notabs = attrs.hasOwnProperty('notabs');\n        // Hides all the vertical toolbar inside the editor\n        scope.notoolbar = attrs.hasOwnProperty('notoolbar');\n        // Hides the saved queries icons in the toolbar\n        scope.notoolbarSaved = attrs.hasOwnProperty('notoolbarSaved');\n        // Hides the copy query link icon in the toolbar\n        scope.notoolbarCopy = attrs.hasOwnProperty('notoolbarCopy');\n        // Hides the inference icon in the toolbar\n        scope.notoolbarInference = attrs.hasOwnProperty('notoolbarInference');\n        // Hides the sameAs icon in the toolbar\n        scope.notoolbarSameAs = attrs.hasOwnProperty('notoolbarSameAs');\n        // Doesn't show any status messages in YASR (e.g. no results, query took that many seconds, etc)\n        scope.nostatus = attrs.hasOwnProperty('nostatus');\n        // Doesn't show the run button\n        scope.norun = attrs.hasOwnProperty('norun');\n        // Name of the Run button in the editor\n        scope.runButtonName = \"Run\";\n        if (attrs.runButtonName) {\n            scope.runButtonName = attrs.runButtonName;\n        }\n        // Doesn't execute the count query\n        scope.nocount = attrs.nocount === \"true\";\n\n        // Custom callback to call when the content changes (fired within timeout of 200)\n        if (attrs.callbackOnChange) {\n            const callback = scope[attrs.callbackOnChange];\n            if (typeof callback === 'function') {\n                callbackOnChange = callback;\n            }\n        }\n\n        $timeout(function () {\n            drawQueryEditor(scope);\n        }, 150);\n    }\n\n    function drawQueryEditor(scope) {\n        scope.changePagination = changePagination;\n\n        // start of keyboard shortcut actions\n        function saveQueryAction() {\n            angular.element('#wb-sparql-saveQuery')[0].click();\n        }\n\n        function runQueryAction() {\n            scope.runQuery(false, false);\n        }\n\n        function explainQueryAction() {\n            scope.runQuery(false, true);\n        }\n\n        function goToNextTabAction() {\n            if (scope.tabs.length < 2 || !scope.currentQuery.id || !scope.isTabChangeOk(false)) {\n                return;\n            }\n            let idx = findTabIndexByID(scope.currentQuery.id);\n            idx = (idx + 1) % scope.tabs.length;\n            const tab = scope.tabs[idx];\n            selectTab(tab.id);\n        }\n\n        function goToPreviousTabAction() {\n            if (scope.tabs.length < 2 || !scope.currentQuery.id || !scope.isTabChangeOk(false)) {\n                return;\n            }\n            let idx = findTabIndexByID(scope.currentQuery.id);\n            idx--;\n            if (idx === -1) {\n                idx = scope.tabs.length - 1;\n            }\n            const tab = scope.tabs[idx];\n            selectTab(tab.id);\n        }\n\n        window.editor = YASQE.fromTextArea(\n            document.getElementById(\"query\"), {\n                persistent: null,\n                value: \"\",\n                indentUnit: 4,\n                createShareLink: null,\n                cursorHeight: 1.0,\n                sparql: {\n                    showQueryButton: false,\n                    acceptHeaderGraph: \"application/x-graphdb-table-results+json, application/rdf+json;q=0.9, */*;q=0.8\",\n                    acceptHeaderSelect: \"application/x-sparqlstar-results+json, application/sparql-results+json;q=0.9, */*;q=0.8\"\n                },\n                // We provide a wrapper for executeQuery so we have to redefine those here\n                extraKeys: {\n                    \"Ctrl-Enter\": runQueryAction,\n                    \"Cmd-Enter\": runQueryAction,\n                    \"Shift-Ctrl-Enter\": explainQueryAction,\n                    \"Shift-Cmd-Enter\": explainQueryAction,\n                    \"Ctrl-Alt-T\": scope.addNewTab,\n                    \"Cmd-Alt-T\": scope.addNewTab,\n                    \"Ctrl-S\": saveQueryAction,\n                    \"Cmd-S\": saveQueryAction,\n                    \"Ctrl-Alt-Left\": goToPreviousTabAction,\n                    \"Cmd-Alt-Left\": goToPreviousTabAction,\n                    \"Ctrl-Alt-Right\": goToNextTabAction,\n                    \"Cmd-Alt-Right\": goToNextTabAction\n                }\n            }\n        );\n\n        window.editor.toastBuildIndex = function () {\n            toastr.warning('', '<div class=\"autocomplete-toast\"><a href=\"autocomplete\">Autocomplete is OFF<br>Go to Setup -> Autocomplete</a></div>',\n                {allowHtml: true});\n        };\n\n        window.editor.toastError = function (data) {\n            toastr.error('Cannot execute autocomplete query. ' + getError(data));\n        };\n\n        window.editor.on(\"changes\", function () {\n            angular.element('.CodeMirror-linenumbers').css('width', '1px');\n            angular.element('.CodeMirror-sizer').css('margin-left', '0px');\n            clearTimeout(scope.changesTimeout);\n            const hasError = !window.editor.queryValid;\n            scope.changesTimeout = setTimeout(callbackOnChange ? callbackOnChange() : function () {\n                const idx = findTabIndexByID(scope.currentQuery.id) + 1;\n                $('a[data-id = \"' + idx + '\"]')\n                    .toggleClass('query-has-error', hasError)\n                    .attr('title', hasError ?\n                        'Query contains a syntax error. See the relevant line for more information.' :\n                        '');\n            }, 200);\n            scope.currentQuery.query = window.editor.getValue();\n            scope.currentQuery.queryType = window.editor.getQueryType();\n        });\n\n\n        function selectTab(id) {\n            $timeout(function () {\n                let requestedTab = $('a[data-id = \"' + id + '\"]');\n                if (requestedTab.length === 0) {\n                    // tab has been deleted in another browser window or something else occurred,\n                    // select first tab instead\n                    requestedTab = $('a[data-id]').first();\n                }\n                requestedTab.tab('show');\n            }, 0);\n        }\n\n        // hide unneeded yasqe fullscreen button\n        $(\".fullscreenToggleBtns\").hide();\n\n        const afterCopy = function (event) {\n            $(event.target).removeClass('fa-link').addClass('fa-check').blur();\n            setTimeout(function () {\n                $(event.target).removeClass('fa-check').addClass('fa-link');\n            }, 1000);\n        };\n\n        window.onbeforeunload = function () {\n            if (!scope.nostorage) {\n                LocalStorageAdapter.set(LSKeys.TABS_STATE, scope.tabs);\n            }\n            scope.saveTab(scope.currentQuery.id);\n        };\n\n        /*\n         * Patch the execute query to take into account the inference\n         * and the same as options\n         */\n        const originalExecuteQuery = YASQE.executeQuery;\n        const originalGetUrlArguments = YASQE.getUrlArguments;\n\n        scope.$on('$destroy', function () {\n            if (!scope.nostorage) {\n                LocalStorageAdapter.set(LSKeys.TABS_STATE, scope.tabs);\n            }\n            YASQE.executeQuery = originalExecuteQuery;\n            YASQE.getUrlArguments = originalGetUrlArguments;\n            scope.saveTab(scope.currentQuery.id);\n        });\n\n        /*\n         * Add our own buttons\n         */\n        YASQE.drawButtons = function (yasqe) {\n            // Define this property because otherwise there are errors in yasgui's code.\n            yasqe.buttons = $(\"#yasqe_buttons_mocked\");\n        };\n\n        YASQE.getActiveRepository = function () {\n            return $repositories.getActiveRepository();\n        };\n\n        YASQE.getUrlArguments = function (yasqe, config) {\n            const data = originalGetUrlArguments(yasqe, config);\n            const qType = window.editor.getQueryType();\n            if ('SELECT' === qType || 'CONSTRUCT' === qType || 'DESCRIBE' === qType) {\n                // We request pageSize + 1 to know if there are more pages when total count isn't known\n                data.push({name: 'limit', value: scope.currentTabConfig.pageSize + 1});\n                scope.currentTabConfig.offset = (scope.currentTabConfig.page - 1) * scope.currentTabConfig.pageSize + 1;\n                data.push({name: 'offset', value: scope.currentTabConfig.offset - 1});\n            }\n            // even though we have explainRequested in our scope too it doesn't always contain a fresh value\n            if (scope.explainRequested && ('SELECT' === qType || 'CONSTRUCT' === qType)) {\n                data.push({name: 'explain', value: 'true'});\n            }\n            return data;\n        };\n\n        function createCustomError(status, statusText, responseText) {\n            return {\n                status: status,\n                statusText: statusText,\n                responseText: responseText\n            };\n        }\n\n        // Generates a new tracking alias for queries based on time\n        function newTrackAlias() {\n            return \"query-editor-\" + performance.now() + \"-\" + Date.now();\n        }\n\n        let connectorProgressModal;\n        let yasr;\n\n        YASQE.executeQuery = function (cm) {\n            if (yasr && $(yasr.resultsContainer).length) {\n                $(yasr.resultsContainer).empty();\n            }\n            // Request extra error/warning handling\n            cm.options.sparql.headers['X-GraphDB-Catch'] = scope.currentTabConfig.pageSize + '; throw';\n            scope.currentTrackAlias = newTrackAlias();\n            cm.options.sparql.headers['X-GraphDB-Track-Alias'] = scope.currentTrackAlias;\n            scope.countTimeouted = false;\n            if (cm.getQueryMode() === 'query') {\n                cm.options.sparql.endpoint = 'repositories/' + $repositories.getActiveRepository();\n            } else if (cm.getQueryMode() === 'update') {\n                cm.options.sparql.endpoint = 'repositories/' + $repositories.getActiveRepository() + '/statements';\n            }\n            cm.options.sparql.args = [{\n                name: 'infer',\n                value: scope.currentQuery.inference\n            },\n                {\n                    name: 'sameAs',\n                    value: scope.currentQuery.sameAs\n                }];\n\n            scope.currentTabConfig.customUpdateMessage = \"\";\n\n            if (window.editor.getQueryMode() === \"update\") {\n                const doExecute = function () {\n                    scope.currentTabConfig.queryType = \"UPDATE\";\n\n                    RDF4JRepositoriesRestService.getRepositorySize()\n                        .success(function (data) {\n                            scope.repoSize = parseInt(data);\n                            scope.queryStartTime = new Date().getTime();\n                            return originalExecuteQuery(cm, {});\n                        })\n                        .error(function (data) {\n                            toastr.warning('Could not get repository size for: ' + $repositories.getActiveRepository() + '; ' + getError(data));\n                            scope.queryStartTime = new Date().getTime();\n                            return originalExecuteQuery(cm, {});\n                        });\n                };\n\n                ConnectorsRestService.checkConnector(window.editor.getValue())\n                    .then(function (res) {\n                        if (res.data.command && !res.data.hasSupport) {\n                            // it's a connector query but the relevant plugin isn't active, stop executing and warn the user\n                            scope.currentTabConfig.queryType = 'ERROR';\n                            scope.currentTabConfig.timeFinished = Date.now();\n                            scope.currentTabConfig.timeTook = (scope.currentTabConfig.timeFinished - scope.queryStartTime) / 1000;\n\n                            const customError = createCustomError(-1, 'No support for ' + res.data.connectorName, res.data.connectorName\n                                + ' connectors are not supported because the plugin ' + res.data.pluginName + ' is not active.');\n\n                            yasr.results = {\n                                getException: function () {\n                                    return customError;\n                                }\n                            };\n\n                            scope.setLoader(false);\n\n                            setNewTabState({customError: customError}, '', null);\n\n                            return;\n                        }\n\n                        if (res.data.command === 'create' || res.data.command === 'repair') {\n                            const repair = res.data.command === 'repair';\n                            if (repair) {\n                                scope.setLoader(true, 'Repairing connector ' + res.data.name);\n                                scope.currentTabConfig.customUpdateMessage = 'Repaired connector ' + res.data.name + '.';\n                            } else {\n                                scope.setLoader(true, 'Creating connector ' + res.data.name);\n                                scope.currentTabConfig.customUpdateMessage = 'Created connector ' + res.data.name + '.';\n                            }\n\n                            const progressScope = scope.$new(true);\n\n                            // This duplicates code in the externalsync module but we can't get it from there\n                            progressScope.beingBuiltConnector = {\n                                percentDone: 0,\n                                status: {\n                                    processedEntities: 0,\n                                    estimatedEntities: 0,\n                                    indexedEntities: 0,\n                                    entitiesPerSecond: 0\n                                },\n                                actionName: repair ? 'Repairing' : 'Creating',\n                                eta: \"-\",\n                                inline: false,\n                                iri: res.data.iri,\n                                name: res.data.name,\n                                doneCallback: function () {\n                                    connectorProgressModal.dismiss('cancel');\n                                }\n                            };\n                            progressScope.getHumanReadableSeconds = scope.getHumanReadableSeconds;\n\n                            connectorProgressModal = $modal.open({\n                                templateUrl: 'pages/connectorProgress.html',\n                                controller: 'CreateProgressCtrl',\n                                size: 'lg',\n                                backdrop: 'static',\n                                scope: progressScope\n                            });\n                        } else if (res.data.command === 'drop') {\n                            scope.setLoader(true, 'Deleting connector ' + res.data.name);\n                            scope.currentTabConfig.customUpdateMessage = 'Deleted connector ' + res.data.name + '.';\n                        }\n\n                        doExecute();\n                    }, function () {\n                        // for some reason we couldn't check if this is a connector update, so just execute it\n                        doExecute();\n                    });\n\n            } else {\n                const thisTabConfig = scope.currentTabConfig;\n                const thisTabId = scope.executedQueryTab.id;\n\n                // Assign a fresh callback function so that we can associate the count result\n                // with the right tab (or lack of tab).\n                window.editor.options.sparql.handlers.countCallback = function (dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n                    if (dataOrJqXhr.status === 200) {\n                        const tab = scope.tabs[findTabIndexByID(thisTabId)];\n                        if (tab) {\n                            yasr.setResultsCount(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n                            thisTabConfig.allResultsCount = yasr.allCount;\n                            tab.allResultsCount = yasr.allCount;\n                            thisTabConfig.allResultsCountExact = true;\n                            tab.allResultsCountExact = true;\n                            scope.saveTab(tab.id);\n                        } // Else tab was closed while we wait for the count, ignore result\n                    } else {\n                        // count query timed out or something else went wrong\n                        thisTabConfig.countTimeouted = true;\n                    }\n                };\n\n                // Tell YASR what format we want, or else it will mess it up when switching between tabs.\n                if (scope.currentQuery.outputType != null) {\n                    yasr.options.output = scope.currentQuery.outputType;\n                } else { // Default to table if no format has been configured yet.\n                    yasr.options.output = \"table\";\n                }\n                scope.currentTabConfig.queryType = window.editor.getQueryType();\n                scope.queryStartTime = new Date().getTime();\n                return originalExecuteQuery(cm, {\n                    setQueryLimit: function (query) {\n                        // Until weird conversion of CONSTRUCT queries is fixed\n                        // in Ontop project, comments should be removed from them\n                        // TODO: Remove this check when ${link https://github.com/ontop/ontop/issues/362} is fixed\n                        if (scope.currentTabConfig.queryType === 'CONSTRUCT' && $repositories.isActiveRepoOntopType()) {\n                            return window.editor.getValueWithoutComments();\n                        }\n                        // For all types of queries we handle limit/offset in our RepositoriesController.\n                        // TODO: Get rid of this method\n                        return query;\n                    }\n                });\n            }\n\n        };\n\n        // Override yasqe's getAjaxConfig() so we can inject our authorization header\n        const originalGetAjaxConfig = YASQE.getAjaxConfig;\n        YASQE.getAjaxConfig = function (yasqe, callbackOrConfig) {\n            const config = originalGetAjaxConfig(yasqe, callbackOrConfig);\n\n            _.extend(config.headers, {\n                'Authorization': $jwtAuth.getAuthToken()\n            });\n\n            return config;\n        };\n\n        function createQueryURL(savedQueryName, owner) {\n            let url = [location.protocol, '//', location.host, location.pathname].join('');\n            if (savedQueryName) {\n                url = url + '?savedQueryName=' + encodeURIComponent(savedQueryName);\n                if (owner != null) {\n                    url += '&owner=' + encodeURIComponent(owner);\n                }\n            } else {\n                url = url + '?' + $.param({\n                    name: scope.currentQuery.name,\n                    infer: scope.currentQuery.inference,\n                    sameAs: scope.currentQuery.sameAs,\n                    query: window.editor.getValue()\n                });\n            }\n            return url;\n        }\n\n        scope.copyToClipboardQuery = function (savedQueryName, owner) {\n            ModalService.openCopyToClipboardModal(createQueryURL(savedQueryName, owner));\n        };\n\n        scope.copyToClipboardResult = function (resultURI) {\n            ModalService.openCopyToClipboardModal(resultURI);\n        };\n\n        scope.goToVisual = function () {\n            const paramsToParse = {\n                query: window.editor.getValue(),\n                sameAs: scope.currentQuery.sameAs,\n                inference: scope.currentQuery.inference\n            };\n\n            $location.path('graphs-visualizations').search(paramsToParse);\n        };\n\n        // Adds prefixes when the user pastes a query. This was in the controller before and it stopped working\n        // (needs to happen to after YASQE adds the textarea), see GDB-1936\n        $('textarea').on('paste', function () {\n            $timeout(function () {\n                scope.addKnownPrefixes();\n            }, 0);\n        });\n\n        function setNewTabState(dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n            // store explicitly the contentType\n            if (dataOrJqXhr.getResponseHeader && dataOrJqXhr.getResponseHeader(\"content-type\")) {\n                dataOrJqXhr.contentType = dataOrJqXhr.getResponseHeader(\"content-type\");\n            }\n\n            // We use this when we set YASR results to avoid double JSON parsing and to enforce\n            // using the modified responseJSON. We'll save responseJSON instead (no need to save both).\n            delete dataOrJqXhr.response;\n\n            const executedQueryTabIdx = findTabIndexByID(scope.executedQueryTab.id);\n            const executedQueryTab = scope.tabs[executedQueryTabIdx];\n            const queryResultState = {\n                    queryType: scope.currentTabConfig.queryType,\n                    yasrData: dataOrJqXhr,\n                    textStatus: textStatus,\n                    jqXhrOrErrorString: jqXhrOrErrorString,\n                    page: scope.currentTabConfig.page,\n                    pageSize: scope.currentTabConfig.pageSize,\n                    allResultsCount: scope.currentTabConfig.allResultsCount,\n                    allResultsCountExact: scope.currentTabConfig.allResultsCountExact,\n                    resultsCount: scope.currentTabConfig.resultsCount,\n                    offset: scope.currentTabConfig.offset,\n                    timeTook: scope.currentTabConfig.timeTook,\n                    timeFinished: scope.currentTabConfig.timeFinished,\n                    sizeDelta: scope.currentTabConfig.sizeDelta,\n                    customUpdateMessage: scope.currentTabConfig.customUpdateMessage,\n                    errorMessage: scope.currentTabConfig.errorMessage,\n                    warningMessage: scope.currentTabConfig.warningMessage\n                };\n\n            // Save the output type only if it isn't an update or an ask query.\n            // This way we preserve the existing output type when we execute an update and then\n            // execute a non-ask query.\n            if (scope.currentTabConfig.queryType !== \"ERROR\" && scope.currentTabConfig.queryType !== \"UPDATE\"\n                && scope.currentTabConfig.queryType !== \"ASK\") {\n                queryResultState.outputType = scope.yasr.options.output;\n            }\n\n            // merge query results state with the tab object\n            angular.extend(scope.currentQuery, queryResultState);\n\n            angular.extend(executedQueryTab, queryResultState);\n            if (!scope.nostorage) {\n                LocalStorageAdapter.set(LSKeys.TABS_STATE, scope.tabs);\n            }\n            $('a[data-id = \"' + scope.executedQueryTab.id + '\"]').tab('show');\n        }\n\n        function initYasr() {\n            yasr = YASR(document.getElementById(\"yasr\"), { // eslint-disable-line new-cap\n                getUsedPrefixes: {}, // initially blank, populated when we fetch the namespaces\n                persistency: false\n            });\n            window.yasr = yasr;\n            yasr.afterCopy = afterCopy;\n            yasr.getQueryResultsAsFormat = function (downloadFormat) {\n                // Simple cross-browser download with a form\n                const $wbDownload = $('#wb-download');\n                $wbDownload.attr('action', 'repositories/' + $repositories.getActiveRepository());\n                $('#wb-download-query').val(scope.currentQuery.query);\n                if (window.editor.getValue() !== scope.currentQuery.query) {\n                    toastr.warning('The query in your editor does not match the query results. Download will save the results from the last executed query.');\n                }\n                $('#wb-download-infer').val(scope.currentQuery.inference);\n                $('#wb-download-sameAs').val(scope.currentQuery.sameAs);\n                const auth = localStorage.getItem('com.ontotext.graphdb.auth');\n                if (auth) {\n                    $('#wb-auth-token').val(auth);\n                }\n                $('#wb-download-accept').val(downloadFormat);\n                $wbDownload.submit();\n            };\n            window.editor.options.sparql.handlers.complete = function (dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n                function setNewTabStateForThis() {\n                    setNewTabState(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n                }\n\n                if (connectorProgressModal) {\n                    connectorProgressModal.dismiss('cancel');\n                }\n\n                // If yasqe was destroyed when scope was destroyed, do nothing\n                if (null === window.editor) {\n                    scope.setLoader(false);\n\n                    return;\n                }\n\n                // Extra error/warning through headers\n                scope.currentTabConfig.errorMessage = dataOrJqXhr.getResponseHeader('X-GraphDB-Error');\n                scope.currentTabConfig.warningMessage = dataOrJqXhr.getResponseHeader('X-GraphDB-Warning');\n\n                yasr.currentQuery = scope.currentQuery;\n\n                scope.currentTabConfig.timeFinished = Date.now();\n                scope.currentTabConfig.timeTook = (scope.currentTabConfig.timeFinished - scope.queryStartTime) / 1000;\n\n                if (dataOrJqXhr.status >= 400) {\n                    // Removes useless com.blah.whatever.FooException: ... from the error message\n                    dataOrJqXhr.responseText = dataOrJqXhr.responseText.replace(/^([^: ]+: )+/, '');\n\n                    scope.currentTabConfig.queryType = 'ERROR';\n                    setNewTabStateForThis();\n                    scope.setYasrResponse(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n\n                    scope.setLoader(false);\n\n                    return;\n                }\n\n                if (dataOrJqXhr.status === 0) {\n                    // Query was aborted, typically through window.editor.xhr.abort()\n\n                    scope.currentTabConfig.queryType = 'ERROR';\n\n                    const customError = createCustomError(-1, 'Request was aborted', 'The request has been aborted. There are no results to show.');\n\n                    yasr.results = {\n                        getException: function () {\n                            return customError;\n                        }\n                    };\n\n                    scope.setLoader(false);\n\n                    setNewTabState({customError: customError}, '', null);\n\n                    return;\n                }\n\n                scope.setLoader(false);\n\n                let updateResultsCallback;\n\n                if (window.editor.getQueryMode() === \"update\") {\n                    updateResultsCallback = function () {\n                        RDF4JRepositoriesRestService.getRepositorySize()\n                            .success(function (data) {\n                                let repoSizeDiff;\n                                if (scope.repoSize !== undefined) {\n                                    repoSizeDiff = Number(data) - scope.repoSize;\n                                }\n                                scope.currentTabConfig.sizeDelta = repoSizeDiff;\n                                setNewTabStateForThis();\n                            }).error(function (data) {\n                                toastr.warning('Could not get repository size for: ' + scope.getActiveRepository() + '; ' + getError(data));\n                                scope.currentTabConfig.sizeDelta = undefined;\n                                setNewTabStateForThis();\n                            });\n                    };\n                } else {\n                    if (dataOrJqXhr.status === 200) {\n                        const contentType = dataOrJqXhr.getResponseHeader('Content-Type');\n\n                        if (contentType.indexOf('application/sparql-results+json') === 0\n                            || contentType.indexOf('application/x-sparqlstar-results+json') === 0\n                            || contentType.indexOf('application/x-graphdb-table-results+json') === 0) {\n                            if (dataOrJqXhr.responseJSON.results) {\n                                // SELECT results in one of the standard formats or\n                                // CONSTRUCT or DESCRIBE results in our custom format that looks\n                                // like a SELECT result.\n                                scope.currentTabConfig.resultsCount = dataOrJqXhr.responseJSON.results.bindings.length;\n                                if (dataOrJqXhr.responseJSON.results.bindings.length > scope.currentTabConfig.pageSize) {\n                                    // The results are more than the page size (because we request +1), truncate to page size\n                                    // and raise flag to know we have at least one page more.\n                                    dataOrJqXhr.responseJSON.results.bindings.length = scope.currentTabConfig.pageSize;\n                                }\n                                if (!scope.currentTabConfig.allResultsCountExact) {\n                                    if (scope.nocount || scope.countTimeouted\n                                        || scope.currentTabConfig.resultsCount <= scope.currentTabConfig.pageSize) {\n                                        // No count requested or count timed out or the results are less than the pageSize + 1 buffer\n                                        // In all of these cases it doesn't make sense to run\n                                        // the counting query so we tweak the status to signal that to YASQE.\n                                        dataOrJqXhr.status = 204; // 204 is no content, YASQE counts only if status is 200\n                                    }\n\n                                    // Calculate an \"at least\" all results count, i.e. at least what we have until now + 1.\n                                    // The number will increase when we go to the next page eventually reaching the exact count.\n                                    // A count query may also provide the exact count asynchronously.\n                                    scope.currentTabConfig.allResultsCount = Math.max(scope.currentTabConfig.allResultsCount,\n                                        scope.currentTabConfig.pageSize * (scope.currentTabConfig.page - 1) + scope.currentTabConfig.resultsCount);\n\n                                    // We know we reached the end and the count is exact now.\n                                    if (scope.currentTabConfig.resultsCount <= scope.currentTabConfig.pageSize) {\n                                        scope.currentTabConfig.allResultsCountExact = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // The following long-running code needs to be in timeout to get the updated loader message\n                    scope.setLoader(true, 'Rendering results', null, true);\n\n                    updateResultsCallback = function () {\n                        scope.setYasrResponse(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n\n                        setNewTabStateForThis();\n                        scope.setLoader(false);\n                    };\n                }\n\n                // By having this in timeout we manage to get the updated loader message\n                $timeout(function () {\n                    updateResultsCallback();\n\n                    // Move disabled class to a, and clean from the li\n                    if (window.editor.getQueryType() !== \"CONSTRUCT\") {\n                        $('.yasr_btnGroup.nav.nav-tabs li a.disabled').removeClass('disabled').css('font-weight', '400');\n                        $('.yasr_btnGroup.nav.nav-tabs li.disabled a').addClass('disabled').css('font-weight', '200');\n                        if (window.editor.getQueryType() === \"DESCRIBE\") {\n                            $('.yasr_btnGroup.nav.nav-tabs li a').removeClass('disabled').css('font-weight', '400');\n                        }\n                    } else if (window.editor.getQueryType() === \"CONSTRUCT\") {\n                        $('.yasr_btnGroup.nav.nav-tabs li a.disabled').removeClass('disabled').css('font-weight', '400');\n                    }\n\n\n                    //Remove paddign of yasr so it will be aligned with sparql editor\n                    $('#yasr').css('padding', '0');\n\n                    if ($('.yasr_btnGroup li:nth-child(2)').hasClass(\"active\")) {\n                        $timeout(function () {\n                            $('.yasr_btnGroup li:nth-child(2) a').get(0).click();\n                        }, 100);\n                    }\n\n                    //\n                    $('#wb-sparql-addNewTab').click(function () {\n                        $('.dataTables_filter').hide();\n                        $('.resultsTable').hide();\n                    });\n                }, 100);\n            };\n\n            window.editor.options.sparql.handlers.resetResults = function () {\n            };\n\n            scope.yasr = yasr;\n\n            scope.setYasrResponse = function(dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n                // If YASR doesn't see a \"response\" property it will parse the textual JSON in \"responseText\".\n                // This is both slow and interferes with the +1 result per page policy when we truncate responseJSON.\n                if (dataOrJqXhr.responseJSON) {\n                    dataOrJqXhr.response = dataOrJqXhr.responseJSON;\n                    dataOrJqXhr.responseText = undefined;\n                }\n                yasr.setResponse(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n            };\n\n            // Track changes in the output type (tab in yasr) so that we can save this together with\n            // the rest of the tab's data.\n            scope.$watch('yasr.options.output', function (value) {\n                // Save the output type only if it isn't an update or an ask query (see comment where we save all properties).\n                if (value && scope.currentTabConfig.queryType !== \"UPDATE\" && scope.currentTabConfig.queryType !== \"ASK\") {\n                    const tab = scope.tabs[findTabIndexByID(scope.currentQuery.id)];\n                    // Do not save tab on default yasr initalization since default table overrides saved value\n                    if (angular.isDefined(tab) && scope.currentTabConfig.queryType) {\n                        if (tab.outputType !== value) {\n                            tab.outputType = scope.currentQuery.outputType = value;\n                            scope.saveTab(tab.id);\n                        }\n                    }\n                }\n            });\n\n            scope.$watch('namespaces', function () {\n                if (scope.namespaces) {\n                    if (yasr && yasr.options && scope.namespaces) {\n                        // this way, the URLs in the results are prettified using the defined prefixes\n                        yasr.options.getUsedPrefixes = scope.namespaces;\n                    }\n\n                    // Notify YASQE about the new namespaces\n                    YASQE.signal(window.editor, 'namespacesChanged', scope.namespaces);\n                }\n            });\n        }\n\n        initYasr();\n\n        function changePagination() {\n            scope.runQuery(true, scope.explainRequested);\n        }\n\n        // Hide the sample queries when the user clicks somewhere else in the UI.\n        $(document).mouseup(function (event) {\n            const container = $('#sampleQueriesCollapse');\n            if (!container.is(event.target) // if the target of the click isn't the container..\n                && container.has(event.target).length === 0 //... nor a descendant of the container\n                && scope.showSampleQueries) {\n                scope.toggleSampleQueries();\n            }\n        });\n\n        function findTabIndexByID(id) {\n            for (let i = 0; i < scope.tabs.length; i++) {\n                const tab = scope.tabs[i];\n                if (tab.id === id) {\n                    return i;\n                }\n            }\n        }\n\n        // functions to load query param or saved queries\n        function toBoolean(v) {\n            return angular.isDefined(v) && v !== 'false';\n        }\n\n        function autoexecuteQueryIfRequested() {\n            const isRequested = toBoolean($location.search().execute);\n\n            if (isRequested) {\n                if (window.editor.getQueryMode() === 'update') {\n                    ModalService.openSimpleModal({\n                        title: 'Confirm execute',\n                        message: 'This is an update and it may change the data in the repository.<br>Are you sure you want to execute it automatically?',\n                        warning: true\n                    }).result\n                        .then(function () {\n                            scope.runQuery(false);\n                        });\n                } else {\n                    scope.runQuery(false);\n                }\n            }\n        }\n\n        function loadQueryIntoExistingOrNewTab(query, infer, sameAs) {\n            const tabId = scope.getExistingTabId(query);\n            // Ah, the joys of non-synchronous events\n            const onHandler = scope.$on('tabLoaded', function () {\n                if (angular.isDefined(infer)) {\n                    scope.currentQuery.inference = toBoolean(infer);\n                }\n                if (angular.isDefined(sameAs)) {\n                    scope.currentQuery.sameAs = toBoolean(sameAs);\n                }\n                autoexecuteQueryIfRequested();\n                onHandler();\n            });\n\n            // See comment about this flag in controller. It's a good idea to be consistent and do this\n            // every time a tab changes without the user clicking on it.\n            scope.highlightNextTabChange = true;\n\n            if (!angular.isDefined(tabId)) {\n                scope.addNewTab(null, query.name, query.body);\n            } else {\n                selectTab(tabId);\n            }\n        }\n\n        function loadSavedQueryIntoExistingOrNewTab(savedQueryName, owner, infer, sameAs) {\n            SparqlRestService.getSavedQuery(savedQueryName, owner)\n                .success(function (data) {\n                    loadQueryIntoExistingOrNewTab(data, infer, sameAs);\n                })\n                .error(function (data) {\n                    toastr.error('Could not get data for saved query: ' + savedQueryName + '; ' + getError(data));\n                });\n        }\n\n        function addTabWithQueryIfNeeded() {\n            if ($location.search().savedQueryName) {\n                // new way\n                loadSavedQueryIntoExistingOrNewTab($location.search().savedQueryName, $location.search().owner,\n                    $location.search().infer, $location.search().sameAs);\n            } else if ($location.search().query) {\n                const query = {name: $location.search().name, body: $location.search().query};\n                loadQueryIntoExistingOrNewTab(query, $location.search().infer, $location.search().sameAs);\n            } else {\n                // Restore the previous tab after the dom has loaded\n                const currentid = LocalStorageAdapter.get(LSKeys.TABS_STATE_CURRENT_ID);\n                selectTab(currentid);\n            }\n        }\n\n        function updateRepositoryAndSecurity() {\n            scope.getNamespaces();\n            YASQE.signal(window.editor, \"repositoryOrAuthorizationChanged\",\n                $repositories.getActiveRepository(), $jwtAuth.getAuthToken());\n            addTabWithQueryIfNeeded();\n        }\n\n        if ($repositories.getActiveRepository()) {\n            updateRepositoryAndSecurity();\n        }\n\n        // When no repo is selected (editor hidden) and the user selects a repo the SPARQL params should be handled\n        scope.$on('repositoryIsSet', function () {\n            if ($repositories.getActiveRepository()) {\n                updateRepositoryAndSecurity();\n            }\n        });\n        // end of repository actions\n\n        // focus the editor\n        $timeout(function () {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }, 50);\n\n    }\n}\n","import 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.sparqltab', [\n        'graphdb.framework.core',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .directive('sparqlTab', sparqlTabDirective);\n\nsparqlTabDirective.$inject = ['$rootScope', 'LocalStorageAdapter', 'LSKeys', 'ModalService'];\n\nfunction sparqlTabDirective($rootScope, LocalStorageAdapter, LSKeys, ModalService) {\n    const SparqlTabCtrl = ['$scope', '$element', '$rootScope', 'ModalService', 'toastr', function ($scope, $element, $rootScope, ModalService, toastr) {\n        $scope.state = {};\n\n        function getQueryID(element) {\n            return $(element).attr('data-id');\n        }\n\n        function findTabIndexByID(id) {\n            for (let i = 0; i < $scope.tabs.length; i++) {\n                const tab = $scope.tabs[i];\n                if (tab.id === id) {\n                    return i;\n                }\n            }\n        }\n\n        $($element).on('shown.bs.tab', function (e) {\n            $rootScope.$broadcast('tabAction', e);\n        });\n\n        $scope.deleteTab = deleteTab;\n        $scope.editCurrentTab = editCurrentTab;\n        $scope.selectThisTab = selectThisTab;\n\n        function selectThisTab(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if ($scope.isTabChangeOk(false)) {\n                $($element).tab('show');\n            }\n        }\n\n        function selectTab(id) {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }\n\n        function deleteTab(e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if ($scope.tabs.length < 2) {\n                toastr.warning('Last tab must remain open.');\n                return;\n            }\n\n            if (e.shiftKey) {\n                $scope.state.selectedTabId = getQueryID($element);\n\n                ModalService.openSimpleModal({\n                    title: 'Confirm',\n                    message: 'Are you sure you want to delete all query tabs except selected tab?',\n                    warning: true\n                }).result.then(function () {\n                    deleteAllTabsExceptSelected($scope.state.selectedTabId);\n                });\n            } else {\n                $scope.state.idForDelete = getQueryID($element);\n\n                ModalService.openSimpleModal({\n                    title: 'Confirm',\n                    message: 'Are you sure you want to close this query tab?',\n                    warning: true\n                }).result.then(function () {\n                    deleteTabByID($scope.state.idForDelete);\n                });\n            }\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n\n        function editCurrentTab() {\n            if (getQueryID($element) !== $scope.currentQuery.id) {\n                return;\n            }\n            $scope.editCurrentlySelectedOnly.$show();\n            //fix for buttons for edit\n            const $editableButtons = $(\".editable-buttons\");\n            $editableButtons.children(\".btn.btn-primary\").addClass('btn-sm');\n            $editableButtons.children(\".btn.btn-default\").addClass('btn-sm');\n            $('.editable-controls .editable-input').addClass('form-control-sm').on('change', function ($el) {\n                $scope.currentQuery.name = $el.currentTarget.$$currentValue;\n            });\n            //$('.editable-buttons').css('margin-top', '5px');\n            //$('.editable-input.editable-has-buttons').css('width', '50%');\n            $('.editable-buttons .glyphicon.glyphicon-ok')\n                .removeClass('glyphicon glyphicon-ok')\n                .addClass('fa fa-check');\n            $('.editable-buttons .glyphicon.glyphicon-remove')\n                .removeClass('glyphicon glyphicon-remove')\n                .addClass('fa fa-close');\n        }\n\n        function deleteTabByID(id) {\n            if (angular.isUndefined(id)) {\n                throw 'Delete by id was called with undefined id';\n            }\n            const idx = findTabIndexByID(id);\n            $scope.tabs.splice(idx, 1);\n\n            if (id === $scope.currentQuery.id) {\n                if ($scope.tabs.length > 0) {\n                    if (idx > 0) {\n                        // select previous tab if we deleted any but the first tab\n                        selectTab($scope.tabs[idx - 1].id);\n                    } else {\n                        // select first tab if we deleted the first tab\n                        selectTab($scope.tabs[0].id);\n                    }\n                }\n            }\n        }\n\n        function deleteAllTabsExceptSelected(id) {\n            $scope.tabs = $scope.tabs.filter(function (obj) {\n                if (obj.id === id) {\n                    return obj;\n                }\n            });\n            selectTab($scope.tabs[0].id);\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n            $rootScope.$broadcast('deleteAllexeptSelected', $scope.tabs);\n        }\n    }];\n\n    return {\n        restrict: 'AE',\n        // for some reason when you extract this template in a file and use templateUrl it selects all tabs when editing the tab name, not only the currently selected one\n        template: '<a class=\"nav-link\" role=\"tab\" data-toggle=\"tab\" blur=\"submit\" editable-text=\"tab.name\" e-form=\"editCurrentlySelectedOnly\" ng-click=\"selectThisTab($event)\" ng-dblclick=\"editCurrentTab()\" ><span ng-class=\"{\\'text-muted\\': !tab.name}\">{{ tab.name || \\'Unnamed\\'}}</span><button type=\"button\" ng-click=\"deleteTab($event)\" class=\"btn btn-link btn-sm secondary delete-sparql-tab-btn\" title=\"Delete tab\"><i class=\"icon-close\"></i></button></a>',\n        replace: true,\n        controller: SparqlTabCtrl\n    };\n}\n","angular\n    .module('graphdb.framework.rest.sparql-templates.service', [])\n    .factory('SparqlTemplatesRestService', SparqlTemplatesRestService);\n\nSparqlTemplatesRestService.$inject = ['$http'];\n\nconst SPARQL_TEMPLATES_ENDPOINT = 'rest/sparql-template';\n\nfunction SparqlTemplatesRestService($http) {\n    return {\n        getSparqlTemplates,\n        getSparqlTemplate,\n        createSparqlTemplate,\n        updateSparqlTemplate,\n        deleteSparqlTemplate\n    };\n\n    function getSparqlTemplates() {\n        return $http.get(`${SPARQL_TEMPLATES_ENDPOINT}`);\n    }\n\n    function getSparqlTemplate(templateID) {\n        return $http.get(`${SPARQL_TEMPLATES_ENDPOINT}/configuration`,\n            {\n                params : {\n                    'templateID': templateID\n                }\n            });\n    }\n\n    function createSparqlTemplate(template) {\n        return $http.post(`${SPARQL_TEMPLATES_ENDPOINT}/create`, {\n            templateID: template.templateID,\n            query: template.query\n        });\n    }\n\n    function updateSparqlTemplate(template) {\n        return $http.put(`${SPARQL_TEMPLATES_ENDPOINT}/edit`,\n            template.query,\n            {\n                params : {\n                    'templateID': template.templateID\n                },\n                headers: {\n                    'Content-Type': 'text/html'\n                }\n            });\n    }\n\n    function deleteSparqlTemplate(templateID) {\n        return $http.delete(`${SPARQL_TEMPLATES_ENDPOINT}/delete`,\n            {\n                params : {\n                    'templateID': templateID\n                }\n            });\n    }\n}\n","import 'angular/core/services';\nimport 'angular/core/services/repositories.service';\nimport 'angular/rest/monitoring.rest.service';\nimport 'angular/utils/notifications';\nimport 'angular/utils/uri-utils';\n\nconst modules = [\n    'ui.bootstrap',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.rest.monitoring.service',\n    'toastr'\n];\n\nangular.module('graphdb.framework.sparql-template.controllers', modules, [\n    'graphdb.framework.utils.notifications'\n])\n    .controller('SparqlTemplatesCtrl', SparqlTemplatesCtrl)\n    .controller('SparqlTemplateCreateCtrl', SparqlTemplateCreateCtrl);\n\nSparqlTemplatesCtrl.$inject = ['$scope', '$repositories', 'SparqlTemplatesRestService', 'toastr', 'ModalService'];\n\nfunction SparqlTemplatesCtrl($scope, $repositories, SparqlTemplatesRestService, toastr, ModalService) {\n\n    $scope.getSparqlTemplates = function () {\n        // Only do this if there is an active repo that isn't an Ontop repo.\n        // Ontop repos doesn't support update operations.\n        if ($repositories.getActiveRepository()\n                && !$repositories.isActiveRepoOntopType()\n                    && !$repositories.isActiveRepoFedXType()) {\n            SparqlTemplatesRestService.getSparqlTemplates().success(function (data) {\n                $scope.sparqlTemplateIds = data;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not get SPARQL templates');\n            });\n        } else {\n            $scope.sparqlTemplateIds = [];\n        }\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        $scope.getSparqlTemplates();\n    });\n\n    $scope.deleteTemplate = function (templateID) {\n        ModalService.openSimpleModal({\n            title: 'Warning',\n            message: 'Are you sure you want to delete the SPARQL template ' + '\\'' + templateID + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                SparqlTemplatesRestService.deleteSparqlTemplate(templateID)\n                    .success(function () {\n                        toastr.success(templateID, 'Deleted successfully SPARQL template');\n                        $scope.getSparqlTemplates();\n                    }).error(function (e) {\n                    toastr.error(getError(e), `Could not delete ${templateID} template`);\n                });\n            });\n    };\n}\n\nSparqlTemplateCreateCtrl.$inject = ['$scope', '$location', 'toastr', '$repositories', '$window', '$timeout', 'SparqlTemplatesRestService', 'RDF4JRepositoriesRestService', 'SparqlRestService', 'UriUtils', 'ModalService'];\n\nfunction SparqlTemplateCreateCtrl($scope, $location, toastr, $repositories, $window, $timeout, SparqlTemplatesRestService, RDF4JRepositoriesRestService, SparqlRestService, UriUtils, ModalService) {\n\n    const hash = $location.hash() || '';\n    $scope.templateID = ($location.search().templateID || '') + (hash ? (`#${hash}`) : '');\n    $scope.title = ($scope.templateID ? 'Edit' : 'Create') + ' SPARQL Template';\n    $scope.getNamespaces = getNamespaces;\n    $scope.setLoader = setLoader;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.noPadding = {paddingRight: 0, paddingLeft: 0};\n    $scope.currentTabConfig = {};\n    // This property is obligatory in order to show YASQUE and YASR properly\n    $scope.orientationViewMode = true;\n    $scope.currentQuery = {};\n    let templateExist = false;\n\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n            $location.path('/sparql-templates');\n        }\n    });\n\n    let timer = null;\n    $scope.goBack = function () {\n        timer = $timeout(function () {\n            $window.history.back();\n        }, 1000);\n    };\n\n    const locationChangeListener = $scope.$on('$locationChangeStart', function (event) {\n        confirmExit(event);\n    });\n\n    window.addEventListener('beforeunload', showBeforeunloadMessage);\n\n    function showBeforeunloadMessage(event) {\n        if (!$scope.currentQuery.isPristine) {\n            event.returnValue = true;\n        }\n    }\n\n    function confirmExit(event) {\n        if (!$scope.currentQuery.isPristine) {\n            if (!confirm('You have unsaved changes. Are you sure that you want to exit?')) {\n                event.preventDefault();\n            } else {\n                window.removeEventListener('beforeunload', showBeforeunloadMessage);\n                locationChangeListener();\n                $timeout.cancel(timer);\n            }\n        }\n    }\n\n    $scope.$on('$destroy', function (event) {\n        window.removeEventListener('beforeunload', showBeforeunloadMessage);\n        locationChangeListener();\n        $timeout.cancel(timer);\n    });\n\n    const defaultTabConfig = {\n        templateID: '',\n        query: 'PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\\n' +\n            'PREFIX ex: <http://example.com#>\\n' +\n            'DELETE {\\n' +\n            '  ?subject ex:myPredicate ?oldValue .\\n' +\n            '} INSERT {\\n' +\n            '  ?subject ex:myPredicate ?newValue .\\n' +\n            '} WHERE {\\n' +\n            '  ?id rdf:type ex:MyType .\\n' +\n            '  ?subject ex:isRelatedTo ?id .\\n' +\n            '}\\n',\n        inference: true,\n        sameAs: true,\n        isNewTemplate: true,\n        isPristine: true\n    };\n\n    $scope.saveTab = function () {\n        // Should have this empty function in this view\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    if ($scope.templateID) {\n        getSparqlTemplate($scope.templateID);\n    } else {\n        setQueryFromTabConfig();\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                loadTab();\n            });\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if (!$scope.currentQuery.query) {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query);\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        if (!$scope.canWriteActiveRepo()) {\n            window.editor.options.readOnly = true;\n        }\n    }\n\n    function getSparqlTemplate(templateID) {\n        SparqlTemplatesRestService.getSparqlTemplate(templateID).success(function (templateContent) {\n            defaultTabConfig.query = templateContent;\n            defaultTabConfig.templateID = templateID;\n\n            defaultTabConfig.isNewTemplate = !templateID;\n\n            setQueryFromTabConfig();\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, `Could not get ${$scope.currentQuery.templateID} template`);\n            $scope.repositoryError = msg;\n        });\n    }\n\n    function setQueryFromTabConfig() {\n        $scope.tabsData = $scope.tabs = [defaultTabConfig];\n        $scope.currentQuery = angular.copy(defaultTabConfig);\n\n        if (window.editor) {\n            $scope.setQuery($scope.currentQuery.query);\n            loadTab();\n        }\n\n        $scope.$watch(function () {\n            return $scope.currentQuery.query;\n        }, function (newValue, oldValue) {\n            if (newValue !== oldValue) {\n                $scope.setDirty();\n            }\n        });\n    }\n\n    $scope.saveTemplate = function () {\n        if (!validateQuery()) {\n            return;\n        }\n\n        if (!$scope.currentQuery.templateID) {\n            toastr.error('SPARQL template IRI is required');\n            return;\n        } else {\n            validateTemplateID();\n            if ($scope.isInvalidTemplateId) {\n                return;\n            }\n        }\n\n        if ($scope.currentQuery.isNewTemplate) {\n            checkIfTemplateExists()\n                .then(() => {\n                    if (templateExist) {\n                        const modalMsg = `<div>SPARQL Template <strong>${$scope.currentQuery.templateID}</strong> already exists.</div><br>\n                                        <div><span class=\"icon-2x icon-warning\" style=\"color: #d54a33\"/> Do you want to override the template query?</div>`;\n                        ModalService.openSimpleModal({\n                            title: 'Confirm save',\n                            message: modalMsg,\n                            warning: true\n                        }).result\n                            .then(function () {\n                                saveNewTemplate();\n                            });\n                    } else {\n                        saveNewTemplate();\n                    }\n                });\n        } else {\n            if (!$scope.currentQuery.isPristine) {\n                SparqlTemplatesRestService.updateSparqlTemplate($scope.currentQuery).success(function () {\n                    $scope.currentQuery.isPristine = true;\n                    $scope.currentQuery.isNewTemplate = false;\n                    toastr.success($scope.currentQuery.templateID, 'Updated SPARQL template');\n                    $scope.goBack();\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, `Could not save ${$scope.currentQuery.templateID} template`);\n                });\n            } else {\n                // No changes to template query, go back to\n                $scope.goBack();\n            }\n        }\n    };\n\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    $scope.setDirty = function () {\n        $scope.currentQuery.isPristine = false;\n    };\n\n    function hasValidQuery() {\n        return window.editor && window.editor.getQueryMode() === 'update';\n    }\n\n    function validateQuery() {\n        if (!hasValidQuery()) {\n            toastr.error('The template query must be an UPDATE query', 'Invalid query');\n            return false;\n        }\n\n        return true;\n    }\n\n    function validateTemplateID() {\n        $scope.isInvalidTemplateId = !UriUtils.isValidIri($scope.currentQuery.templateID);\n    }\n\n    function saveNewTemplate() {\n        SparqlTemplatesRestService.createSparqlTemplate($scope.currentQuery).success(function () {\n            $scope.currentQuery.isPristine = true;\n            $scope.currentQuery.isNewTemplate = false;\n            toastr.success($scope.currentQuery.templateID, 'Saved SPARQL template');\n            $scope.goBack();\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, `Could not save ${$scope.currentQuery.templateID} template`);\n        });\n    }\n\n    function checkIfTemplateExists() {\n        return SparqlTemplatesRestService\n            .getSparqlTemplates()\n                .success(function (data) {\n                    templateExist = data.find((templateId) => templateId === $scope.currentQuery.templateID);\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, 'Could not get SPARQL templates');\n        });\n    }\n}\n"],"sourceRoot":""}