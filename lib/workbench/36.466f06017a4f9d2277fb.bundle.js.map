{"version":3,"sources":["webpack:///./src/js/angular/utils/notifications.js","webpack:///./src/js/angular/graphexplore/controllers/graphs-config.controller.js"],"names":["Notifications","toastr","showToastMessageWithDelay","message","Promise","r","success","setTimeout","angular","module","factory","$inject","GraphConfigCtrl","$scope","$timeout","$location","$repositories","$modal","ModalService","SparqlRestService","$filter","GraphConfigRestService","AutocompleteRestService","$routeParams","RDF4JRepositoriesRestService","LocalStorageAdapter","LSKeys","page","totalPages","helpHidden","get","HIDE_GRAPH_CONFIG_HELP","toggleHelp","value","undefined","set","fixedVisualCallback","uri","label","newConfig","startIRI","startIRILabel","isDefaultGraph","sample","name","isUserGraph","getSampleName","property","extra","id","getGraphConfigSamples","data","samples","_","filter","s","revertConfig","error","getError","configName","showInvalidMsg","warning","getQueryForCurrentPage","config","query","startMode","startGraphQuery","expandQuery","resourceQuery","predicateLabelQuery","resourcePropertiesQuery","isDefined","initForConfig","checkAutocompleteStatus","getAutocompletePromise","createGraphConfig","async","url","updateGraphConfig","$on","getNamespacesPromise","getNamespaces","getActiveRepository","validateQueryWithCallback","successCallback","queryType","params","all","oneOf","validateQuery","validateCurrentPage","updateModel","goToPage","nextPage","showEditor","notoolbar","goToPreviousPage","goToNextPage","saveGraphConfig","startQueryIncludeInferred","currentQuery","inference","startQuerySameAs","sameAs","isUpdate","window","editor","getValue","trim","setQuery","setValue","updateDirty","q1","q2","queryEditorIsDirty","updateEditor","isActiveRepoOntopType","nocount","loadTab","selectTab","xhr","abort","viewMode","showPreview","outputType","runQuery","revertEditor","$watch","shared","encodeQuery","encodeURIComponent","getConfig","defaultTabConfig","resetCurrentTabConfig","currentTabConfig","pageSize","allResultsCount","resultsCount","queryExists","tabsData","tabs","saveTab","idx","i","length","findTabIndexByID","tab","saveQueryToLocal","addNewTab","callback","tabName","savedQuery","changePagination","explainRequested","toggleSampleQueries","addKnownPrefixes","getExistingTabId","querySelected","tabId","body","setLoader","getLoaderMessage","timeSeconds","Date","now","queryStartTime","timeHuman","getHumanReadableSeconds","progressMessage","extraMessage","fixSizesOnHorizontalViewModeSwitch","changeViewMode","tabID","orientationViewMode","$","remove","showHideEditor","focusQueryEditor","element","document","find","is","focus","currentQueryTab","isRunning","yasrInnerContainer","getElementById","queryIsRunning","countTimeouted","addClass","removeClass","$$phase","$apply","verticalViewParam","visibleWindowHeight","innerHeight","documentElement","clientHeight","verticalView","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","timer","cancel","yasr","container","resize","changePage","explain","executedQueryTab","getQueryType","getQueryMode","getRepositoryNamespaces","usedPrefixes","results","bindings","forEach","e","prefix","namespace","namespaces","repositoryError","finally","JSON","stringify","msg","existingTabId","item","on","$watchCollection","offset","timeFinished","timeTook","sizeDelta","css","getQueryID","attr","tabEvent","relatedTarget","target","copy","showSampleQueries","sampleQueries","getResultsDescription","getUpdateDescription","getStaleWarningMessage","controller"],"mappings":"+EAMA,SAASA,EAAcC,GACnB,MAAO,CACHC,0BASJ,SAAmCC,GAC/B,OAAO,IAAIC,QAASC,IAChBJ,EAAOK,QAAQH,GACfI,WAAWF,EAAG,SApB1BG,QACKC,OAAO,wCAAyC,IAChDC,QAAQ,gBAAiBV,GAE9BA,EAAcW,QAAU,CAAC,W,gCCJzB,kBAYA,SAASC,EAAgBC,EAAQC,EAAUC,EAAWd,EAAQe,EAAeC,EAAQC,EAAcC,EAAmBC,EAASC,EAAwBC,EAAyBC,EAAcvB,EAAewB,EAA8BC,EAAqBC,GAE5Pb,EAAOc,KAAO,EACdd,EAAOe,WAAa,EAEpBf,EAAOgB,WAAwE,IAA3DJ,EAAoBK,IAAIJ,EAAOK,wBAEnDlB,EAAOmB,WAAa,SAAUC,QACZC,IAAVD,IACAA,EAAQR,EAAoBK,IAAIJ,EAAOK,yBAE7B,IAAVE,GACAR,EAAoBU,IAAIT,EAAOK,uBAAwB,GACvDlB,EAAOgB,YAAa,IAEpBJ,EAAoBU,IAAIT,EAAOK,uBAAwB,GACvDlB,EAAOgB,YAAa,IAI5BhB,EAAOuB,oBAAsB,SAAUC,EAAKC,GACxCzB,EAAO0B,UAAUC,SAAWH,EAC5BxB,EAAO0B,UAAUE,cAAgBH,GAGrCzB,EAAO6B,eAAiB,SAAUC,GAC9B,MAAwB,YAAhBA,EAAOC,MAAsC,aAAhBD,EAAOC,MAGhD/B,EAAOgC,YAAc,SAAUF,GAC3B,OAAQ9B,EAAO6B,eAAeC,IAGlC9B,EAAOiC,cAAgB,SAAUH,EAAQI,GACrC,MAAMC,EAAQL,EAAOI,EAAW,eAChC,OAAIC,IAKOL,EAAOM,GAAK,WAAaN,EAAOC,KAAOD,EAAOC,OAI7D,MAAMM,EAAwB,WAC1B7B,EAAuB6B,wBAClB5C,SAAQ,SAAU6C,GACftC,EAAOuC,QAAUC,EAAEC,OAAOH,GAAM,SAAUI,GAEtC,OAAKA,EAAEN,IAAMpC,EAAO0B,UAAUU,KAAOM,EAAEN,KAGnCpC,EAAO2C,aAAeD,GACf,SAGhBE,OAAM,SAAUN,GACflD,EAAOwD,MAAMC,SAASP,GAAO,kEAInCQ,EAAapC,EAAaoC,WAUhC,SAASC,EAAezD,GACpBF,EAAO4D,QAAQ1D,GAkBnB,SAAS2D,EAAuBC,GAC5B,IAAIC,EAcJ,MAZyB,UAArBD,EAAOE,WAAyC,IAAhBpD,EAAOc,KACvCqC,EAAQD,EAAOG,gBACQ,IAAhBrD,EAAOc,KACdqC,EAAQD,EAAOI,YACQ,IAAhBtD,EAAOc,KACdqC,EAAQD,EAAOK,cACQ,IAAhBvD,EAAOc,KACdqC,EAAQD,EAAOM,oBACQ,IAAhBxD,EAAOc,OACdqC,EAAQD,EAAOO,yBAGZ9D,QAAQ+D,UAAUP,GAASA,EAAQ,GAG9C,SAASQ,IAsBL,SAASC,IACL5D,EAAO6D,uBAAyBpD,EAAwBmD,0BAtB5DvB,IACArC,EAAO8D,kBAAoB,WACvBtD,EAAuBsD,kBAAkB9D,EAAO0B,WAC3CjC,SAAQsE,uBACC5E,EAAcE,0BAA0B,0BAC9Ca,EAAU8D,IAAI,4BACfpB,OAAM,SAAUN,GACnBlD,EAAOwD,MAAMC,SAASP,GAAO,4CAIrCtC,EAAOiE,kBAAoB,WACvBzD,EAAuByD,kBAAkBjE,EAAO0B,WAC3CjC,SAAQsE,uBACC5E,EAAcE,0BAA0B,sBAC9Ca,EAAU8D,IAAI,4BACfpB,OAAM,SAAUN,GACnBlD,EAAOwD,MAAMC,SAASP,GAAO,0CAQrCtC,EAAOkE,IAAI,sBAAsB,WAC7BN,OAGJA,IACA5D,EAAOmE,qBAAuBxD,EAA6ByD,cAAcpE,EAAOqE,uBAEhF,MAAMC,EAA4B,SAAUC,EAAiBpB,EAAOqB,EAAWC,EAAQC,EAAKC,GACnFxB,EAGD3C,EAAuBoE,cAAczB,EAAOqB,EAAWC,EAAQC,EAAKC,GAC/DlF,SAAQ,WACL8E,OACD3B,OAAM,SAAUN,GACnBS,EAAeF,SAASP,OAN5BiC,KAWRvE,EAAO6E,oBAAsB,SAAUN,GACnCvE,EAAO8E,cAEa,IAAhB9E,EAAOc,KAC4B,SAA/Bd,EAAO0B,UAAU0B,WAAyBpD,EAAO0B,UAAUC,SAErB,UAA/B3B,EAAO0B,UAAU0B,WAA0BpD,EAAO0B,UAAU2B,gBAE7B,UAA/BrD,EAAO0B,UAAU0B,UACxBkB,EAA0BC,EAAiBvE,EAAO0B,UAAU2B,gBAAiB,SAE7EkB,IAJAxB,EAAe,qCAFfA,EAAe,6BAQI,IAAhB/C,EAAOc,KACdwD,EAA0BC,EAAiBvE,EAAO0B,UAAU4B,YAAa,YAAa,CAAC,SAChE,IAAhBtD,EAAOc,KACdwD,EAA0BC,EAAiBvE,EAAO0B,UAAU6B,cAAe,QAAS,CAAC,QAAS,GAAI,CAAC,OAAQ,QAAS,UAAW,SACxG,IAAhBvD,EAAOc,KACdwD,EAA0BC,EAAiBvE,EAAO0B,UAAU8B,oBAAqB,QAAS,CAAC,QAAS,CAAC,UAC9E,IAAhBxD,EAAOc,MACdwD,EAA0BC,EAAiBvE,EAAO0B,UAAU+B,wBAAyB,QAAS,CAAC,QAAS,CAAC,WAAY,WAI7HzD,EAAO+E,SAAW,SAAUC,GACpBhF,EAAOc,OAASkE,GAKpBhF,EAAO6E,qBAAoB,WACvB7E,EAAOiF,aACPjF,EAAOc,KAAOkE,EACdhF,EAAOkF,UAA4B,IAAhBlF,EAAOc,SAIlCd,EAAOmF,iBAAmB,WAClBnF,EAAOc,KAAO,GACdd,EAAO+E,SAAS/E,EAAOc,KAAO,IAItCd,EAAOoF,aAAe,WAClBpF,EAAO+E,SAAS/E,EAAOc,KAAO,IAGlCd,EAAOqF,gBAAkB,WACrBrF,EAAO0B,UAAU4D,0BAA4BtF,EAAOuF,aAAaC,UACjExF,EAAO0B,UAAU+D,iBAAmBzF,EAAOuF,aAAaG,OAExD1F,EAAO6E,qBAAoB,WAClB7E,EAAO0B,UAAUK,KAItB/B,EAAO2F,SAAW3F,EAAOiE,kBAAkBjE,EAAO0B,WAAa1B,EAAO8D,kBAAkB9D,EAAO0B,WAH3FqB,EAAe,mCAO3B/C,EAAO8E,YAAc,WACjB,MAAM3B,EAAQyC,OAAOC,OAAOC,WAAWC,OACJ,UAA/B/F,EAAO0B,UAAU0B,WAAyC,IAAhBpD,EAAOc,KACjDd,EAAO0B,UAAU2B,gBAAkBF,EACZ,IAAhBnD,EAAOc,KACdd,EAAO0B,UAAU4B,YAAcH,EACR,IAAhBnD,EAAOc,KACdd,EAAO0B,UAAU6B,cAAgBJ,EACV,IAAhBnD,EAAOc,KACdd,EAAO0B,UAAU8B,oBAAsBL,EAChB,IAAhBnD,EAAOc,OACdd,EAAO0B,UAAU+B,wBAA0BN,IAKnDnD,EAAOgG,SAAW,SAAU7C,GAExByC,OAAOC,OAAOI,SAAS9C,GAAgB,MAG3CnD,EAAOkG,YAAc,WACjB,GAAIlG,EAAO2C,aAAc,CACrB,MAAMwD,EAAKlD,EAAuBjD,EAAO2C,cACnCyD,EAAKR,OAAOC,OAAOC,WAAWC,OACpC/F,EAAOqG,mBAAqBF,IAAOC,IAM3CpG,EAAOsG,aAAe,WAClBrG,GAAS,WACLD,EAAOuF,aAAapC,MAAQF,EAAuBjD,EAAO0B,WAEtDvB,EAAcoG,0BACdvG,EAAOwG,SAAU,GAErBxG,EAAOuF,aAAaC,UAAYxF,EAAO0B,UAAU4D,0BACjDtF,EAAOuF,aAAaG,OAAS1F,EAAO0B,UAAU+D,iBAC9CgB,EAAQzG,EAAOuF,aAAanD,IAC5BsE,EAAU1G,EAAOuF,aAAanD,MAC/B,MAIPpC,EAAOiF,WAAa,WACZW,OAAOC,QAAUD,OAAOC,OAAOc,KAC/Bf,OAAOC,OAAOc,IAAIC,QAEtB5G,EAAO6G,SAAW,QAGtB7G,EAAO8G,YAAc,WAGjB9G,EAAOuF,aAAawB,WAAa,QACjC/G,EAAOgH,YAGXhH,EAAOiH,aAAe,WAClBjH,EAAOgG,SAAS/C,EAAuBjD,EAAO2C,gBAIlD3C,EAAOkH,OAAO,uBAAuB,SAAU9F,GAC7B,UAAVA,GACAnB,GAAS,WACLD,EAAOsG,iBACR,MAKXtG,EAAOkH,OAAO,QAAQ,SAAU9F,IACO,UAA/BpB,EAAO0B,UAAU0B,WAAyBhC,EAAQ,IAClDnB,GAAS,WACLD,EAAOiF,aACPjF,EAAOsG,iBACR,MAvOftG,EAAO0B,UAAY,CAAC4D,2BAA2B,EAAMG,kBAAkB,GACvEzF,EAAO0B,UAAU0B,UAAY,SAC7BpD,EAAO2F,UAAW,EAClB3F,EAAOmH,QAAS,EAEhBnH,EAAOoH,YAAc,SAAUjE,GAC3B,OAAOkE,mBAAmBlE,IAO1BL,GACA9C,EAAO2F,UAAW,EAClBnF,EAAuB8G,UAAUxE,GAC5BrD,SAAQ,SAAU6C,GACftC,EAAO0B,UAAYY,EACnBqB,OAEHf,OAAM,SAAUN,GACblD,EAAOwD,MAAMC,SAASP,GAAO,kCAAoCQ,QAGzE9C,EAAO2F,UAAW,EAClBhC,KAsNJ,MAAM4D,EAAmB,CACrBnF,GAAI,IACJL,KAAM,GACNoB,MAAO,kDAGPqC,UAAWxF,EAAO0B,UAAU4D,0BAC5BI,OAAQ1F,EAAO0B,UAAU+D,kBAG7BzF,EAAOwH,sBAAwB,WAC3BxH,EAAOyH,iBAAmB,CACtBC,SAAU,IACV5G,KAAM,EACN6G,gBAAiB,EACjBC,aAAc,IAItB5H,EAAO6H,aAAc,EAErB7H,EAAOwH,wBAEPxH,EAAO8H,SAAW9H,EAAO+H,KAAO,CAACR,GAGjCvH,EAAOgI,QAyRP,SAAiB5F,GACb,MAAM6F,EAdV,SAA0B7F,GACtB,IAAK,IAAI8F,EAAI,EAAGA,EAAIlI,EAAO8H,SAASK,OAAQD,IAAK,CAE7C,GADYlI,EAAO8H,SAASI,GACpB9F,KAAOA,EACX,OAAO8F,GAUHE,CAAiBhG,GAE7B,QAAYf,IAAR4G,EACA,MAAO,GAEX,MAAMI,EAAMrI,EAAO8H,SAASG,GAE5B,OADAjI,EAAOsI,iBAAiBD,GACjBA,GAhSXrI,EAAOyG,QAAUA,EACjBzG,EAAOuI,UAoSP,SAAmBC,EAAUC,EAASC,KAjStC1I,EAAOgH,SAAWA,EAClBhH,EAAOoE,cAAgBA,EACvBpE,EAAO2I,iBAuMP,WACI3B,GAAS,EAAMhH,EAAO4I,mBAvM1B5I,EAAO6I,oBAmNP,aAlNA7I,EAAO8I,iBAAmBA,EAC1B9I,EAAO+I,iBAAmBA,EAC1B/I,EAAOgJ,cAwOP,SAAuB7F,GACnB,MAAM8F,EAAQF,EAAiB5F,GAC/BnD,EAAO6I,sBACFlJ,QAAQ+D,UAAUuF,GAGnBvC,EAAUuC,GAFVjJ,EAAOuI,UAAU,KAAMpF,EAAMpB,KAAMoB,EAAM+F,OA3OjDlJ,EAAOsI,iBAAmBA,EAE1BtI,EAAOmJ,UAAYA,EACnBnJ,EAAOoJ,iBAmCP,WACI,MAAMC,GAAeC,KAAKC,MAAQvJ,EAAOwJ,gBAAkB,IACrDC,EAAYzJ,EAAO0J,wBAAwBL,GACjD,IAAI/J,EAAU,GAGVA,EADAU,EAAO2J,gBACG3J,EAAO2J,gBAAkB,OAASF,EAElC,uBAAyBA,EAEnCzJ,EAAO4J,cAAgBP,EAAc,KACrC/J,GAAW,KAAOU,EAAO4J,cAG7B,OAAOtK,GA9CXU,EAAO6J,mCAAqCA,EAC5C7J,EAAO8J,eAsGP,SAAwBC,GACpB/J,EAAO6G,SAAW,OAClB7G,EAAOgK,qBAAuBhK,EAAOgK,oBACrCH,IACAI,EAAE,sBAAsBC,SACxBD,EAAE,iBAAiBC,SACnBjK,GAAS,WACLwG,EAAQsD,GACRrD,EAAUqD,KACX,MA9GP/J,EAAOmK,eAAiBA,EACxBnK,EAAOoK,iBAoHP,WACSzK,QAAQ0K,QAAQC,UAAUC,KAAK,mBAAmBC,GAAG,WACtD7K,QAAQ0K,QAAQC,UAAUC,KAAK,oCAAoCE,SArH3EzK,EAAOgK,qBAAsB,EAGHhK,EAAOqE,sBAEjC,SAASiE,EAAiBoC,IAG1B,SAASvB,EAAUwB,EAAWhB,EAAiBC,GAC3C,MAAMgB,EAAqBjL,QAAQ0K,QAAQC,SAASO,eAAe,eACnE7K,EAAO8K,eAAiBH,EACpBA,GACA3K,EAAOwJ,eAAiBF,KAAKC,MAC7BvJ,EAAO+K,gBAAiB,EACxB/K,EAAO2J,gBAAkBA,EACzB3J,EAAO4J,aAAeA,EACtBgB,EAAmBI,SAAS,UAE5BhL,EAAO2J,gBAAkB,GACzB3J,EAAO4J,aAAe,GACtBgB,EAAmBK,YAAY,SAGZ,OAAnBjL,EAAOkL,SACPlL,EAAOmL,SAuBf,SAAStB,EAAmCuB,GACxC,SAASC,IACL,OAAOzF,OAAO0F,aAAehB,SAASiB,gBAAgBC,cAAgBlB,SAASpB,KAAKsC,cAAgB,EAGxG,MACMC,EAAeL,EACrB,GAAKpL,EAAOgK,oBAuBL,CACH,GAAwB,SAApBhK,EAAO6G,SAAqB,CAC5B,IAAI6E,EAAYL,IAAyBf,SAASqB,cA3BxB,oBA2BiEC,wBAA2B,IACtHF,GAAa,GACbpB,SAASqB,cA7BiB,oBA6BwBE,MAAMC,OAASJ,EAAY,UAE7E1L,EAAO+L,UAAY,GACnBzB,SAASqB,cAhCiB,oBAgCwBE,MAAMC,OAAS,GAErExB,SAASO,eAAe,QAAQgB,MAAMG,UAAY,QA5BlD,GAHAhM,EAAO+L,UAAY,CAACE,aAAc,GAAIC,YAAa,GAG/CtG,OAAOC,QAAUyE,SAASqB,cANA,oBAM0C,CACpE,IAAID,EAAYL,IAAyBf,SAASqB,cAPxB,oBAOiEC,wBAA2B,IACtHF,GAAa,GACbpB,SAASqB,cATiB,oBASwBE,MAAMC,OAASJ,EAAY,KAC7EpB,SAASO,eAAe,QAAQgB,MAAMG,UAAYN,EAAY,SAC3D,CACH,IAAIS,EAEAA,EAAQlM,EADRwL,EACiB,WACbzL,EAAO6J,mCAAmC4B,IAG7BzL,EAAO6J,mCAFrB,KAKP7J,EAAOkE,IAAI,YAAY,WACnBjE,EAASmM,OAAOD,MAcxBvG,OAAOyG,MAAQzG,OAAOyG,KAAKC,WAC3BrM,GAAS,WACL2F,OAAOyG,KAAKC,UAAUC,WACvB,KAoBX,SAASpC,IACLN,GAAmC,GAcvC,SAASnD,EAAUtE,GACfnC,GAAS,WACLgK,EAAE,gBAAkB7H,EAAK,MAAMiG,IAAI,UACpC,GAIP,SAASrB,EAASwF,EAAYC,GAC1BzM,EAAO0M,iBAAmB1M,EAAOuF,aAC7BkH,GAA8C,WAAjC7G,OAAOC,OAAO8G,gBAAgE,cAAjC/G,OAAOC,OAAO8G,eACxEvN,EAAO4D,QAAQ,wDAIkB,WAAjC4C,OAAOC,OAAO+G,gBAKlB5M,EAAO4I,iBAAmB6D,EACrBzM,EAAO8K,iBACJ0B,EACAxM,EAAOyH,iBAAiBG,aAAe,EAEvC5H,EAAOwH,wBAIXxH,EAAO6G,SAAW,SACd7G,EAAOgK,qBACPhK,EAAO6J,qCAGXV,GAAU,EAAM,oBAChBvD,OAAOC,OAAO1C,UAnBd/D,EAAO4D,QAAQ,4CAuBvB,SAASoB,IAEL+E,GAAU,EAAM,wBAAyB,kHACzCxI,EAA6BkM,0BACxBpN,SAAQ,SAAU6C,GACf,MAAMwK,EAAe,GACrBxK,EAAKyK,QAAQC,SAASC,SAAQ,SAAUC,GACpCJ,EAAaI,EAAEC,OAAO/L,OAAS8L,EAAEE,UAAUhM,SAE/CpB,EAAOqN,WAAaP,KAEvBlK,OAAM,SAAUN,GACbtC,EAAOsN,gBAAkBzK,SAASP,MAErCiL,SAAQ,WAELpE,GAAU,MAqBtB,SAASL,IACLxI,EAAkBwI,iBAAiB0E,KAAKC,UAAU7H,OAAOC,OAAOC,aAC3DrG,SAAQ,SAAU6C,GACX3C,QAAQ+D,UAAUkC,OAAOC,SAAWlG,QAAQ+D,UAAUpB,IAASA,IAASsD,OAAOC,OAAOC,YACtFF,OAAOC,OAAOI,SAAS3D,MAG9BM,OAAM,SAAUN,GACb,IAAIoL,EAAM7K,SAASP,GAEnB,OADAlD,EAAOwD,MAAM8K,EAAK,wCACX,KAoBnB,SAAS3E,EAAiB5F,GACtB,IAAIwK,OAAgBtM,EAQpB,OAPA1B,QAAQsN,QAAQjN,EAAO8H,UAAU,SAAU8F,GACvC,GAAIA,EAAK7L,OAASoB,EAAMpB,MAAQ6L,EAAKzK,QAAUA,EAAM+F,KAEjD,OADAyE,EAAgBC,EAAKxL,GACdwL,KAIRD,EAjJN3N,EAAOgK,qBACRG,IA4FAnK,EAAOqE,uBACPD,IAGJpE,EAAOkE,IAAI,YAAY,WACnB0B,OAAOC,OAAS,KAChBD,OAAOyG,KAAO,QAqBlBpC,EAAE,YAAY4D,GAAG,SAAS,WACtB5N,GAAS,WACL6I,MACD,MAqCP9I,EAAO8N,iBAAiB,iDAAiD,WACpD9N,EAAOuF,gBAmB5B,SAASkB,EAAQrE,GACbpC,EAAO8H,SAAW,CAAC9H,EAAOuF,cAE1B,IAAI8C,EAAMrI,EAAOuF,aAEgB,MAA7BvF,EAAOuF,aAAapC,OAA+C,KAA9BnD,EAAOuF,aAAapC,MAEzDyC,OAAOC,OAAOI,SAAS,KAEvBL,OAAOC,OAAOI,SAASjG,EAAOuF,aAAapC,OAG/ClD,GAAS,WACLD,EAAOyH,iBAAmB,GAC1BzH,EAAOyH,iBAAiBjD,UAAY6D,EAAI7D,UACxCxE,EAAOyH,iBAAiBG,aAAeS,EAAIT,aAE3C5H,EAAOyH,iBAAiBsG,OAAS1F,EAAI0F,OACrC/N,EAAOyH,iBAAiBE,gBAAkBU,EAAIV,gBAC9C3H,EAAOyH,iBAAiB3G,KAAOuH,EAAIvH,KACnCd,EAAOyH,iBAAiBC,SAAWW,EAAIX,SAEvC1H,EAAOyH,iBAAiBuG,aAAe3F,EAAI2F,aAC3ChO,EAAOyH,iBAAiBwG,SAAW5F,EAAI4F,SACvCjO,EAAOyH,iBAAiByG,UAAY7F,EAAI6F,UACxClO,EAAOmL,WACR,GAGHlB,EAAE,SAASkE,IAAI,UAAW,KAG9B,SAASC,EAAW/D,GAChB,OAAOJ,EAAEI,GAASgE,KAAK,WAG3BrO,EAAOkE,IAAI,aAAa,SAAUgJ,EAAGoB,GAC7BA,EAASC,eACTvO,EAAOgI,QAAQoG,EAAWE,EAASC,gBAEvCvO,EAAOyG,QAAQ2H,EAAWE,EAASE,YAGvCxO,EAAOkE,IAAI,0BAA0B,SAAUgJ,EAAGnF,GAC9C/H,EAAO8H,SAAWC,EAClB/H,EAAO+H,KAAOA,KAIlB/H,EAAOuF,aAAe5F,QAAQ8O,KAAKlH,GAEnCvH,EAAO0O,mBAAoB,EAC3B1O,EAAO0I,WAAa,GACpB1I,EAAO2O,cAAgB,GAEvB3O,EAAO4O,sBAAwB,aAG/B5O,EAAO6O,qBAAuB,aAG9B7O,EAAO8O,uBAAyB,aAtrBpCnP,QACKC,OAAO,6DAA8D,CAClE,wCACA,gDAEHmP,WAAW,kBAAmBhP,GAEnCA,EAAgBD,QAAU,CAAC,SAAU,WAAY,YAAa,SAAU,gBAAiB,SAAU,eAAgB,oBAAqB,UAAW,yBAA0B,0BAA2B,eAAgB,gBAAiB,+BAAgC,sBAAuB","file":"36.466f06017a4f9d2277fb.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr'];\n\nfunction Notifications(toastr) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success(message);\n            setTimeout(r, 200);\n        });\n    }\n}\n","import 'angular/utils/notifications';\nimport 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.graphexplore.controllers.graphviz.config', [\n        'graphdb.framework.utils.notifications',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .controller('GraphConfigCtrl', GraphConfigCtrl);\n\nGraphConfigCtrl.$inject = ['$scope', '$timeout', '$location', 'toastr', '$repositories', '$modal', 'ModalService', 'SparqlRestService', '$filter', 'GraphConfigRestService', 'AutocompleteRestService', '$routeParams', 'Notifications', 'RDF4JRepositoriesRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction GraphConfigCtrl($scope, $timeout, $location, toastr, $repositories, $modal, ModalService, SparqlRestService, $filter, GraphConfigRestService, AutocompleteRestService, $routeParams, Notifications, RDF4JRepositoriesRestService, LocalStorageAdapter, LSKeys) {\n\n    $scope.page = 1;\n    $scope.totalPages = 5;\n\n    $scope.helpHidden = LocalStorageAdapter.get(LSKeys.HIDE_GRAPH_CONFIG_HELP) === 1;\n\n    $scope.toggleHelp = function (value) {\n        if (value === undefined) {\n            value = LocalStorageAdapter.get(LSKeys.HIDE_GRAPH_CONFIG_HELP);\n        }\n        if (value !== 1) {\n            LocalStorageAdapter.set(LSKeys.HIDE_GRAPH_CONFIG_HELP, 1);\n            $scope.helpHidden = true;\n        } else {\n            LocalStorageAdapter.set(LSKeys.HIDE_GRAPH_CONFIG_HELP, 0);\n            $scope.helpHidden = false;\n        }\n    };\n\n    $scope.fixedVisualCallback = function (uri, label) {\n        $scope.newConfig.startIRI = uri;\n        $scope.newConfig.startIRILabel = label;\n    };\n\n    $scope.isDefaultGraph = function (sample) {\n        return (sample.name === 'Minimal' || sample.name === 'Advanced');\n    };\n\n    $scope.isUserGraph = function (sample) {\n        return !$scope.isDefaultGraph(sample);\n    };\n\n    $scope.getSampleName = function (sample, property) {\n        const extra = sample[property + 'Description'];\n        if (extra) {\n            // Sample has description, use it\n            return extra;\n        } else {\n            // Sample is a copy of existing config, prepend Copy of to name\n            return sample.id ? 'Copy of ' + sample.name : sample.name;\n        }\n    };\n\n    const getGraphConfigSamples = function () {\n        GraphConfigRestService.getGraphConfigSamples()\n            .success(function (data) {\n                $scope.samples = _.filter(data, function (s) {\n                    // Skip the currently edited config from samples and store it into a revert variable\n                    if (!s.id || $scope.newConfig.id !== s.id) {\n                        return true;\n                    } else {\n                        $scope.revertConfig = s;\n                        return false;\n                    }\n                });\n            }).error(function (data) {\n                toastr.error(getError(data), 'Could not get graph configs. You may not see sample values');\n            });\n    };\n\n    const configName = $routeParams.configName;\n    $scope.newConfig = {startQueryIncludeInferred: true, startQuerySameAs: true};\n    $scope.newConfig.startMode = 'search';\n    $scope.isUpdate = false;\n    $scope.shared = false;\n\n    $scope.encodeQuery = function (query) {\n        return encodeURIComponent(query);\n    };\n\n    function showInvalidMsg(message) {\n        toastr.warning(message);\n    }\n\n    if (configName) {\n        $scope.isUpdate = true;\n        GraphConfigRestService.getConfig(configName)\n            .success(function (data) {\n                $scope.newConfig = data;\n                initForConfig();\n            })\n            .error(function (data) {\n                toastr.error(getError(data), 'Could not load config for name ' + configName);\n            });\n    } else {\n        $scope.isUpdate = false;\n        initForConfig();\n    }\n\n    function getQueryForCurrentPage(config) {\n        let query;\n\n        if (config.startMode === 'query' && $scope.page === 1) {\n            query = config.startGraphQuery;\n        } else if ($scope.page === 2) {\n            query = config.expandQuery;\n        } else if ($scope.page === 3) {\n            query = config.resourceQuery;\n        } else if ($scope.page === 4) {\n            query = config.predicateLabelQuery;\n        } else if ($scope.page === 5) {\n            query = config.resourcePropertiesQuery;\n        }\n\n        return angular.isDefined(query) ? query : '';\n    }\n\n    function initForConfig() {\n        getGraphConfigSamples();\n        $scope.createGraphConfig = function () {\n            GraphConfigRestService.createGraphConfig($scope.newConfig)\n                .success(async function () {\n                    await Notifications.showToastMessageWithDelay('Saved new graph config');\n                    $location.url('graphs-visualizations');\n                }).error(function (data) {\n                toastr.error(getError(data), 'Error! Could not create graph config');\n            });\n        };\n\n        $scope.updateGraphConfig = function () {\n            GraphConfigRestService.updateGraphConfig($scope.newConfig)\n                .success(async function () {\n                    await Notifications.showToastMessageWithDelay('Graph config saved');\n                    $location.url('graphs-visualizations');\n                }).error(function (data) {\n                toastr.error(getError(data), 'Error! Could not save graph config');\n            });\n        };\n\n        function checkAutocompleteStatus() {\n            $scope.getAutocompletePromise = AutocompleteRestService.checkAutocompleteStatus();\n        }\n\n        $scope.$on('autocompleteStatus', function() {\n            checkAutocompleteStatus();\n        });\n\n        checkAutocompleteStatus();\n        $scope.getNamespacesPromise = RDF4JRepositoriesRestService.getNamespaces($scope.getActiveRepository());\n\n        const validateQueryWithCallback = function (successCallback, query, queryType, params, all, oneOf) {\n            if (!query) {\n                successCallback();\n            } else {\n                GraphConfigRestService.validateQuery(query, queryType, params, all, oneOf)\n                    .success(function () {\n                        successCallback();\n                    }).error(function (data) {\n                    showInvalidMsg(getError(data));\n                });\n            }\n        };\n\n        $scope.validateCurrentPage = function (successCallback) {\n            $scope.updateModel();\n\n            if ($scope.page === 1) {\n                if ($scope.newConfig.startMode === 'node' && !$scope.newConfig.startIRI) {\n                    showInvalidMsg('Please select start node.');\n                } else if ($scope.newConfig.startMode === 'query' && !$scope.newConfig.startGraphQuery) {\n                    showInvalidMsg('Please provide start graph query.');\n                } else if ($scope.newConfig.startMode === 'query') {\n                    validateQueryWithCallback(successCallback, $scope.newConfig.startGraphQuery, 'graph')\n                } else {\n                    successCallback();\n                }\n            } else if ($scope.page === 2) {\n                validateQueryWithCallback(successCallback, $scope.newConfig.expandQuery, 'construct', ['node'])\n            } else if ($scope.page === 3) {\n                validateQueryWithCallback(successCallback, $scope.newConfig.resourceQuery, 'tuple', ['node'], [], ['type', 'label', 'comment', 'rank']);\n            } else if ($scope.page === 4) {\n                validateQueryWithCallback(successCallback, $scope.newConfig.predicateLabelQuery, 'tuple', ['edge'], ['label']);\n            } else if ($scope.page === 5) {\n                validateQueryWithCallback(successCallback, $scope.newConfig.resourcePropertiesQuery, 'tuple', ['node'], ['property', 'value']);\n            }\n        };\n\n        $scope.goToPage = function (nextPage) {\n            if ($scope.page === nextPage) {\n                // already there\n                return;\n            }\n\n            $scope.validateCurrentPage(function () {\n                $scope.showEditor();\n                $scope.page = nextPage;\n                $scope.notoolbar = $scope.page !== 1;\n            });\n        };\n\n        $scope.goToPreviousPage = function () {\n            if ($scope.page > 1) {\n                $scope.goToPage($scope.page - 1);\n            }\n        };\n\n        $scope.goToNextPage = function () {\n            $scope.goToPage($scope.page + 1);\n        };\n\n        $scope.saveGraphConfig = function () {\n            $scope.newConfig.startQueryIncludeInferred = $scope.currentQuery.inference;\n            $scope.newConfig.startQuerySameAs = $scope.currentQuery.sameAs;\n\n            $scope.validateCurrentPage(function () {\n                if (!$scope.newConfig.name) {\n                    showInvalidMsg('Please provide config name.');\n                    return;\n                }\n                $scope.isUpdate ? $scope.updateGraphConfig($scope.newConfig) : $scope.createGraphConfig($scope.newConfig);\n            });\n        };\n\n        $scope.updateModel = function () {\n            const query = window.editor.getValue().trim();\n            if ($scope.newConfig.startMode === 'query' && $scope.page === 1) {\n                $scope.newConfig.startGraphQuery = query;\n            } else if ($scope.page === 2) {\n                $scope.newConfig.expandQuery = query;\n            } else if ($scope.page === 3) {\n                $scope.newConfig.resourceQuery = query;\n            } else if ($scope.page === 4) {\n                $scope.newConfig.predicateLabelQuery = query;\n            } else if ($scope.page === 5) {\n                $scope.newConfig.resourcePropertiesQuery = query;\n            }\n        };\n\n        // Called when user clicks on a sample query\n        $scope.setQuery = function (query) {\n            // Hack for YASQE bug\n            window.editor.setValue(query ? query : ' ');\n        };\n\n        $scope.updateDirty = function () {\n            if ($scope.revertConfig) {\n                const q1 = getQueryForCurrentPage($scope.revertConfig);\n                const q2 = window.editor.getValue().trim();\n                $scope.queryEditorIsDirty = q1 !== q2;\n            }\n        };\n\n        // Updates the position of the query editor to match the current div placeholder\n        // and sets the editor's query to the relevant query from the model.\n        $scope.updateEditor = function () {\n            $timeout(function () {\n                $scope.currentQuery.query = getQueryForCurrentPage($scope.newConfig);\n                // // Check for ontop repository and override nocount property (it's default value is false)\n                if ($repositories.isActiveRepoOntopType()) {\n                    $scope.nocount = true;\n                }\n                $scope.currentQuery.inference = $scope.newConfig.startQueryIncludeInferred;\n                $scope.currentQuery.sameAs = $scope.newConfig.startQuerySameAs;\n                loadTab($scope.currentQuery.id);\n                selectTab($scope.currentQuery.id);\n            }, 100);\n\n        };\n\n        $scope.showEditor = function () {\n            if (window.editor && window.editor.xhr) {\n                window.editor.xhr.abort();\n            }\n            $scope.viewMode = 'yasr';\n        };\n\n        $scope.showPreview = function () {\n            // For some reason YASR gets confused and sets this to rawResponse\n            // if we execute a CONSTRUCT and then a SELECT. This makes sure it's always table.\n            $scope.currentQuery.outputType = 'table';\n            $scope.runQuery();\n        };\n\n        $scope.revertEditor = function () {\n            $scope.setQuery(getQueryForCurrentPage($scope.revertConfig));\n        };\n\n        // Trigger for showing the editor and moving it to the right position\n        $scope.$watch('newConfig.startMode', function (value) {\n            if (value === 'query') {\n                $timeout(function () {\n                    $scope.updateEditor();\n                }, 0);\n            }\n        });\n\n        // Trigger for showing the editor and moving it to the right position\n        $scope.$watch('page', function (value) {\n            if ($scope.newConfig.startMode === 'query' || value > 1) {\n                $timeout(function () {\n                    $scope.showEditor();\n                    $scope.updateEditor();\n                }, 0);\n            }\n        });\n    }\n\n    // DOWN HERE WE KEEP EVERYTHING PURELY QUERY EDITOR (MOSTLY BORROWED FROM query-editor.controller.js)\n    // But Why? Can't we reuse it instead of borrow?\n\n    const defaultTabConfig = {\n        id: '1',\n        name: '',\n        query: 'select * where { \\n' +\n        '\\t?s ?p ?o .\\n' +\n        '} limit 100 \\n',\n        inference: $scope.newConfig.startQueryIncludeInferred,\n        sameAs: $scope.newConfig.startQuerySameAs\n    };\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 100, // page limit 100 as this is only used for preview\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    $scope.tabsData = $scope.tabs = [defaultTabConfig];\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = true;\n\n    // start of repository actions\n    let backendRepositoryID = $scope.getActiveRepository();\n\n    function saveQueryToLocal(currentQueryTab) {\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = 'Running operation...' + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalViewParam) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        const codemirrorWrapperSelector = '.CodeMirror-wrap';\n        const verticalView = verticalViewParam;\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector(codemirrorWrapperSelector)) {\n                let newHeight = visibleWindowHeight() - (document.querySelector(codemirrorWrapperSelector).getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector(codemirrorWrapperSelector).style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView)\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector(codemirrorWrapperSelector).getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector(codemirrorWrapperSelector).style.height = newHeight + 'px';\n            } else {\n                $scope.noPadding = {};\n                document.querySelector(codemirrorWrapperSelector).style.height = '';\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode(tabID) {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        fixSizesOnHorizontalViewModeSwitch();\n        $('.dataTables_filter').remove();\n        $('.resultsTable').remove();\n        $timeout(function () {\n            loadTab(tabID);\n            selectTab(tabID);\n        }, 100);\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(':focus')) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function deleteCachedSparqlResults() {\n    }\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (explain && !(window.editor.getQueryType() === 'SELECT' || window.editor.getQueryType() === 'CONSTRUCT')) {\n            toastr.warning('Explain only works with SELECT or CONSTRUCT queries.');\n            return;\n        }\n\n        if (window.editor.getQueryMode() === 'update') {\n            toastr.warning('Cannot execute updates from this editor.');\n            return;\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            // Hides the editor and shows the yasr results\n            $scope.viewMode = 'editor';\n            if ($scope.orientationViewMode) {\n                $scope.fixSizesOnHorizontalViewModeSwitch()\n            }\n\n            setLoader(true, 'Evaluating query');\n            window.editor.query();\n        }\n    }\n\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    if ($scope.getActiveRepository()) {\n        getNamespaces();\n    }\n\n    $scope.$on('$destroy', function () {\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n    }\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                let msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n        if (!angular.isDefined(tabId)) {\n            $scope.addNewTab(null, query.name, query.body);\n        } else {\n            selectTab(tabId);\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        angular.forEach($scope.tabsData, function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n\n        return existingTabId;\n    }\n\n    // end of query operations\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    $scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function () {\n        saveQueryToLocal($scope.currentQuery);\n    });\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    let maxID = 1;\n\n    function addNewTab(callback, tabName, savedQuery) {\n    }\n\n    function loadTab(id) {\n        $scope.tabsData = [$scope.currentQuery];\n\n        let tab = $scope.currentQuery;\n\n        if ($scope.currentQuery.query == null || $scope.currentQuery.query === '') {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query);\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        //Remove padding of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n        $scope.loadTab(getQueryID(tabEvent.target));\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = angular.copy(defaultTabConfig);\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n\n    $scope.getResultsDescription = function () {\n    };\n\n    $scope.getUpdateDescription = function () {\n    };\n\n    $scope.getStaleWarningMessage = function () {\n    }\n\n}\n"],"sourceRoot":""}