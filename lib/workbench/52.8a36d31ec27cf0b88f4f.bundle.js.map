{"version":3,"sources":["webpack:///./src/js/angular/explore/statements.service.js"],"names":["StatementsService","transformToTrig","statements","data","contexts","i","length","statement","undefined","context","_","trim","angular","isUndefined","cstatement","push","ckeys","Object","keys","key","value","j","subject","predicate","object","type","datatype","lang","buildStatements","res","uri","isEmpty","graph","predicates","objects","k","graphs","getDatatypeOptions","label","module","factory","$inject"],"mappings":"2EAMA,SAASA,IAoLL,MAAO,CACHC,gBApLJ,SAAyBC,GACrB,IAAIC,EAAO,GACX,MAAMC,EAAW,GAEjB,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAWI,OAAQD,IAAK,CACxC,MAAME,EAAYL,EAAWG,GAM7B,QAL0BG,IAAtBD,EAAUE,QACVF,EAAUE,QAAU,GAEpBF,EAAUE,QAAUC,EAAEC,KAAKJ,EAAUE,SAErCG,QAAQC,YAAYT,EAASG,EAAUE,UAAW,CAClD,MAAMK,EAAa,GACnBA,EAAWC,KAAKR,GAChBH,EAASG,EAAUE,SAAWK,OAE9BV,EAASG,EAAUE,SAASM,KAAKR,GAIzC,MAAMS,EAAQC,OAAOC,KAAKd,GAC1B,IAAK,IAAIC,EAAI,EAAGA,EAAIW,EAAMV,OAAQD,IAAK,CACnC,MAAMc,EAAMH,EAAMX,GAEdF,GADQ,KAARgB,EACQ,MAEA,MAAQA,EAAM,MAG1B,MAAMC,EAAQhB,EAASe,GACvB,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAMd,OAAQe,IAAK,CACnC,MAAMd,EAAYa,EAAMC,GACxBlB,GAAQ,QAAUI,EAAUe,QAAU,MAAQf,EAAUgB,UAAY,KACtC,QAA1BhB,EAAUiB,OAAOC,KACjBtB,GAAQ,IAAMI,EAAUiB,OAAOJ,MAAQ,MAEvCjB,GAAQ,IAAMI,EAAUiB,OAAOJ,MAAQ,KAAOb,EAAUiB,OAAOE,SAAW,MAAQnB,EAAUiB,OAAOE,SAAW,IAAOnB,EAAUiB,OAAOG,KAAO,IAAMpB,EAAUiB,OAAOG,KAAO,IAAO,KAI1LxB,GAAQ,MAGZ,OAAOA,GA0IPyB,gBAvIJ,SAAyBC,EAAKC,GAC1B,MAAM5B,EAAa,GACnB,IAAKQ,EAAEqB,QAAQF,EAAI1B,MAAO,CACtB,MAAM6B,EAAQH,EAAI1B,KAAK2B,GACjBG,EAAahB,OAAOC,KAAKc,GAC/B,IAAK,IAAI3B,EAAI,EAAGA,EAAI4B,EAAW3B,OAAQD,IAAK,CACxC,MAAMkB,EAAYU,EAAW5B,GACvB6B,EAAUF,EAAMT,GACtB,IAAK,IAAIF,EAAI,EAAGA,EAAIa,EAAQ5B,OAAQe,IAAK,CACrC,MAAMG,EAASU,EAAQb,GACvB,IAAK,IAAIc,EAAI,EAAGA,EAAIX,EAAOY,OAAO9B,OAAQ6B,IAAK,CAC3C,IAAI1B,EAAUe,EAAOY,OAAOD,GACZ,qCAAZ1B,IAEAA,EAAU,IAEVe,EAAOG,OACPH,EAAOE,SAAW,IAEjBF,EAAOE,WACRF,EAAOE,SAAW,IAEtBxB,EAAWa,KAAK,CACZO,QAASQ,EACTP,UAAWA,EACXC,OAAQ,CACJJ,MAAOI,EAAOJ,MACdK,KAAMD,EAAOC,KACbC,SAAUF,EAAOE,SACjBC,KAAMH,EAAOG,MAEjBlB,QAASA,OAM7B,OAAOP,GAmGPmC,mBAhGJ,WACI,MAAO,CACH,CACIjB,MAAO,GACPkB,MAAO,UACR,CACClB,MAAO,2CACPkB,MAAO,WACR,CACClB,MAAO,2CACPkB,MAAO,WACR,CACClB,MAAO,2CACPkB,MAAO,WACR,CACClB,MAAO,0CACPkB,MAAO,UACR,CACClB,MAAO,yCACPkB,MAAO,SACR,CACClB,MAAO,wCACPkB,MAAO,QACR,CACClB,MAAO,wCACPkB,MAAO,QACR,CACClB,MAAO,4CACPkB,MAAO,aACR,CACClB,MAAO,wCACPkB,MAAO,QACR,CACClB,MAAO,yCACPkB,MAAO,SACR,CACClB,MAAO,uCACPkB,MAAO,OACR,CACClB,MAAO,wCACPkB,MAAO,QACR,CACClB,MAAO,gDACPkB,MAAO,iBACR,CACClB,MAAO,iDACPkB,MAAO,kBACR,CACClB,MAAO,+CACPkB,MAAO,gBACR,CACClB,MAAO,gDACPkB,MAAO,iBACR,CACClB,MAAO,mDACPkB,MAAO,oBACR,CACClB,MAAO,sDACPkB,MAAO,wBACR,CACClB,MAAO,mDACPkB,MAAO,oBACR,CACClB,MAAO,sDACPkB,MAAO,wBACR,CACClB,MAAO,yCACPkB,MAAO,SACR,CACClB,MAAO,0CACPkB,MAAO,UACR,CACClB,MAAO,wCACPkB,MAAO,QACR,CACClB,MAAO,8CACPkB,MAAO,cACR,CACClB,MAAO,6CACPkB,MAAO,aACR,CACClB,MAAO,4CACPkB,MAAO,YACR,CACClB,MAAO,6CACPkB,MAAO,cACR,CACClB,MAAO,gDACPkB,MAAO,oBArLvB1B,QACK2B,OAAO,qCAAsC,IAC7CC,QAAQ,oBAAqBxC,GAElCA,EAAkByC,QAAU","file":"52.8a36d31ec27cf0b88f4f.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.explore.services', [])\n    .factory('StatementsService', StatementsService);\n\nStatementsService.$inject = [];\n\nfunction StatementsService() {\n    function transformToTrig(statements) {\n        let data = '';\n        const contexts = {};\n\n        for (let i = 0; i < statements.length; i++) {\n            const statement = statements[i];\n            if (statement.context === undefined) {\n                statement.context = '';\n            } else {\n                statement.context = _.trim(statement.context);\n            }\n            if (angular.isUndefined(contexts[statement.context])) {\n                const cstatement = [];\n                cstatement.push(statement);\n                contexts[statement.context] = cstatement;\n            } else {\n                contexts[statement.context].push(statement);\n            }\n        }\n\n        const ckeys = Object.keys(contexts);\n        for (let i = 0; i < ckeys.length; i++) {\n            const key = ckeys[i];\n            if (key === '') {\n                data += '\\n{';\n            } else {\n                data += '\\n<' + key + '> {';\n            }\n\n            const value = contexts[key];\n            for (let j = 0; j < value.length; j++) {\n                const statement = value[j];\n                data += '\\n\\t<' + statement.subject + '> <' + statement.predicate + '> ';\n                if (statement.object.type === 'uri') {\n                    data += '<' + statement.object.value + '> .';\n                } else {\n                    data += '\"' + statement.object.value + '\"' + (statement.object.datatype ? '^^<' + statement.object.datatype + '>' : (statement.object.lang ? '@' + statement.object.lang : '')) + ' .';\n                }\n            }\n\n            data += '\\n}';\n        }\n\n        return data;\n    }\n\n    function buildStatements(res, uri) {\n        const statements = [];\n        if (!_.isEmpty(res.data)) {\n            const graph = res.data[uri];\n            const predicates = Object.keys(graph);\n            for (let i = 0; i < predicates.length; i++) {\n                const predicate = predicates[i];\n                const objects = graph[predicate];\n                for (let j = 0; j < objects.length; j++) {\n                    const object = objects[j];\n                    for (let k = 0; k < object.graphs.length; k++) {\n                        let context = object.graphs[k];\n                        if (context === 'http://www.ontotext.com/explicit') {\n                            // Statements in the default context are special\n                            context = '';\n                        }\n                        if (object.lang) {\n                            object.datatype = '';\n                        }\n                        if (!object.datatype) {\n                            object.datatype = '';\n                        }\n                        statements.push({\n                            subject: uri,\n                            predicate: predicate,\n                            object: {\n                                value: object.value,\n                                type: object.type,\n                                datatype: object.datatype,\n                                lang: object.lang\n                            },\n                            context: context\n                        });\n                    }\n                }\n            }\n        }\n        return statements;\n    }\n\n    function getDatatypeOptions() {\n        return [\n            {\n                value: '',\n                label: 'string'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#boolean',\n                label: 'boolean'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#decimal',\n                label: 'decimal'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#integer',\n                label: 'integer'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#double',\n                label: 'double'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#float',\n                label: 'float'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#date',\n                label: 'date'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#time',\n                label: 'time'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#dateTime',\n                label: 'date time'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#byte',\n                label: 'byte'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#short',\n                label: 'short'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#int',\n                label: 'int'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#long',\n                label: 'long'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#unsignedByte',\n                label: 'unsigned byte'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#unsignedShort',\n                label: 'unsigned short'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#unsignedInt',\n                label: 'unsigned int'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#unsignedLong',\n                label: 'unsigned long'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#positoveInteger',\n                label: 'positive integer'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger',\n                label: 'non-negative integer'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#negativeInteger',\n                label: 'negative integer'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger',\n                label: 'non-positive integer'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#gYear',\n                label: 'gYear'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#gMonth',\n                label: 'gMonth'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#gDay',\n                label: 'gDay'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#gYearMonth',\n                label: 'gYearMonth'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#gMonthDay',\n                label: 'gMonthDay'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#duration',\n                label: 'duration'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#hexBinary',\n                label: 'hex binary'\n            }, {\n                value: 'http://www.w3.org/2001/XMLSchema#base64Binary',\n                label: 'base64 binary'\n            }\n        ];\n    }\n\n    return {\n        transformToTrig: transformToTrig,\n        buildStatements: buildStatements,\n        getDatatypeOptions: getDatatypeOptions\n    };\n}\n"],"sourceRoot":""}