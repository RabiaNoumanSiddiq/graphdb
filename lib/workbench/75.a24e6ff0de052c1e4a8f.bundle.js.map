{"version":3,"sources":["webpack:///./src/js/angular/queries/controllers.js"],"names":["queriesCtrl","angular","module","controller","$scope","$modal","toastr","$interval","$repositories","$jwtAuth","ModalService","MonitoringRestService","loader","stringLimit","expanded","jolokiaError","parser","document","createElement","parseNode","node","shortUrl","indexOf","href","hostname","ip","blocks","split","i","sequence","length","parseInt","containsIPV4","port","match","getQueries","getQueriesRunning","paused","getActiveRepository","monitorQuery","success","data","newQueries","noQueries","queries","parsedNode","trackId","noActiveRepository","error","getError","timer","isActiveRepoOntopType","$on","cancel","deleteQueryHttp","queryId","deleteQuery","msg","abortQuery","openSimpleModal","title","message","warning","result","then","downloadQuery","filename","link","encodeURIComponent","isAuthenticated","getAuthToken","window","open","toggleQueryExpanded","$modalInstance","ok","close","dismiss"],"mappings":"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","file":"75.a24e6ff0de052c1e4a8f.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/rest/monitoring.rest.service';\n\nconst queriesCtrl = angular.module('graphdb.framework.jmx.queries.controllers', [\n    'ui.bootstrap',\n    'toastr',\n    'graphdb.framework.rest.monitoring.service'\n]);\n\nqueriesCtrl.controller('QueriesCtrl', ['$scope', '$modal', 'toastr', '$interval', '$repositories', '$jwtAuth', 'ModalService', 'MonitoringRestService',\n    function ($scope, $modal, toastr, $interval, $repositories, $jwtAuth, ModalService, MonitoringRestService) {\n\n        $scope.loader = true;\n        $scope.stringLimit = 500;\n        $scope.expanded = {};\n        $scope.jolokiaError = '';\n\n        function containsIPV4(ip) {\n            const blocks = ip.split('.');\n            for (let i = 0, sequence = 0; i < blocks.length; i++) {\n                if (parseInt(blocks[i], 10) >= 0 && parseInt(blocks[i], 10) <= 255) {\n                    sequence++;\n                } else {\n                    sequence = 0;\n                }\n                if (sequence === 4) {\n                    return true;\n                }\n            }\n            return false;\n        }\n\n        const parser = document.createElement('a');\n\n        // Parses a node of the kind http://host.example.com:7200/repositories/repo#NN,\n        // where NN is the track ID into an array [NN, host:7200, repo].\n        $scope.parseNode = function (node) {\n            if (node == null) {\n                return null;\n            }\n\n            let shortUrl = 'local';\n            if (node.indexOf('://localhost:') < 0 && node.indexOf('://localhost/') < 0) {\n                parser.href = node;\n                let hostname = parser.hostname;\n                if (!containsIPV4(parser.hostname)) {\n                    hostname = parser.hostname.split('.')[0];\n                }\n                shortUrl = hostname + ':' + parser.port;\n            }\n            const match = node.match(/\\/repositories\\/([^\\/]+)#(\\d+)/); // eslint-disable-line no-useless-escape\n\n            return [match[2], shortUrl, match[1]];\n        };\n\n        $scope.getQueries = function () {\n            // Skip execution if already getting from previous call, if paused, if jolokia returned an error,\n            // or if no repository is available\n            if ($scope.getQueriesRunning || $scope.paused || $scope.jolokiaError || !$repositories.getActiveRepository()) {\n                return;\n            }\n\n            $scope.getQueriesRunning = true;\n            MonitoringRestService.monitorQuery().success(function (data) {\n                const newQueries = data;\n                $scope.noQueries = newQueries.length === 0;\n\n                // Converts array to object. Angular seems to handle updates on objects better, i.e.\n                // it doesn't recreate DOM elements for queries that are already displayed.\n                $scope.queries = {};\n                for (let i = 0; i < newQueries.length; i++) {\n                    newQueries[i].parsedNode = $scope.parseNode(newQueries[i].node);\n                    $scope.queries[newQueries[i].trackId] = newQueries[i];\n                }\n\n                $scope.noActiveRepository = false;\n                $scope.loader = false;\n                $scope.getQueriesRunning = false;\n            }).error(function (data) {\n                $scope.jolokiaError = getError(data);\n                $scope.loader = false;\n                $scope.getQueriesRunning = false;\n            });\n        };\n\n        const timer = $interval(function () {\n            // Don't call getQueries for Ontop type repository\n            if ($repositories.isActiveRepoOntopType()) {\n                return;\n            }\n            $scope.getQueries();\n        }, 1000);\n\n        $scope.$on('$destroy', function () {\n            $interval.cancel(timer);\n        });\n\n        $scope.deleteQueryHttp = function (queryId) {\n\n            $scope.loader = true;\n            MonitoringRestService.deleteQuery(queryId).success(function () {\n                toastr.success('Abort request sent.');\n                $scope.loader = false;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error');\n\n                $scope.loader = false;\n            });\n        };\n\n        $scope.abortQuery = function (queryId) {\n            ModalService.openSimpleModal({\n                title: 'Confirm abort',\n                message: 'Are you sure you want to abort the query?',\n                warning: true\n            }).result.then(function () {\n                $scope.deleteQueryHttp(queryId);\n            });\n        };\n\n        $scope.downloadQuery = function (queryId) {\n            const filename = 'query_' + queryId + '.rq';\n            let link = 'rest/monitor/query/download?queryId=' + encodeURIComponent(queryId)\n                + '&repository=' + encodeURIComponent($repositories.getActiveRepository())\n                + '&filename=' + encodeURIComponent(filename);\n            if ($jwtAuth.isAuthenticated()) {\n                link = link + '&authToken=' + encodeURIComponent($jwtAuth.getAuthToken());\n            }\n\n            window.open(link, '_blank');\n        };\n\n        $scope.toggleQueryExpanded = function (queryId) {\n            $scope.expanded[queryId] = !$scope.expanded[queryId];\n        };\n    }]);\n\n\nqueriesCtrl.controller('DeleteQueryCtrl', ['$scope', '$modalInstance', function ($scope, $modalInstance) {\n\n    $scope.ok = function () {\n        $modalInstance.close();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}]);\n"],"sourceRoot":""}