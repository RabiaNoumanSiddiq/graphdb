{"version":3,"sources":["webpack:///./src/js/angular/utils/notifications.js","webpack:///./src/js/angular/jdbc/controllers.js"],"names":["Notifications","toastr","showToastMessageWithDelay","message","Promise","r","success","setTimeout","angular","module","factory","$inject","JdbcListCtrl","$scope","$repositories","JdbcRestService","ModalService","getSqlConfigurations","getActiveRepository","isActiveRepoOntopType","isActiveRepoFedXType","jdbcConfigurations","getJdbcConfigurations","data","error","msg","getError","$watch","deleteConfiguration","name","openSimpleModal","title","warning","result","then","deleteJdbcConfiguration","e","JdbcCreateCtrl","$location","$window","$timeout","RDF4JRepositoriesRestService","SparqlRestService","search","getNamespaces","setLoader","getRepositoryNamespaces","usedPrefixes","results","bindings","forEach","prefix","value","namespace","namespaces","repositoryError","finally","loadTab","addKnownPrefixes","page","noPadding","paddingRight","paddingLeft","sqlTypes","currentTabConfig","orientationViewMode","currentQuery","newValue","oldValue","path","timer","goBack","history","back","locationChangeListener","$on","event","isPristine","confirm","window","removeEventListener","showBeforeunloadMessage","cancel","preventDefault","confirmExit","returnValue","addEventListener","defaultTabConfig","id","query","inference","sameAs","isNewConfiguration","isRunning","progressMessage","extraMessage","yasrInnerContainer","element","document","getElementById","queryIsRunning","queryStartTime","Date","now","countTimeouted","addClass","removeClass","$$phase","$apply","tabsData","tab","editor","setValue","queryType","resultsCount","offset","allResultsCount","pageSize","timeFinished","timeTook","sizeDelta","canWriteActiveRepo","options","readOnly","setQueryFromTabConfig","tabs","copy","resetYasqeYasr","setQuery","setDirty","JSON","stringify","getValue","isDefined","getSuggestions","validateQuery","getColumnNames","columns","getColumnsTypeSuggestion","columnTypes","suggestedColumns","_","columnName","push","column_name","column_type","nullable","sparql_type","viewMode","getCellContentSQL","yasr","plugin","sparqlVar","context","replace","hasValidQuery","getQueryType","validateDefinition","length","containsUnknownColumns","validateColumns","resetCurrentTabConfig","saveTab","getJdbcConfiguration","config","goToPage","getColumnsSuggestions","save","createNewJdbcConfiguration","updateJdbcConfiguration","hasPrecision","columnType","containsColumnsWithPrecision","some","el","hasScale","containsColumnsWithScale","isLiteral","containsNonLiteralColumnsOnly","every","find","$","on","selectColumnType","prevColumnType","column","columnSuggestion","info","allowHtml","deleteColumn","index","splice","getPreview","executedQueryTab","outputType","successCallback","textStatus","jqXhr","plugins","table","getCellContent","setResponse","setPreviewResult","failCallback","sqlView","getNewSqlTablePreview","done","fail","getExistingSqlTablePreview","getTypeLabel","type","indexOf","toUpperCase","controller"],"mappings":"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","file":"39.1ecebcb5049b9908769f.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr'];\n\nfunction Notifications(toastr) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success(message);\n            setTimeout(r, 200);\n        });\n    }\n}\n","import 'angular/core/services';\nimport 'angular/core/services/repositories.service';\nimport 'angular/rest/monitoring.rest.service';\nimport 'angular/utils/notifications';\n\n\nconst modules = [\n    'ui.bootstrap',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.rest.monitoring.service',\n    'toastr'\n];\n\nangular.module('graphdb.framework.jdbc.controllers', modules, [\n    'graphdb.framework.utils.notifications'\n])\n    .controller('JdbcListCtrl', JdbcListCtrl)\n    .controller('JdbcCreateCtrl', JdbcCreateCtrl);\n\nJdbcListCtrl.$inject = ['$scope', '$repositories', 'JdbcRestService', 'toastr', 'ModalService'];\n\nfunction JdbcListCtrl($scope, $repositories, JdbcRestService, toastr, ModalService) {\n\n    $scope.getSqlConfigurations = function () {\n        // Only do this if there is an active repo that isn't an Ontop or FedX repo.\n        // Ontop and FedX repos don't support JDBC.\n        if ($repositories.getActiveRepository()\n                && !$repositories.isActiveRepoOntopType()\n                    && !$repositories.isActiveRepoFedXType()) {\n            JdbcRestService.getJdbcConfigurations().success(function (data) {\n                $scope.jdbcConfigurations = data;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not get SQL table configurations');\n            });\n        } else {\n            $scope.jdbcConfigurations = [];\n        }\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        $scope.getSqlConfigurations();\n    });\n\n    $scope.deleteConfiguration = function (name) {\n        ModalService.openSimpleModal({\n            title: 'Warning',\n            message: 'Are you sure you want to delete the SQL table configuration ' + '\\'' + name + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                JdbcRestService.deleteJdbcConfiguration(name).success(function () {\n                    $scope.getSqlConfigurations();\n                }).error(function(e) {\n                    toastr.error(getError(e), 'Could not delete SQL table');\n                });\n            });\n    };\n}\n\nJdbcCreateCtrl.$inject = ['$scope', '$location', 'toastr', '$repositories', '$window', '$timeout', 'JdbcRestService', 'RDF4JRepositoriesRestService', 'SparqlRestService', 'ModalService'];\n\nfunction JdbcCreateCtrl($scope, $location, toastr, $repositories, $window, $timeout, JdbcRestService, RDF4JRepositoriesRestService, SparqlRestService, ModalService) {\n\n    $scope.name = $location.search().name || '';\n    $scope.getNamespaces = getNamespaces;\n    $scope.setLoader = setLoader;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.page = 1;\n    $scope.noPadding = {paddingRight: 0, paddingLeft: 0};\n    $scope.sqlTypes = ['string', 'iri', 'boolean', 'byte', 'short', 'int', 'long', 'float', 'double', 'decimal', 'date', 'time', 'timestamp', 'Get suggestion...'];\n    $scope.currentTabConfig = {};\n    // This property is obligatory in order to show YASQUE and YASR properly\n    $scope.orientationViewMode = true;\n    $scope.currentQuery = {};\n\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n            $location.path('jdbc');\n        }\n    });\n\n    let timer = null;\n    $scope.goBack = function () {\n        timer = $timeout(function () {\n            $window.history.back();\n        }, 1000);\n    };\n\n    const locationChangeListener = $scope.$on('$locationChangeStart', function (event) {\n        confirmExit(event);\n    });\n\n    window.addEventListener('beforeunload', showBeforeunloadMessage);\n\n    function showBeforeunloadMessage(event) {\n        if (!$scope.currentQuery.isPristine) {\n            event.returnValue = true;\n        }\n    }\n\n    function confirmExit(event) {\n        if (!$scope.currentQuery.isPristine) {\n            if (!confirm('You have unsaved changes. Are you sure that you want to exit?')) {\n                event.preventDefault();\n            } else {\n                window.removeEventListener('beforeunload', showBeforeunloadMessage);\n                locationChangeListener();\n                $timeout.cancel(timer);\n            }\n        }\n    }\n\n    $scope.$on('$destroy', function (event) {\n        window.removeEventListener('beforeunload', showBeforeunloadMessage);\n        locationChangeListener();\n        $timeout.cancel(timer);\n    });\n\n    const defaultTabConfig = {\n        id: '1',\n        name: '',\n        query: 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n' +\n            '\\n' +\n            '# Selects two variables to use as columns\\n' +\n            'SELECT ?id ?label {\\n' +\n            '    ?id rdfs:label ?label\\n' +\n            '    # The following placeholder must be present in the query\\n' +\n            '    #!filter\\n' +\n            '}',\n        inference: true,\n        sameAs: true,\n        isNewConfiguration: true,\n        isPristine: true\n    };\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 100, // page limit 100 as this is only used for preview\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0,\n            // Hide YASR by default, show on success in callback when needed\n            queryType: ''\n        };\n    };\n\n    $scope.saveTab = function () {\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    if ($scope.name) {\n        getJdbcConfiguration($scope.name);\n    } else {\n        setQueryFromTabConfig();\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                loadTab();\n            });\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if (!$scope.currentQuery.query) {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query);\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        if (!$scope.canWriteActiveRepo()) {\n            window.editor.options.readOnly = true;\n        }\n    }\n\n    $scope.goToPage = function (page) {\n        $scope.page = page;\n        const columns = $scope.currentQuery.columns;\n        if (page === 2 && (!columns || columns.length === 0) && hasValidQuery()) {\n            $scope.getColumnsSuggestions();\n        }\n        resetYasqeYasr();\n    };\n\n    function getJdbcConfiguration(name) {\n        JdbcRestService.getJdbcConfiguration(name).success(function (config) {\n            defaultTabConfig.query = config.query;\n            defaultTabConfig.name = config.name;\n            defaultTabConfig.columns = config.columns;\n\n            defaultTabConfig.isNewConfiguration = !config.name;\n\n            setQueryFromTabConfig();\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, 'Could not get SQL table configuration');\n        });\n    }\n\n    function setQueryFromTabConfig() {\n        $scope.tabsData = $scope.tabs = [defaultTabConfig];\n        $scope.currentQuery = angular.copy(defaultTabConfig);\n\n        resetYasqeYasr();\n\n        if (window.editor) {\n            $scope.setQuery($scope.currentQuery.query);\n            loadTab();\n        }\n\n        $scope.$watch(function () {\n            return $scope.currentQuery.query;\n        }, function (newValue, oldValue) {\n            if (newValue !== oldValue) {\n                $scope.setDirty();\n            }\n        });\n    }\n\n    $scope.save = function () {\n        if (!validateDefinition()) {\n            return;\n        }\n\n        if (!$scope.currentQuery.name) {\n            toastr.error('SQL configuration name is required');\n            return;\n        }\n\n        if ($scope.currentQuery.isNewConfiguration) {\n            JdbcRestService.createNewJdbcConfiguration($scope.currentQuery).success(function () {\n                $scope.currentQuery.isPristine = true;\n                $scope.currentQuery.isNewConfiguration = false;\n                toastr.success('SQL table configuration saved');\n                $scope.goBack();\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not save SQL table configuration');\n            });\n        } else {\n            JdbcRestService.updateJdbcConfiguration($scope.currentQuery).success(function () {\n                $scope.currentQuery.isPristine = true;\n                $scope.currentQuery.isNewConfiguration = false;\n                toastr.success('SQL table configuration updated');\n                $scope.goBack();\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not save SQL table configuration');\n            });\n        }\n    };\n\n    $scope.hasPrecision = function (columnType) {\n        return columnType === 'iri' || columnType === 'string' || columnType === 'decimal';\n    };\n\n    $scope.containsColumnsWithPrecision = function (columns) {\n        return columns && columns.some((el) => $scope.hasPrecision(el.column_type));\n    };\n\n    $scope.hasScale = function (columnType) {\n        return columnType === 'decimal';\n    };\n\n    $scope.containsColumnsWithScale = function (columns) {\n        return columns && columns.some((el) => $scope.hasScale(el.column_type));\n    };\n\n    $scope.isLiteral = function (columnType) {\n        return columnType !== 'iri' && columnType !== 'unknown';\n    };\n\n    $scope.containsNonLiteralColumnsOnly = function (columns) {\n        return columns && columns.every((el) => !$scope.isLiteral(el.column_type));\n    };\n\n    $scope.containsUnknownColumns = function () {\n        return $scope.currentQuery.columns && $scope.currentQuery.columns\n            .find((el) => el.column_type === 'unknown');\n    };\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    $scope.selectColumnType = function (columnName, prevColumnType) {\n        const column = _.find($scope.currentQuery.columns, function (column) {\n            return column.column_name === columnName;\n        });\n\n        if (column.column_type === 'Get suggestion...') {\n            JdbcRestService.getColumnsTypeSuggestion($scope.currentQuery.query, [columnName]).success(function (columnSuggestion) {\n                column.column_type = columnSuggestion[columnName].column_type;\n                if (column.column_type === prevColumnType) {\n                    toastr.info('SQL type is the same after suggest: <b>' + column.column_type + '</b>',\n                        'Suggest SQL type', {allowHtml: true});\n                } else {\n                    toastr.success('SQL type set to: <b>' + column.column_type + '</b>',\n                        'Suggest SQL type', {allowHtml: true});\n                }\n                column.sparql_type = columnSuggestion[columnName].sparql_type;\n            }).error(function(e) {\n                toastr.error(getError(e), 'Could not suggest column type');\n            });\n        }\n        $scope.setDirty();\n    };\n\n    $scope.getColumnsSuggestions = function () {\n        if ($scope.currentQuery.columns && $scope.currentQuery.columns.length > 0) {\n            ModalService.openSimpleModal({\n                title: 'Warning',\n                message: 'Are you sure you want to get suggestions for all columns? This action will overwrite all column type mappings!',\n                warning: true\n            }).result\n                .then(function () {\n                    getSuggestions();\n                });\n        } else {\n            getSuggestions();\n        }\n    };\n\n    function getSuggestions() {\n        if (!validateQuery()) {\n            return;\n        }\n\n        JdbcRestService.getColumnNames($scope.currentQuery.query).success(function (columns) {\n            JdbcRestService.getColumnsTypeSuggestion($scope.currentQuery.query, columns).success(function (columnTypes) {\n                const suggestedColumns = [];\n                _.forEach(columns, function (columnName) {\n                    suggestedColumns.push({\n                        column_name: columnName,\n                        column_type: columnTypes[columnName].column_type,\n                        nullable: true,\n                        sparql_type: columnTypes[columnName].sparql_type\n                    });\n                });\n                $scope.currentQuery.columns = suggestedColumns;\n                $scope.setDirty();\n            }).error(function (e) {\n                toastr.error(getError(e), \"Could not suggest column types\");\n            });\n        }).error(function (e) {\n            toastr.error(getError(e), \"Could not suggest column names\");\n        });\n    }\n\n    $scope.deleteColumn = function (columnName, index) {\n        ModalService.openSimpleModal({\n            title: 'Warning',\n            message: 'Are you sure you want to delete the column ' + '\\'' + columnName + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                $scope.currentQuery.columns.splice(index, 1);\n                $scope.setDirty();\n            });\n    };\n\n    $scope.getPreview = function () {\n        if (!validateDefinition()) {\n            return;\n        }\n\n        $scope.executedQueryTab = $scope.currentQuery;\n\n        if (!$scope.queryIsRunning) {\n            $scope.currentQuery.outputType = 'table';\n            $scope.resetCurrentTabConfig();\n\n            setLoader(true, 'Preview of first 100 rows of table ' + $scope.name,\n                'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n\n            const successCallback = function (data, textStatus, jqXhr) {\n                setPreviewResult(data, jqXhr, textStatus);\n                setLoader(false);\n            };\n\n            const failCallback = function (data) {\n                setLoader(false);\n                toastr.error(getError(data, 0, 100), 'Could not show preview');\n            };\n\n            if ($scope.canWriteActiveRepo()) {\n                const sqlView = JSON.stringify({\n                    name: $scope.currentQuery.name,\n                    query: $scope.currentQuery.query,\n                    columns: $scope.currentQuery.columns || []\n                });\n                JdbcRestService.getNewSqlTablePreview(sqlView)\n                    .done(successCallback).fail(failCallback);\n            } else {\n                JdbcRestService.getExistingSqlTablePreview($scope.currentQuery.name)\n                    .done(successCallback).fail(failCallback);\n            }\n        }\n    };\n\n    $scope.setDirty = function () {\n        $scope.currentQuery.isPristine = false;\n    };\n\n    $scope.getTypeLabel = function (type) {\n        switch (type) {\n            case 'iri':\n                return 'VARCHAR: IRI';\n            case 'string':\n                return 'VARCHAR: String';\n            default:\n                return type.indexOf(' ') > 0 ? type : type.toUpperCase();\n        }\n    };\n\n    function resetYasqeYasr() {\n        if ($scope.page === 2) {\n            $scope.viewMode = 'editor';\n        } else {\n            $scope.viewMode = 'none';\n        }\n    }\n\n    function getCellContentSQL(yasr, plugin, bindings, sparqlVar, context) {\n        let value = bindings[sparqlVar].value;\n        value = value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        const entityHtml = \"<p class='nonUri' style='border: none; background-color: transparent; padding: 0; margin: 0'>\"\n            + value + \"</p>\";\n        return \"<div class = 'literal-cell'>\" + entityHtml + \"</div>\";\n    }\n\n\n    function setPreviewResult(data, jqXhr, textStatus) {\n        if (!data.results || !data.results.bindings || !data.results.bindings.length) {\n            // Hides YASR as it may contain previous results\n            toastr.info('The table definition produced no results', 'Preview SQL');\n        } else {\n            // Custom content extractor that won't insert \" in SQL values (since we treat them as fake literals)\n            window.yasr.plugins.table.options.getCellContent = getCellContentSQL;\n\n            // Set query type so YASR shows the results\n            $scope.currentTabConfig.queryType = 'SELECT';\n            window.yasr.setResponse(jqXhr, textStatus, null);\n        }\n    }\n\n    function hasValidQuery() {\n        return window.editor && window.editor.getQueryType() === 'SELECT';\n    }\n\n    function validateDefinition() {\n        return validateQuery() && validateColumns();\n    }\n\n    function validateQuery() {\n        if (!hasValidQuery()) {\n            toastr.error('The data query must be a SELECT query', 'Invalid query');\n            return false;\n        }\n\n        return true;\n    }\n\n    function validateColumns() {\n        if (!$scope.currentQuery.columns || !$scope.currentQuery.columns.length) {\n            toastr.error('Please define at least one column', 'Invalid columns');\n            return false;\n        }\n\n        if ($scope.containsUnknownColumns()) {\n            toastr.error('Please select SQL type for all columns', 'Invalid columns');\n            return false;\n        }\n\n        return true;\n    }\n}\n"],"sourceRoot":""}