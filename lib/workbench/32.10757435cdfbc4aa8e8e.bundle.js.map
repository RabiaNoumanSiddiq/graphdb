{"version":3,"sources":["webpack:///./src/js/angular/autocomplete/controllers.js","webpack:///./src/js/angular/autocomplete/app.js"],"names":["AutocompleteCtrl","$scope","$interval","toastr","$repositories","$modal","$timeout","AutocompleteRestService","$autocompleteStatus","timer","cancelTimer","cancel","refreshEnabledStatus","checkAutocompleteStatus","success","data","autocompleteEnabled","setAutocompleteStatus","error","getError","refreshIndexIRIs","shouldIndexIRIs","refreshIndexStatus","indexStatus","refreshLabelConfig","labelConfig","checkForPlugin","pluginFound","setLoader","loading","finally","pullStatus","$on","loader","message","loaderTimeout","loaderMessage","getLoaderMessage","toggleAutocomplete","newValue","toggleIndexIRIs","buildIndex","interruptIndexing","getDegradedReason","addLabel","editLabel","labelIri","languages","label","isNew","open","templateUrl","controller","resolve","result","then","addLabelConfig","removeLabel","removeLabelConfig","getActiveRepository","isActiveRepoOntopType","isActiveRepoFedXType","AddLabelCtrl","$modalInstance","angular","copy","ok","form","$valid","close","dismiss","setTemplate","iri","$","focus","module","$inject"],"mappings":"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","file":"32.10757435cdfbc4aa8e8e.bundle.js","sourcesContent":["import 'angular/rest/autocomplete.rest.service';\n\nconst modules = [\n    'toastr',\n    'graphdb.framework.rest.autocomplete.service'\n];\n\nangular\n    .module('graphdb.framework.autocomplete.controllers', modules)\n    .controller('AutocompleteCtrl', AutocompleteCtrl)\n    .controller('AddLabelCtrl', AddLabelCtrl);\n\nAutocompleteCtrl.$inject = ['$scope', '$interval', 'toastr', '$repositories', '$modal', '$timeout', 'AutocompleteRestService', '$autocompleteStatus'];\n\nfunction AutocompleteCtrl($scope, $interval, toastr, $repositories, $modal, $timeout, AutocompleteRestService, $autocompleteStatus) {\n\n    let timer;\n\n    function cancelTimer() {\n        if (timer) {\n            $interval.cancel(timer);\n        }\n    }\n\n    const refreshEnabledStatus = function () {\n        AutocompleteRestService.checkAutocompleteStatus()\n            .success(function (data) {\n                $scope.autocompleteEnabled = data;\n                $autocompleteStatus.setAutocompleteStatus(data);\n            }).error(function (data) {\n                toastr.error(getError(data));\n            });\n    };\n\n    const refreshIndexIRIs = function () {\n        AutocompleteRestService.refreshIndexIRIs()\n            .success(function (data) {\n                $scope.shouldIndexIRIs = data;\n            }).error(function (data) {\n                toastr.error(getError(data));\n            });\n    };\n\n    const refreshIndexStatus = function () {\n        AutocompleteRestService.refreshIndexStatus()\n            .success(function (data) {\n                $scope.indexStatus = data;\n            })\n            .error(function (data) {\n                toastr.error(getError(data));\n            });\n    };\n\n    const refreshLabelConfig = function () {\n        AutocompleteRestService.refreshLabelConfig()\n            .success(function (data) {\n                $scope.labelConfig = data;\n            }).error(function (data) {\n                toastr.error(getError(data));\n            });\n    };\n\n    const addLabelConfig = function (label) {\n        $scope.setLoader(true, 'Updating label config...');\n\n        AutocompleteRestService.addLabelConfig(label)\n            .success(function () {\n                refreshLabelConfig();\n                refreshIndexStatus();\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    const removeLabelConfig = function (label) {\n        $scope.setLoader(true, 'Updating label config...');\n\n        AutocompleteRestService.removeLabelConfig(label)\n            .success(function () {\n                refreshLabelConfig();\n                refreshIndexStatus();\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    const checkForPlugin = function () {\n        $scope.pluginFound = false;\n\n        $scope.setLoader(true);\n\n        AutocompleteRestService.checkForPlugin()\n            .success(function (data) {\n                $scope.pluginFound = data === true;\n                if ($scope.pluginFound) {\n                    refreshEnabledStatus();\n                    refreshIndexIRIs();\n                    refreshIndexStatus();\n                    refreshLabelConfig();\n                } else {\n                    $scope.autocompleteEnabled = false;\n                    $scope.loading = false;\n                }\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    const pullStatus = function () {\n        timer = $interval(function () {\n            if ($scope.autocompleteEnabled) {\n                refreshIndexStatus();\n            }\n        }, 5000);\n    };\n\n    $scope.$on(\"$destroy\", function () {\n        cancelTimer();\n    });\n\n    const init = function() {\n        if (!$repositories.getActiveRepository() ||\n                $repositories.isActiveRepoOntopType() ||\n                    $repositories.isActiveRepoFedXType()) {\n            return;\n        }\n        checkForPlugin();\n        pullStatus();\n    };\n\n    $scope.setLoader = function (loader, message) {\n        $timeout.cancel($scope.loaderTimeout);\n        if (loader) {\n            $scope.loaderTimeout = $timeout(function () {\n                $scope.loader = loader;\n                $scope.loaderMessage = message;\n            }, 300);\n        } else {\n            $scope.loader = false;\n        }\n    };\n\n    $scope.getLoaderMessage = function () {\n        return $scope.loaderMessage || 'Loading...';\n    };\n\n    $scope.toggleAutocomplete = function () {\n        const newValue = !$scope.autocompleteEnabled;\n        $scope.setLoader(true, newValue ? 'Enabling autocomplete...' : 'Disabling autocomplete...');\n\n        AutocompleteRestService.toggleAutocomplete(newValue)\n            .success(function () {\n                refreshEnabledStatus();\n                refreshIndexStatus();\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    $scope.toggleIndexIRIs = function () {\n        $scope.setLoader(true, 'Setting index IRIs...');\n\n        AutocompleteRestService.toggleIndexIRIs(!$scope.shouldIndexIRIs)\n            .success(function () {\n                refreshIndexIRIs();\n                refreshIndexStatus();\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    $scope.buildIndex = function () {\n        $scope.setLoader(true, 'Requesting index build...');\n\n        AutocompleteRestService.buildIndex()\n            .success(function () {\n                $scope.indexStatus = 'BUILDING';\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    $scope.interruptIndexing = function () {\n        $scope.setLoader(true, 'Interrupting index...');\n\n        AutocompleteRestService.interruptIndexing()\n            .success(function () {\n                refreshIndexStatus();\n            }).error(function (data) {\n                toastr.error(getError(data));\n            }).finally(function () {\n                $scope.setLoader(false);\n            });\n    };\n\n    $scope.getDegradedReason = function () {\n        return $repositories.getDegradedReason();\n    };\n\n    $scope.addLabel = function () {\n        $scope.editLabel({labelIri: '', languages: ''}, true);\n    };\n\n    $scope.editLabel = function (label, isNew) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/autocomplete/templates/modal/add-label.html',\n            controller: 'AddLabelCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        label: label,\n                        isNew: isNew\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (label) {\n            addLabelConfig(label);\n        });\n    };\n\n    $scope.removeLabel = function (label) {\n        removeLabelConfig(label);\n    };\n\n    $scope.$on('repositoryIsSet', function () {\n        cancelTimer();\n        if (!$repositories.getActiveRepository() ||\n                $repositories.isActiveRepoOntopType() ||\n                    $repositories.isActiveRepoFedXType()) {\n            return;\n        }\n        checkForPlugin();\n        pullStatus();\n    });\n\n    init();\n}\n\nAddLabelCtrl.$inject = ['$scope', '$modalInstance', '$timeout', 'data'];\n\nfunction AddLabelCtrl($scope, $modalInstance, $timeout, data) {\n    $scope.label = angular.copy(data.label);\n    $scope.isNew = data.isNew;\n\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            $modalInstance.close($scope.label);\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n\n    $scope.setTemplate = function (iri) {\n        $scope.label.labelIri = iri;\n        $timeout(function () {\n            $('#wb-autocomplete-languages').focus();\n        }, 0);\n    };\n}\n","import 'angular/autocomplete/controllers';\n\nconst modules = [\n    'ngRoute',\n    'graphdb.framework.autocomplete.controllers'\n];\n\nangular.module('graphdb.framework.autocomplete', modules);\n"],"sourceRoot":""}