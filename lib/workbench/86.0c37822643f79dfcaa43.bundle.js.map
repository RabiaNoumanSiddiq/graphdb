{"version":3,"sources":["webpack:///./src/js/angular/rest/graph-data.rest.service.js"],"names":["angular","module","factory","GraphDataRestService","$inject","CLASS_HIERARCHY_ENDPOINT","DOMAIN_RANGE_ENDPOINT","DEPENDENCIES_ENDPOINT","EXPORE_GRAPH_ENDPOINT","$http","getClassHierarchyData","graphURI","get","params","reloadClassHierarchy","doReload","getClassInstances","targetUri","getDomainRangeData","collapsed","checkDomainRangeData","head","getRelationshipsData","selectedClasses","direction","_","map","c","name","getRelationshipsClasses","getRelationshipsStatus","calculateRelationships","getPredicates","sourceClass","destinationClass","getInstanceNode","iri","getInstanceNodeLinks","getRdfsLabelAndComment","languages","extraParams","requestParams","url","method","extend","uri","headers"],"mappings":"2EAAAA,QACKC,OAAO,mDAAoD,IAC3DC,QAAQ,uBAAwBC,GAErCA,EAAqBC,QAAU,CAAC,SAEhC,MAAMC,EAA2B,uBAC3BC,EAAwB,oBACxBC,EAAwB,qBACxBC,EAAwB,sBAE9B,SAASL,EAAqBM,GAC1B,MAAO,CAEHC,sBAuBJ,SAA+BC,GAC3B,OAAOF,EAAMG,IAAIP,EAA0B,CACvCQ,OAAQ,CACJF,SAAUA,MAzBlBG,qBA8BJ,SAA8BH,GAC1B,OAAOF,EAAMG,IAAIP,EAA0B,CACvCQ,OAAQ,CACJE,UAAU,EACVJ,SAAUA,MAjClBK,kBAsCJ,SAA2BC,GACvB,OAAOR,EAAMG,IAAI,GAAGP,oBAA4C,CAC5DQ,OAAQ,CACJI,gBAtCRC,mBAmDJ,SAA4BD,EAAWE,GACnC,OAAOV,EAAMG,IAAIN,EAAuB,CACpCO,OAAQ,CACJI,YACAE,gBAtDRC,qBA0CJ,SAA8BH,GAC1B,OAAOR,EAAMY,KAAKf,EAAuB,CACrCO,OAAQ,CACJI,gBA1CRK,qBAwDJ,SAA8BC,EAAiBC,EAAWb,GACtD,OAAOF,EAAMG,IAAI,GAAGL,UAA+B,CAC/CM,OAAQ,CACJ,KAAQW,EACR,QAAWC,EAAEC,IAAIH,GAAiB,SAAUI,GACxC,OAAOA,EAAEC,QAEb,SAAYjB,MA9DpBkB,wBAmEJ,SAAiCL,EAAWb,GACxC,OAAOF,EAAMG,IAAI,GAAGL,WAAgC,CAChDM,OAAQ,CACJ,KAAQW,EACR,SAAYb,MAtEpBmB,uBA2EJ,SAAgCnB,GAC5B,OAAOF,EAAMG,IAAI,GAAGL,UAA+B,CAC/CM,OAAQ,CACJF,SAAUA,MA7ElBoB,uBAkFJ,SAAgCpB,GAC5B,OAAOF,EAAMG,IAAI,GAAGL,UAA+B,CAC/CM,OAAQ,CACJF,SAAUA,MApFlBqB,cAyFJ,SAAuBC,EAAaC,EAAkBvB,GAClD,OAAOF,EAAMG,IAAI,GAAGL,cAAmC,CACnDM,OAAQ,CACJ,KAAQoB,EACR,GAAMC,EACN,KAAQ,MACRvB,SAAUA,MA5FlBwB,gBAiGJ,SAAyBC,GACrB,OAAO3B,EAAMG,IAAI,GAAGJ,QAA6B,CAC7CK,OAAQ,CACJuB,UAnGRC,qBAwGJ,SAA8BD,GAC1B,OAAO3B,EAAMG,IAAI,GAAGJ,SAA8B,CAC9CK,OAAQ,CACJuB,UAxGRE,uBA6GJ,SAAgCrB,EAAWsB,EAAWC,GAClD,MAAMC,EAAgBD,GAAe,GACrC,OAAO/B,EAAM,CACTiC,IAAK,uBACLC,OAAQ,MACR9B,OAAQY,EAAEmB,OAAOH,EAAe,CAACI,IAAK5B,EAAWsB,cACjDO,QAAS,CACL,OAAU","file":"86.0c37822643f79dfcaa43.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.graphexplore.data.service', [])\n    .factory('GraphDataRestService', GraphDataRestService);\n\nGraphDataRestService.$inject = ['$http'];\n\nconst CLASS_HIERARCHY_ENDPOINT = 'rest/class-hierarchy';\nconst DOMAIN_RANGE_ENDPOINT = 'rest/domain-range';\nconst DEPENDENCIES_ENDPOINT = 'rest/dependencies/';\nconst EXPORE_GRAPH_ENDPOINT = 'rest/explore-graph/';\n\nfunction GraphDataRestService($http) {\n    return {\n        // class hierarchy\n        getClassHierarchyData,\n        reloadClassHierarchy,\n        getClassInstances,\n\n        // domain-range graph\n        getDomainRangeData,\n        checkDomainRangeData,\n\n        // class relationships\n        getRelationshipsData,\n        getRelationshipsClasses,\n        getRelationshipsStatus,\n        calculateRelationships,\n        getPredicates,\n\n        // instances graph\n        getInstanceNode,\n        getInstanceNodeLinks,\n\n        // common\n        getRdfsLabelAndComment\n    };\n\n    function getClassHierarchyData(graphURI) {\n        return $http.get(CLASS_HIERARCHY_ENDPOINT, {\n            params: {\n                graphURI: graphURI\n            }\n        });\n    }\n\n    function reloadClassHierarchy(graphURI) {\n        return $http.get(CLASS_HIERARCHY_ENDPOINT, {\n            params: {\n                doReload: true,\n                graphURI: graphURI\n            }\n        });\n    }\n\n    function getClassInstances(targetUri) {\n        return $http.get(`${CLASS_HIERARCHY_ENDPOINT}/class-instances`, {\n            params: {\n                targetUri\n            }\n        });\n    }\n\n    function checkDomainRangeData(targetUri) {\n        return $http.head(DOMAIN_RANGE_ENDPOINT, {\n            params: {\n                targetUri\n            }\n        });\n    }\n\n    function getDomainRangeData(targetUri, collapsed) {\n        return $http.get(DOMAIN_RANGE_ENDPOINT, {\n            params: {\n                targetUri,\n                collapsed\n            }\n        });\n    }\n\n    function getRelationshipsData(selectedClasses, direction, graphURI) {\n        return $http.get(`${DEPENDENCIES_ENDPOINT}matrix`, {\n            params: {\n                'mode': direction,\n                'classes': _.map(selectedClasses, function (c) {\n                    return c.name;\n                }),\n                'graphURI': graphURI\n            }\n        });\n    }\n\n    function getRelationshipsClasses(direction, graphURI) {\n        return $http.get(`${DEPENDENCIES_ENDPOINT}classes`, {\n            params: {\n                'mode': direction,\n                'graphURI': graphURI\n            }\n        });\n    }\n\n    function getRelationshipsStatus(graphURI) {\n        return $http.get(`${DEPENDENCIES_ENDPOINT}status`, {\n            params: {\n                graphURI: graphURI\n            }\n        });\n    }\n\n    function calculateRelationships(graphURI) {\n        return $http.get(`${DEPENDENCIES_ENDPOINT}update`, {\n            params: {\n                graphURI: graphURI\n            }\n        });\n    }\n\n    function getPredicates(sourceClass, destinationClass, graphURI) {\n        return $http.get(`${DEPENDENCIES_ENDPOINT}predicates`, {\n            params: {\n                'from': sourceClass,\n                'to': destinationClass,\n                'mode': 'all',\n                graphURI: graphURI\n            }\n        });\n    }\n\n    function getInstanceNode(iri) {\n        return $http.get(`${EXPORE_GRAPH_ENDPOINT}node`, {\n            params: {\n                iri\n            }\n        });\n    }\n\n    function getInstanceNodeLinks(iri) {\n        return $http.get(`${EXPORE_GRAPH_ENDPOINT}links`, {\n            params: {\n                iri\n            }\n        });\n    }\n\n    function getRdfsLabelAndComment(targetUri, languages, extraParams) {\n        const requestParams = extraParams || {};\n        return $http({\n            url: 'rest/explore/details',\n            method: 'GET',\n            params: _.extend(requestParams, {uri: targetUri, languages}),\n            headers: {\n                'Accept': 'application/json'\n            }\n        });\n    }\n}\n"],"sourceRoot":""}