{"version":3,"sources":["webpack:///./src/js/angular/graphexplore/controllers/rdf-class-hierarchy.controller.js"],"names":["SAFARI_IE_EDGE_CLASS_LIMIT","FIREFOX_CLASS_LIMIT","CLASS_COUNT_THRESHOLD","CLASS_COUNT_THRESHOLD_IE","RdfClassHierarchyCtlr","$scope","$rootScope","$location","$repositories","$window","toastr","GraphDataRestService","UiScrollService","RdfsLabelCommentService","$timeout","ModalService","bowser","LocalStorageAdapter","LSKeys","RDF4JRepositoriesRestService","classHierarchyData","instancesObj","instancesQueryObj","items","instancesNotFiltered","isWarningShowed","onopen","onclose","angular","noop","currentBrowserLimit","firefox","safari","msie","msedge","datasource","position","current","key","get","index","count","success","initLazyList","selectedGraph","allGraphs","initView","getActiveRepository","resolveGraphs","graphsInRepo","results","bindings","setSelectedGraphFromCache","error","data","repositoryError","getError","selGraphFromCache","some","graph","contextID","uri","set","initClassCountSlider","event","classCount","currentSliderValue","classCountSlider","options","ceil","classLimit","value","showExternalElements","floor","vertical","showSelectionBar","onChange","setNewCurrentSliderValue","CLASS_HIERARCHY_CURRENT_SLIDER_VALUE","chrome","warning","name","s","CLASS_HIERARCHY_SWITCH_PREFIXES","window","$broadcast","lastTimeWheel","$","on","e","preventDefault","stopPropagation","now","Date","getTime","originalEvent","newValue","deltaY","$apply","goToDomainRangeGraphView","selectedClass","fullName","checkDomainRangeData","response","status","CLASS_HIERARCHY_LAST_SELECTED_CLASS","hash","path","search","refreshDiagramExternalElements","replace","showClassInfoPanel","clearClassHieararchyState","hidePrefixes","CLASS_HIERARCHY_HIDE_PREFIXES","undefined","fixToolbar","hasClassHierarchy","removeClass","$watch","_","each","item","revision","adapterContainer","adapter","remain","$on","currentActiveRepository","then","getClassHierarchyData","toggleClassInfoSidePanel","getActiveRepositoryNoError","isSystemRepository","confirmReloadClassHierarchy","openSimpleModal","title","message","result","loader","hierarchyError","reloadClassHierarchy","focusOnRoot","copyToClipboard","openCopyToClipboardModal","searchedClassCallback","selected","searchedClass","query","instancesFilterFunc","inst","resolvedUri","toLowerCase","indexOf","length","reload","localNameStartIdx","lastIndexOf","substring","encodedUri","encodeURIComponent","encodedQuery","viewInstancesUri","getRdfsLabelAndComment","rdfsLabel","label","rdfsComment","comment","expanded","instancesLoader","getClassInstances","obj","type","startsWith","endsWith","absUri","absUriNonEncoded","push","instancesSearchPlaceholder","prepareDataForClassInfoSidePanel","document","ready","click","hide","chosenGraph","getSelGraphValue","isAllGraphsSelected","module","controller","$inject"],"mappings":"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","file":"58.1a264d2b5c0ad1801ee6.bundle.js","sourcesContent":["import 'angular/utils/local-storage-adapter';\n\nconst modules = [\n    'pageslide-directive',\n    'ngAnimate',\n    'ui.scroll.jqlite',\n    'ui.scroll',\n    'angucomplete-alt',\n    'rzSlider',\n    'toastr',\n    'graphdb.framework.utils.localstorageadapter'\n];\n\nconst SAFARI_IE_EDGE_CLASS_LIMIT = 400;\nconst FIREFOX_CLASS_LIMIT = 50;\nconst CLASS_COUNT_THRESHOLD = 1500;\nconst CLASS_COUNT_THRESHOLD_IE = 25;\n\nangular\n    .module('graphdb.framework.graphexplore.controllers.class', modules)\n    .controller('RdfClassHierarchyCtlr', RdfClassHierarchyCtlr);\n\nRdfClassHierarchyCtlr.$inject = [\"$scope\", \"$rootScope\", \"$location\", \"$repositories\", \"$window\", \"toastr\", \"GraphDataRestService\", \"UiScrollService\", \"RdfsLabelCommentService\", \"$timeout\", \"ModalService\", \"bowser\", \"LocalStorageAdapter\", \"LSKeys\", \"RDF4JRepositoriesRestService\"];\n\nfunction RdfClassHierarchyCtlr($scope, $rootScope, $location, $repositories, $window, toastr, GraphDataRestService, UiScrollService, RdfsLabelCommentService, $timeout, ModalService, bowser, LocalStorageAdapter, LSKeys, RDF4JRepositoriesRestService) {\n    $scope.classHierarchyData = {};\n    $scope.instancesObj = {};\n    $scope.instancesQueryObj = {};\n\n    $scope.instancesObj.items = [];\n    $scope.instancesNotFiltered = [];\n    $scope.isWarningShowed = false;\n\n    // Handle pageslide directive callbacks which incidentally appeared to be present in the angular's\n    // scope, so we need to define our's and pass them to pageslide, otherwise it throws an error.\n    $scope.onopen = $scope.onclose = () => angular.noop();\n\n    $scope.currentBrowserLimit = 2000;\n    if (bowser.firefox) {\n        $scope.currentBrowserLimit = FIREFOX_CLASS_LIMIT;\n    } else if (bowser.safari || bowser.msie || bowser.msedge) {\n        $scope.currentBrowserLimit = SAFARI_IE_EDGE_CLASS_LIMIT;\n    }\n\n    // creating datasource for class instances data\n    const datasource = {};\n    let position = 0;\n    let current = 0;\n    $rootScope.key = \"\";\n    datasource.get = function (index, count, success) {\n        return UiScrollService.initLazyList(index, count, success, position, $scope.instancesObj.items);\n    };\n\n    let selectedGraph = allGraphs;\n\n    const initView = function () {\n        if (!$scope.getActiveRepository()) {\n            return;\n        }\n        return RDF4JRepositoriesRestService.resolveGraphs()\n            .success(function (graphsInRepo) {\n                $scope.graphsInRepo = graphsInRepo.results.bindings;\n                setSelectedGraphFromCache();\n            }).error(function (data) {\n            $scope.repositoryError = getError(data);\n            toastr.error(getError(data), 'Error getting graphs');\n        });\n    };\n\n    const setSelectedGraphFromCache = function () {\n        const selGraphFromCache = LocalStorageAdapter.get(`classHierarchy-selectedGraph-${$repositories.getActiveRepository()}`);\n        if (selGraphFromCache !== null && $scope.graphsInRepo.some(graph => graph.contextID.uri === selGraphFromCache.contextID.uri)) {\n            selectedGraph = selGraphFromCache;\n        } else {\n            LocalStorageAdapter.set(`classHierarchy-selectedGraph-${$repositories.getActiveRepository()}`, selectedGraph);\n        }\n    };\n\n    $rootScope.$watch(function () {\n        return $rootScope.key;\n    }, function () {\n        position = 0;\n        _.each($scope.instancesObj.items, function (item) {\n            if ($rootScope.key > item) position++;\n        });\n        current++;\n    });\n\n    datasource.revision = function () {\n        return current;\n    };\n    // adapter implementation for ui-scroll directive\n    $scope.adapterContainer = {adapter: {remain: true}};\n\n\n    // events\n    $scope.$on('goToDomainRangeGraphView', onGoToDomainRangeGraphView);\n    $scope.$on('classCount', initClassCountSlider);\n    $scope.$on('repositoryIsSet', onRepositoryIsSet);\n\n    // objects\n    $scope.datasource = datasource;\n\n    // functions\n    $scope.goToDomainRangeGraphView = goToDomainRangeGraphView;\n    $scope.toggleClassInfoSidePanel = toggleClassInfoSidePanel;\n    $scope.getActiveRepositoryNoError = getActiveRepositoryNoError;\n    $scope.isSystemRepository = isSystemRepository;\n    $scope.confirmReloadClassHierarchy = confirmReloadClassHierarchy;\n    $scope.focusOnRoot = focusOnRoot;\n    $scope.copyToClipboard = copyToClipboard;\n\n    $scope.searchedClassCallback = searchedClassCallback;\n\n    $scope.instancesQueryObj.query = \"\";\n    $scope.instancesFilterFunc = instancesFilterFunc;\n\n    initView();\n\n    $scope.$watch('instancesObj.items', function () {\n        if ($scope.instancesObj.items.length > 0) {\n            $timeout(function () {\n                $scope.adapterContainer.adapter.reload();\n            }, 30);\n        }\n    });\n\n    $scope.$watch('selectedClass', function () {\n        if ($scope.showClassInfoPanel) {\n            prepareDataForClassInfoSidePanel($scope.selectedClass);\n        }\n    });\n\n    function instancesFilterFunc(inst) {\n        return inst.resolvedUri\n            .toLowerCase()\n            .indexOf($scope.instancesQueryObj.query.toLowerCase()) >= 0;\n    }\n\n    function searchedClassCallback(selected) {\n        if (selected) {\n            const searchedClass = {name: selected.title};\n            $rootScope.$broadcast('searchedClass', searchedClass);\n        }\n    }\n\n    function initClassCountSlider(event, classCount, currentSliderValue) {\n        if ($scope.classCountSlider.options && $scope.classCountSlider.options.ceil !== classCount) {\n            // Force reset of the slider if it exists and its class count (ceil) is different from\n            // the broadcast class count.\n            $scope.classCountSlider = {};\n        }\n\n        const showBrowserCompatibleClassLimitWarning = function (classLimit) {\n            if (bowser.chrome) {\n                toastr.warning(\"Disabling animations for more than \" + classLimit + \" classes.\",\n                    \"Reducing visual effects\");\n            } else {\n                toastr.warning(bowser.name + \" performs poorly with more than \" +\n                    classLimit + \" classes. \" +\n                    \"Please consider using Chrome for more optimal performance.\",\n                    \"Reducing visual effects\");\n            }\n        };\n\n        if (!$scope.classCountSlider.value) {\n            $scope.showExternalElements = true;\n            $scope.classCountSlider = {\n                value: classCount,\n                options: {\n                    floor: 1,\n                    ceil: classCount,\n                    vertical: true,\n                    showSelectionBar: true,\n                    onChange: function () {\n                        $timeout(setNewCurrentSliderValue, 100, true);\n                    }\n                }\n            };\n\n            if (LocalStorageAdapter.get(LSKeys.CLASS_HIERARCHY_CURRENT_SLIDER_VALUE) === null) {\n                if (classCount > $scope.currentBrowserLimit) {\n                    showBrowserCompatibleClassLimitWarning($scope.currentBrowserLimit);\n                }\n            }\n        }\n\n        const s = LocalStorageAdapter.get(LSKeys.CLASS_HIERARCHY_SWITCH_PREFIXES);\n        const noSwitchPrefixes = (s != null) && (s !== \"true\");\n        if (noSwitchPrefixes) {\n            $scope.showExternalElements = true;\n        }\n\n        if (currentSliderValue) {\n            $scope.classCountSlider.value = currentSliderValue;\n        } else if (classCount >= CLASS_COUNT_THRESHOLD) {\n            $scope.classCountSlider.value = CLASS_COUNT_THRESHOLD;\n            toastr.warning(\"Class count is reduced to \" + CLASS_COUNT_THRESHOLD + \" for faster initial load. Use the slider to see all classes.\", \"Reducing class count\");\n        }\n\n        if (classCount >= CLASS_COUNT_THRESHOLD_IE && (!(window.ActiveXObject) && \"ActiveXObject\" in window) && !$scope.isWarningShowed) {\n            $scope.classCountSlider.value = CLASS_COUNT_THRESHOLD_IE;\n            $scope.isWarningShowed = true;\n            toastr.warning(\"Class count is reduced to \" + CLASS_COUNT_THRESHOLD_IE + \" for faster load in IE. If you want better performance please switch to different browser.\", \"Reducing class count\");\n        }\n\n        $timeout(function () {\n            $scope.$broadcast('reCalcViewDimensions');\n        }, 200);\n\n        // set this before the slider is moved by the user as we need it\n        setNewCurrentSliderValue();\n\n        // Modify the slider with the mouse wheel\n        let lastTimeWheel = 0;\n        $('rzslider').on('wheel', function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            // at least 100ms must have passed since last time we updated\n            const now = new Date().getTime();\n            if (now - lastTimeWheel > 100) {\n                lastTimeWheel = now;\n            } else {\n                return;\n            }\n\n            e = e.originalEvent;\n\n            let newValue = $scope.classCountSlider.value;\n            if (e.deltaY <= -1) {\n                newValue += 1;\n            } else if (e.deltaY >= 1) {\n                newValue -= 1;\n            }\n\n            if (newValue !== $scope.classCountSlider.value\n                && newValue >= $scope.classCountSlider.options.floor\n                && newValue <= $scope.classCountSlider.options.ceil) {\n                $scope.$apply(function () {\n                    $scope.classCountSlider.value = newValue;\n                    $timeout(setNewCurrentSliderValue, 100, true);\n                });\n            }\n        });\n    }\n\n    function setNewCurrentSliderValue() {\n        $scope.currentSliderValue = $scope.classCountSlider.value;\n    }\n\n    function goToDomainRangeGraphView(selectedClass) {\n        const uri = selectedClass.fullName;\n        const name = selectedClass.name;\n\n        GraphDataRestService.checkDomainRangeData(uri)\n            .success(function (response, status) {\n                if (status === 204) {\n                    toastr.warning(\"No domain-range data available for '\" + name + \"'\");\n                } else {\n                    LocalStorageAdapter.set(LSKeys.CLASS_HIERARCHY_LAST_SELECTED_CLASS, $location.hash());\n                    $location\n                        .hash(\"\")\n                        .path(\"domain-range-graph\")\n                        .search(\"uri\", uri)\n                        .search(\"name\", name);\n                }\n            }).error(function () {\n                toastr.error(\"Request for \" + name + \" failed!\");\n            });\n    }\n\n    function onGoToDomainRangeGraphView(event, selectedClass) {\n        goToDomainRangeGraphView(selectedClass);\n    }\n\n    function copyToClipboard(uri) {\n        ModalService.openCopyToClipboardModal(uri);\n    }\n\n    function prepareDataForClassInfoSidePanel(selectedClass) {\n        // generate SPARQL query for listing class instances in sparql view\n        const uri = selectedClass.fullName;\n        let name = selectedClass.name;\n\n        // in case of no prefix available both name and uri are the same\n        // so only take the local name of the uri a tab name for the SPARQL view\n        if (name === uri) {\n            const localNameStartIdx = name.lastIndexOf(\"#\");\n            name = name.substring(localNameStartIdx + 1);\n        }\n        $scope.encodedUri = encodeURIComponent(uri);\n\n        const query = \"prefix onto:<http://www.ontotext.com/> select ?s from onto:disable-sameAs { ?s a <\" + uri + \"> . }\";\n\n        const encodedQuery = encodeURIComponent(query);\n\n        // generate url for redirecting to sparql view, opening a new tab, writing the generated query and executing it\n        $scope.viewInstancesUri = 'sparql?name=' + name + '&infer=true&sameAs=false&query=' + encodedQuery + '&execute=true';\n\n        GraphDataRestService.getRdfsLabelAndComment(uri)\n            .success(function (response) {\n                $scope.rdfsLabel = response.label;\n                $scope.rdfsComment = response.comment;\n                $scope.expanded = false;\n            })\n            .error(function () {\n                toastr.error(\"Error getting rdfs:label and rdfs:comment\");\n            });\n\n        // clear instances search input field when changing classes\n        $scope.instancesQueryObj.query = '';\n\n        // get class instances for selected rdf class\n        $scope.instancesLoader = true;\n        GraphDataRestService.getClassInstances(uri)\n            .success(function (response) {\n                $scope.instancesObj.items = [];\n                _.each(response, function (value, key) {\n                    const obj = {};\n                    // TODO extract in core function isTriple(str)\n                    obj.type = (value.startsWith(\"<<\") && value.endsWith(\">>\")) ? \"triple\": \"uri\";\n                    obj.absUri = encodeURIComponent(value);\n                    obj.absUriNonEncoded = value;\n                    obj.resolvedUri = key;\n                    $scope.instancesObj.items.push(obj);\n                });\n                $scope.instancesLoader = false;\n\n                $scope.instancesSearchPlaceholder = $scope.instancesObj.items.length < 1000 ? \"Search class instances\" : \"Search first 1000 class instances\";\n                $scope.instancesNotFiltered = $scope.instancesObj.items;\n            })\n            .error(function () {\n                toastr.error(\"Request for class instances for  failed!\");\n            });\n\n    }\n\n    function toggleClassInfoSidePanel() {\n        $scope.showClassInfoPanel = !$scope.showClassInfoPanel;\n        $rootScope.$broadcast('sidePanelClosed');\n    }\n\n    function getActiveRepositoryNoError() {\n        if (!$scope.repositoryError) {\n            return $repositories.getActiveRepository();\n        }\n    }\n\n    function isSystemRepository() {\n        return $repositories.isSystemRepository();\n    }\n\n    // Hack needed to force hide prefix toggle tooltip in order not be\n    // visible after icon is switched\n    $(document).ready(function () {\n        $(\".prefix-toggle\").click(function () {\n            $(\".tooltip\").hide();\n        });\n    });\n\n    function focusOnRoot() {\n        $scope.$broadcast(\"rootFocus\");\n    }\n\n    function refreshDiagramExternalElements() {\n        $location.replace().hash(\"1\");\n\n        // clear old instances data from previous repository\n        $scope.instancesObj.items = [];\n\n        // delete old instance count slider and reinit with classes count values\n        // appropriate for the newly activated repository\n        $scope.showExternalElements = false;\n\n        $scope.showClassInfoPanel = false;\n\n        LocalStorageAdapter.clearClassHieararchyState();\n\n        // reset all watched scope variables to undefined in order to stop unwanted triggering of watches\n        $scope.hidePrefixes = LocalStorageAdapter.get(LSKeys.CLASS_HIERARCHY_HIDE_PREFIXES) === \"true\";\n        $scope.currentSliderValue = undefined;\n        $scope.classHierarchyData = {};\n\n        // clear class search input field\n        $rootScope.$broadcast('angucomplete-alt:clearInput');\n    }\n\n    function fixToolbar() {\n        // For some reason angular behaves weirdly with the toolbar and its ng-show. Even though the condition\n        // is updated, angular won't remove the ng-hide class and the toolbar will stay hidden.\n        // Calling $apply(), $digest() or whatever doesn't help either so we have to resort to this instead.\n        // The problem is easy to reproduce when viewing a deeper class and changing the repository.\n        if ($scope.hasClassHierarchy()) {\n            $timeout(function () {\n                $('#toolbar').removeClass('ng-hide');\n            }, 0);\n        }\n    }\n\n    function reloadClassHierarchy() {\n        refreshDiagramExternalElements();\n        $scope.loader = true;\n        $scope.hierarchyError = false;\n        GraphDataRestService.reloadClassHierarchy(selectedGraph.contextID.uri)\n            .success(function (response) {\n                $scope.loader = false;\n                $scope.classHierarchyData = response;\n                fixToolbar();\n                initClassCountSlider();\n            })\n            .error(function (response) {\n                $scope.loader = false;\n                $scope.hierarchyError = getError(response);\n                toastr.error(getError(response), \"Request for RDF Class Hierarchy failed!\");\n            });\n    }\n\n    function confirmReloadClassHierarchy() {\n        ModalService.openSimpleModal({\n            title: 'Confirm operation',\n            message: 'Calculating class hierarchy data may take some time. Are you sure?',\n            warning: true\n        }).result\n            .then(function () {\n                reloadClassHierarchy();\n            });\n    }\n\n    let currentActiveRepository = $repositories.getActiveRepository();\n\n    function onRepositoryIsSet() {\n        if (currentActiveRepository === $repositories.getActiveRepository()) {\n            return;\n        } else {\n            currentActiveRepository = $repositories.getActiveRepository();\n        }\n        $scope.repositoryError = null;\n        if (!currentActiveRepository) {\n            return;\n        }\n        selectedGraph = allGraphs;\n        initView()\n            .then(getClassHierarchyData);\n    }\n\n    function getClassHierarchyData() {\n\n        refreshDiagramExternalElements();\n\n        if (!$scope.isSystemRepository()) {\n            $scope.hierarchyError = false;\n            $scope.loader = true;\n            GraphDataRestService.getClassHierarchyData(selectedGraph.contextID.uri)\n                .success(function (response, status) {\n                    $scope.showExternalElements = true;\n                    $scope.loader = false;\n                    $scope.classHierarchyData = response;\n                    if (status === 207) {\n                        toastr.warning(\"You can update the diagram by pressing the reload button.\", \"Repository data has changed\");\n                    }\n                    fixToolbar();\n                }).error(function (response) {\n                $scope.loader = false;\n                $scope.hierarchyError = getError(response);\n                toastr.error(getError(response), \"Request for RDF Class Hierarchy failed!\");\n            });\n        }\n    }\n\n    $scope.hasClassHierarchy = function () {\n        return $scope.classHierarchyData.classCount && $scope.getActiveRepositoryNoError() && !$scope.isSystemRepository();\n    };\n\n    $scope.chosenGraph = function (graph) {\n        selectedGraph = graph;\n        getClassHierarchyData();\n        LocalStorageAdapter.set(`classHierarchy-selectedGraph-${$repositories.getActiveRepository()}`, selectedGraph);\n    };\n\n    $scope.getSelGraphValue = function () {\n        return selectedGraph.contextID.value;\n    };\n\n    $scope.isAllGraphsSelected = function () {\n        return $scope.getSelGraphValue() === 'All graphs'\n    }\n}\n"],"sourceRoot":""}