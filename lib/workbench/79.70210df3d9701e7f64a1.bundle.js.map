{"version":3,"sources":["webpack:///./src/js/angular/repositories/ontop-repo.directive.js"],"names":["ontopRepoDirective","$modal","RepositoriesRestService","toastr","Upload","restrict","scope","templateUrl","link","$scope","selectedDriver","driverType","driverName","jdbc","hostName","port","databaseName","userName","password","driverClass","url","urlTemplate","downloadDriverUrl","ontopRepoFileNames","supportedDriversData","ontopRepoFileLabels","propertiesFile","obdaFile","owlFile","constraintFile","ontopRepoFiles","Object","keys","forEach","key","repositoryInfo","params","value","supportedDriverLabels","propertiesFileParams","classAvailable","genericDriverType","REQUIRED_ONTOP_REPO_PARAMS","REQUIRED_PROPERTIES_FIELD_PARAMS","updateProperties","filter","requiredField","length","error","Promise","reject","uploadFileLoader","updatePropertiesFile","success","data","fileLocation","showErrorMsg","resolve","title","msg","getError","loadDriverByClass","foundDriver","find","driver","copyDriverProperties","selectDriverByType","concatURL","portRequired","isReadOnly","labelName","editFile","file","open","controller","result","then","updateRepositoryFileContent","content","uploadOntopRepoFile","files","param","uploadFile","upload","name","errorMessage","replace","getInputType","checkForRequiredOntopFiles","requiredFile","validateOntopPropertiesConnection","isOntopRepoFileUploaded","isRequiredOntopRepoFile","indexOf","isRequiredField","field","getFieldTooltip","repoTooltips","ontop","editOntopRepo","editRepository","catch","err","createOntopRepo","id","createRepo","goBackToPrevious","goBackToPreviousLocation","getSupportedDriversData","response","editRepoPage","loadPropertiesFile","driverData","parseInt","angular","module","directive","$inject"],"mappings":"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","file":"79.70210df3d9701e7f64a1.bundle.js","sourcesContent":["import {getFileName} from \"./controllers\";\n\nangular\n    .module('graphdb.framework.repositories.ontop-repo.directive', [])\n    .directive('ontopRepo', ontopRepoDirective);\n\nontopRepoDirective.$inject = ['$modal', 'RepositoriesRestService', 'toastr', 'Upload'];\n\nfunction ontopRepoDirective($modal, RepositoriesRestService, toastr, Upload) {\n    return {\n        restrict: 'E',\n        scope: false,\n        templateUrl: 'js/angular/repositories/templates/ontop-repo.html',\n\n        link: linkFunc\n    };\n\n    function linkFunc($scope) {\n\n        $scope.selectedDriver = {\n            driverType: \"generic\",\n            driverName: \"Generic JDBC Driver\",\n            jdbc: {\n                hostName: \"\",\n                port: \"\",\n                databaseName: \"\",\n                userName: \"\",\n                password: \"\",\n                driverClass: \"\",\n                url: \"\"\n            },\n            urlTemplate: \"\",\n            downloadDriverUrl: \"\"\n        };\n        $scope.ontopRepoFileNames = {};\n        $scope.supportedDriversData = [];\n        $scope.ontopRepoFileLabels =\n            {propertiesFile: 'JDBC properties', obdaFile: 'OBDA or R2RML', owlFile: 'ontology file', constraintFile: 'constraint file'};\n        $scope.ontopRepoFiles = Object.keys($scope.ontopRepoFileLabels);\n        $scope.ontopRepoFiles.forEach(function(key) {\n            if ($scope.repositoryInfo.params[key]) {\n                $scope.ontopRepoFileNames[key] = getFileName($scope.repositoryInfo.params[key].value);\n            }\n        });\n        $scope.supportedDriverLabels = {hostName: 'Hostname', port: \"Port\", databaseName: 'Database name',\n                                        userName: 'Username', password: 'Password', driverClass: 'Driver class', url: 'URL'};\n        $scope.propertiesFileParams = Object.keys($scope.supportedDriverLabels);\n        $scope.classAvailable = false;\n        $scope.genericDriverType = 'generic';\n        $scope.propertiesFile = 'propertiesFile';\n\n        const REQUIRED_ONTOP_REPO_PARAMS = [$scope.propertiesFile, 'obdaFile'];\n        const REQUIRED_PROPERTIES_FIELD_PARAMS = ['hostName', 'databaseName', 'userName'];\n\n        function getSupportedDriversData() {\n            return RepositoriesRestService.getSupportedDriversData()\n                .success(function (response) {\n                    $scope.supportedDriversData = response;\n                }).error(function (response) {\n                    showErrorMsg('Error', response);\n                });\n        }\n\n        $scope.loadDriverByClass = function (driverClass) {\n            const foundDriver = $scope.supportedDriversData\n                .find((driver) => driver.driverClass === driverClass);\n            if (foundDriver) {\n                $scope.copyDriverProperties(foundDriver);\n            }\n            return foundDriver;\n        };\n\n        $scope.selectDriverByType = function (driverType) {\n            $scope.copyDriverProperties($scope.supportedDriversData\n                .find((driver) => driver.driverType === driverType));\n            // Call concatURL with proper labelName to apply changes to url field\n            $scope.concatURL('hostName', $scope);\n        };\n\n        $scope.copyDriverProperties = function (driver) {\n            $scope.selectedDriver.driverType = driver.driverType;\n            $scope.selectedDriver.jdbc.driverClass = driver.driverClass;\n            $scope.selectedDriver.jdbc.url = driver.urlTemplate;\n            $scope.selectedDriver.urlTemplate = driver.urlTemplate;\n            $scope.selectedDriver.downloadDriverUrl = driver.downloadDriverUrl;\n            $scope.selectedDriver.portRequired = driver.portRequired;\n            $scope.classAvailable = driver.classAvailable;\n        };\n\n        $scope.isReadOnly = function (labelName) {\n            return labelName === 'driverClass' || labelName === 'url';\n        }\n\n        $scope.editFile = function(file) {\n            const modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/editRepoFile.html',\n                controller: 'EditRepositoryFileCtrl',\n                resolve: {\n                    file: function () {\n                        return $scope.repositoryInfo.params[file] ? $scope.repositoryInfo.params[file].value : '';\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                // send data to backend\n                RepositoriesRestService.updateRepositoryFileContent(data.fileLocation, data.content).success(function(result) {\n                    $scope.ontopRepoFileNames[file] = getFileName(result.fileLocation);\n                    $scope.repositoryInfo.params[file].value = result.fileLocation;\n                }).error(function (error) {\n                    showErrorMsg('Error', error);\n                })\n            });\n        }\n\n        $scope.uploadOntopRepoFile = function(files, param) {\n            if (files && files.length) {\n                $scope.uploadFile = files[0];\n                $scope.uploadFileLoader = true;\n                Upload.upload({\n                    url: 'rest/repositories/uploadFile',\n                    data: {uploadFile: $scope.uploadFile}\n                })\n                    .success(function (data) {\n                        if (!data.success) {\n                            toastr.error(data.errorMessage);\n                        } else {\n                            $scope.ontopRepoFileNames[param] = $scope.uploadFile.name;\n                            $scope.repositoryInfo.params[param].value = data.fileLocation;\n                        }\n                        $scope.uploadFileLoader = false;\n                    }).error(function (data) {\n                    showErrorMsg('Error', data);\n                    $scope.uploadFile = '';\n                    $scope.uploadFileLoader = false;\n                });\n            }\n        }\n\n        $scope.concatURL = function(labelName) {\n            if (labelName === 'hostName' || labelName === 'port' || labelName === 'databaseName') {\n                let result = $scope.selectedDriver.urlTemplate;\n                if ($scope.selectedDriver.jdbc.hostName) {\n                    if ($scope.selectedDriver.jdbc.port) {\n                        result = result.replace('{hostport}',\n                            `${$scope.selectedDriver.jdbc.hostName}:${$scope.selectedDriver.jdbc.port}`);\n                    } else {\n                        result = result.replace('{hostport}', $scope.selectedDriver.jdbc.hostName);\n                    }\n                }\n\n                if ($scope.selectedDriver.jdbc.databaseName) {\n                    result = result.replace('{database}', $scope.selectedDriver.jdbc.databaseName);\n                }\n\n                $scope.selectedDriver.jdbc.url = result;\n            }\n        }\n\n        $scope.getInputType = function (labelName) {\n            switch (labelName) {\n                case 'password':\n                    return 'password';\n                case 'port':\n                    return 'number';\n                default:\n                    return 'text';\n            }\n        }\n\n        $scope.checkForRequiredOntopFiles = function () {\n            // Should guarantee that code will be executed in sequential manner,\n            // because properties file is not created yet\n            return updateProperties()\n                .then(function () {\n                    const missingRequired = REQUIRED_ONTOP_REPO_PARAMS.filter(function (requiredFile) {\n                        return !$scope.repositoryInfo.params[requiredFile].value;\n                    });\n                    if (missingRequired.length > 0) {\n                        toastr.error('Missing required ontop repo file');\n                        return Promise.reject('Missing required ontop repo file');\n                    }\n                    return Promise.resolve();\n                });\n        }\n\n        function loadPropertiesFile() {\n            RepositoriesRestService.loadPropertiesFile($scope.repositoryInfo.params[$scope.propertiesFile].value)\n                .success(function (driverData) {\n                    const driver = $scope.loadDriverByClass(driverData.driverClass);\n                    // If driver class is not found means that the selected driver is a GENERIC ONE\n                    if (driver) {\n                        $scope.selectedDriver.jdbc.hostName = driverData.hostName;\n                        $scope.selectedDriver.jdbc.port = parseInt(driverData.port);\n                        $scope.selectedDriver.jdbc.databaseName = driverData.databaseName;\n                        $scope.selectedDriver.jdbc.userName = driverData.userName;\n                        $scope.selectedDriver.jdbc.password = driverData.password;\n                        $scope.selectedDriver.jdbc.url = driverData.url;\n                    }\n                }).error(function (data) {\n                showErrorMsg('Error', data);\n                $scope.uploadFileLoader = false;\n            });\n        }\n\n        $scope.validateOntopPropertiesConnection = function () {\n            updateProperties()\n                .then(function () {\n                    RepositoriesRestService.validateOntopPropertiesConnection($scope.repositoryInfo.params.propertiesFile)\n                        .success(function () {\n                            toastr.success('Connection is successful');\n                        }).error(function (data) {\n                        showErrorMsg('Failed to connect', data);\n                    });\n                });\n        }\n\n        $scope.isOntopRepoFileUploaded = function() {\n            return $scope.repositoryInfo.params.propertiesFile &&\n                $scope.repositoryInfo.params.propertiesFile.value.length > 0\n        };\n\n        function missingRequiredField() {\n            const missing = REQUIRED_PROPERTIES_FIELD_PARAMS\n                .filter(function (requiredField) {\n                    return !$scope.selectedDriver.jdbc[requiredField]\n                });\n            if (missing.length > 0) {\n                toastr.error('Missing required field');\n                return true;\n            }\n            return false;\n        }\n\n        function updateProperties() {\n            if ($scope.selectedDriver.driverType !== $scope.genericDriverType) {\n                if (missingRequiredField()) {\n                    return Promise.reject('Missing required field');\n                }\n                return updatePropertiesFile();\n            }\n            return Promise.resolve();\n        }\n\n        function updatePropertiesFile() {\n            $scope.uploadFileLoader = true;\n            return RepositoriesRestService\n                .updatePropertiesFile($scope.repositoryInfo.params[$scope.propertiesFile].value, $scope.selectedDriver.jdbc)\n                .success(function (data) {\n                    $scope.ontopRepoFileNames[$scope.propertiesFile] = getFileName(data.fileLocation);\n                    $scope.repositoryInfo.params[$scope.propertiesFile].value = data.fileLocation;\n                    $scope.uploadFileLoader = false;\n                }).error(function (data) {\n                    showErrorMsg('Error', data);\n                    $scope.uploadFileLoader = false;\n                });\n        }\n\n        $scope.isRequiredOntopRepoFile = function(file) {\n            return REQUIRED_ONTOP_REPO_PARAMS.indexOf(file) > -1;\n        };\n\n        $scope.isRequiredField = function (field) {\n            return REQUIRED_PROPERTIES_FIELD_PARAMS.indexOf(field) > -1\n                || field === 'port' && $scope.selectedDriver.portRequired;\n        };\n\n        $scope.getFieldTooltip = function (field) {\n            if (field === 'port' && $scope.selectedDriver.portRequired) {\n                field = 'portIfRequired';\n            }\n            return $scope.repoTooltips.ontop[field];\n        };\n\n        $scope.editOntopRepo = function () {\n            $scope.checkForRequiredOntopFiles()\n                .then(function () {\n                    $scope.editRepository();\n                }).catch(function (err) {\n                // The catch block is empty, because error is handled in promise\n            });\n        }\n\n        $scope.createOntopRepo = function () {\n            if (!$scope.repositoryInfo.id) {\n                toastr.error('Repository ID cannot be empty');\n                return;\n            }\n\n            $scope.checkForRequiredOntopFiles()\n                .then(function () {\n                    $scope.createRepo();\n                }).catch(function (err) {\n                // The catch block is empty, because error is handled in promise\n            });\n        };\n\n        $scope.goBackToPrevious = function () {\n            $scope.goBackToPreviousLocation();\n        }\n\n        function showErrorMsg (title, data) {\n            const msg = getError(data);\n            toastr.error(msg, title);\n        }\n\n        getSupportedDriversData()\n            .then(function () {\n                if ($scope.editRepoPage) {\n                    loadPropertiesFile();\n                }\n            });\n    }\n}\n"],"sourceRoot":""}