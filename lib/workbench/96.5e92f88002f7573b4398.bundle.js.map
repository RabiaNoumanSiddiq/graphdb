{"version":3,"sources":["webpack:///./src/js/angular/similarity/controllers/similarity-list.controller.js"],"names":["SimilarityCtrl","$scope","$interval","toastr","$repositories","ModalService","$modal","SimilarityRestService","AutocompleteRestService","productInfo","RDF4JRepositoriesRestService","PREFIX","PREFIX_PREDICATION","ANY_PREDICATE","literalForQuery","literal","iriForQuery","iri","undefined","startsWith","endsWith","shouldSkipCall","getActiveRepository","isActiveRepoFedXType","isActiveRepoOntopType","info","pluginDisabled","checkPluginEnabled","checkSimilarityPluginEnabled","done","data","indexOf","fail","error","getError","enabledSimilarityPlugin","enableSimilarityPlugin","getSimilarityIndexes","getSearchQueries","success","searchQueries","msg","encodeURIComponent","param","getIndexes","similarityIndexes","pullList","timer","$","attr","$on","cancel","repoIsSetListener","yasr","checkAutocompleteStatus","getAutocompletePromise","$watch","getNamespacesPromise","getNamespaces","usedPrefixes","results","bindings","forEach","e","prefix","value","namespace","document","getElementById","getUsedPrefixes","persistency","hideHeader","loading","selected","searchType","resultType","empty","goToSimilarityIndex","index","status","lastSearch","type","collapse","toggleOntoLoader","showLoader","yasrInnerContainer","angular","element","resultsLoader","addClass","removeClass","performSearch","uri","parameters","termOrSubject","psiSubject","predicate","sparqlQuery","analogicalQuery","searchQuery","sendData","query","$index","$query","$searchType","$resultType","$parameters","$psiPredicate","searchSubject","$givenSubject","analogicalSubject","$givenObject","analogicalObject","$searchSubject","ajax","method","url","headers","Accept","textStatus","jqXhrOrErrorString","setResponse","viewSearchQuery","queryTemplate","replacedQuery","replace","name","searchParameters","open","templateUrl","controller","resolve","deleteIndex","openSimpleModal","title","message","warning","result","then","err","viewCreateQuery","getQuery","indexName","indexOptions","options","selectQuery","indexStopList","stopList","queryInference","infer","querySameAs","sameAs","viewType","indexAnalyzer","analyzer","rebuildIndex","text","res","copyToClipboardResult","openCopyToClipboardModal","trimIRI","_","trim","window","addEventListener","removeRepoIsSetListener","removeEventListener","module","$inject"],"mappings":"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","file":"96.5e92f88002f7573b4398.bundle.js","sourcesContent":["import YASR from 'lib/yasr.bundled';\n\nangular\n    .module('graphdb.framework.similarity.controllers.list', [])\n    .controller('SimilarityCtrl', SimilarityCtrl);\n\nSimilarityCtrl.$inject = ['$scope', '$interval', 'toastr', '$repositories', 'ModalService', '$modal', 'SimilarityRestService', 'AutocompleteRestService', 'productInfo', 'RDF4JRepositoriesRestService'];\n\nfunction SimilarityCtrl($scope, $interval, toastr, $repositories, ModalService, $modal, SimilarityRestService, AutocompleteRestService, productInfo, RDF4JRepositoriesRestService) {\n\n    const PREFIX = 'http://www.ontotext.com/graphdb/similarity/';\n    const PREFIX_PREDICATION = 'http://www.ontotext.com/graphdb/similarity/psi/';\n    const PREFIX_INSTANCE = PREFIX + 'instance/';\n    const ANY_PREDICATE = PREFIX_PREDICATION + 'any';\n\n    const literalForQuery = function (literal) {\n        return '\"' + literal + '\"';\n    };\n\n    // TODO: Fix cases when this function is called with undefined\n    const iriForQuery = function (iri) {\n        // Do not put brackets on nested triples\n        if (iri === undefined || iri.startsWith(\"<<\") && iri.endsWith(\">>\")) {\n            return iri;\n        }\n        return '<' + iri + '>';\n    };\n\n    $scope.info = productInfo;\n    $scope.pluginDisabled = false;\n\n    $scope.getActiveRepository = function () {\n        return $repositories.getActiveRepository();\n    };\n\n    $scope.checkPluginEnabled = function () {\n        if (shouldSkipCall()) {\n            return;\n        }\n        RDF4JRepositoriesRestService.checkSimilarityPluginEnabled()\n            .done(function (data) {\n                $scope.pluginDisabled = data.indexOf('false') > 0;\n            })\n            .fail(function (data) {\n                toastr.error(getError(data), 'Could not check plugin enabled!');\n            });\n    };\n\n    $scope.enabledSimilarityPlugin = function () {\n        RDF4JRepositoriesRestService.enableSimilarityPlugin()\n            .done(function () {\n                $scope.pluginDisabled = false;\n                $scope.getSimilarityIndexes();\n            })\n            .fail(function (data) {\n                toastr.error(getError(data), 'Could not enable plugin!');\n            });\n    };\n\n    // Don't call functions if one of the following conditions are met\n    function shouldSkipCall() {\n        return !$scope.getActiveRepository() ||\n                    $scope.isActiveRepoFedXType() ||\n                         $scope.isActiveRepoOntopType();\n    }\n\n    if (!shouldSkipCall()) {\n        SimilarityRestService.getSearchQueries().success(function (data) {\n            $scope.searchQueries = data;\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, 'Could not get search queries');\n        });\n    }\n\n    $scope.encodeURIComponent = function (param) {\n        return encodeURIComponent(param);\n    };\n\n    // get similarity indexes\n    $scope.getSimilarityIndexes = function () {\n        if (shouldSkipCall() || $scope.pluginDisabled) {\n            return;\n        }\n        SimilarityRestService.getIndexes()\n            .success(function (data) {\n                $scope.similarityIndexes = data;\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not get indexes');\n            });\n    };\n\n    $scope.pullList = function () {\n        if (shouldSkipCall() || $scope.pluginDisabled) {\n            return;\n        }\n        $scope.getSimilarityIndexes();\n        const timer = $interval(function () {\n            if ($('#indexes-table').attr('aria-expanded') !== 'false') {\n                $scope.getSimilarityIndexes();\n            }\n        }, 5000);\n        $scope.$on('$destroy', function () {\n            $interval.cancel(timer);\n        });\n    };\n\n    // Check if warning message should be shown or removed on repository change\n    const repoIsSetListener = $scope.$on('repositoryIsSet', function () {\n        $scope.checkPluginEnabled();\n        $scope.pullList();\n    });\n    if ($scope.getActiveRepository()) {\n        $scope.checkPluginEnabled();\n        $scope.pullList();\n    }\n\n    let yasr;\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        // Don't try to get namespaces for ontop or fedx repository\n        if ($scope.getActiveRepository() && !$scope.isActiveRepoOntopType() && !$scope.isActiveRepoFedXType()) {\n            $scope.getNamespacesPromise = RDF4JRepositoriesRestService.getNamespaces($scope.getActiveRepository())\n                .success(function (data) {\n                    checkAutocompleteStatus();\n                    $scope.usedPrefixes = {};\n                    data.results.bindings.forEach(function (e) {\n                        $scope.usedPrefixes[e.prefix.value] = e.namespace.value;\n                    });\n                    yasr = YASR(document.getElementById('yasr'), { // eslint-disable-line new-cap\n                        //this way, the URLs in the results are prettified using the defined prefixes\n                        getUsedPrefixes: $scope.usedPrefixes,\n                        persistency: false,\n                        hideHeader: true\n                    });\n                }).error(function (data) {\n                    toastr.error(getError(data), 'Cannot get namespaces for repository. View will not work properly;');\n                });\n        }\n    });\n\n    function checkAutocompleteStatus() {\n        $scope.getAutocompletePromise = AutocompleteRestService.checkAutocompleteStatus();\n    }\n\n    $scope.$on('autocompleteStatus', function() {\n        checkAutocompleteStatus();\n    });\n\n    $scope.loading = false;\n\n    $scope.selected = undefined;\n    $scope.searchType = 'searchTerm';\n    $scope.resultType = 'termResult';\n\n    $scope.$watch('searchType', function () {\n        $scope.empty = true;\n    });\n\n    $scope.goToSimilarityIndex = function (index) {\n        if (!('BUILT' === index.status || 'OUTDATED' === index.status || 'REBUILDING' === index.status)) {\n            return;\n        }\n        $scope.empty = true;\n        if ($scope.selected !== index) {\n            $scope.lastSearch = undefined;\n            $scope.selected = index;\n        }\n        if (index.type === 'text') {\n            $scope.searchType = 'searchTerm';\n        } else if (index.type === 'predication') {\n            $scope.searchType = 'searchEntity';\n        }\n        if (index.type === 'text' || index.type === 'predication') {\n            $('#indexes-table').collapse('hide');\n        }\n    };\n\n    const toggleOntoLoader = function (showLoader) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        const resultsLoader = angular.element(document.getElementById('results-loader'));\n        /* Angular b**it. For some reason the loader behaved strangely with ng-show not always showing */\n        if (showLoader) {\n            $scope.loading = true;\n            yasrInnerContainer.addClass('opacity-hide');\n            resultsLoader.removeClass('opacity-hide');\n        } else {\n            $scope.loading = false;\n            yasrInnerContainer.removeClass('opacity-hide');\n            resultsLoader.addClass('opacity-hide');\n        }\n    };\n\n    $scope.performSearch = function (index, uri, searchType, resultType, parameters) {\n\n        toggleOntoLoader(true);\n\n        // this is either the search term or the iri for the subject\n        let termOrSubject = uri;\n\n        $scope.lastSearch = {};\n        $scope.lastSearch.type = searchType;\n\n        if (searchType === 'searchEntityPredicate') {\n            termOrSubject = $scope.psiSubject;\n            $scope.lastSearch.predicate = uri;\n        }\n\n        if (searchType === 'searchTerm') {\n            termOrSubject = literalForQuery(termOrSubject);\n        } else {\n            termOrSubject = iriForQuery(termOrSubject);\n        }\n\n        $scope.lastSearch.termOrSubject = termOrSubject;\n\n        const headers = {Accept: 'application/x-sparqlstar-results+json, application/sparql-results+json;q=0.9, */*;q=0.8'};\n        let sparqlQuery;\n        if (searchType === 'searchAnalogical') {\n            sparqlQuery = ($scope.selected.analogicalQuery) ? $scope.selected.analogicalQuery : $scope.searchQueries['analogical'];\n        } else {\n            sparqlQuery = ($scope.selected.searchQuery) ? $scope.selected.searchQuery : $scope.searchQueries[$scope.selected.type];\n        }\n        const sendData = {\n            query: sparqlQuery,\n            $index: iriForQuery(PREFIX_INSTANCE + index),\n            $query: termOrSubject,\n            $searchType: iriForQuery(($scope.selected.type === 'text' ? PREFIX : PREFIX_PREDICATION) + (searchType === 'searchEntityPredicate' ? 'searchEntity' : searchType)),\n            $resultType: iriForQuery($scope.selected.type === 'text' ? PREFIX + resultType : PREFIX_PREDICATION + 'entityResult'),\n            $parameters: literalForQuery(parameters)\n        };\n\n        if (searchType === 'searchEntityPredicate') {\n            sendData.$psiPredicate = $scope.lastSearch.predicate ? iriForQuery($scope.lastSearch.predicate) : iriForQuery(ANY_PREDICATE);\n        }\n\n        if (searchType === 'searchAnalogical') {\n            $scope.searchSubject = uri;\n            sendData.$givenSubject = iriForQuery($scope.analogicalSubject);\n            sendData.$givenObject = iriForQuery($scope.analogicalObject);\n            sendData.$searchSubject = iriForQuery(uri);\n        }\n\n        $.ajax({\n            method: 'GET',\n            url: 'repositories/' + $repositories.getActiveRepository(),\n            data: sendData,\n            headers: headers\n        }).done(function (data, textStatus, jqXhrOrErrorString) {\n            toggleOntoLoader(false);\n            yasr.setResponse(data, textStatus, jqXhrOrErrorString);\n        }).fail(function (data) {\n            toastr.error(getError(data), 'Could not get resource!');\n            toggleOntoLoader(false);\n        });\n    };\n\n    $scope.viewSearchQuery = function () {\n        let queryTemplate;\n        if ($scope.lastSearch.type === 'searchAnalogical') {\n            queryTemplate = ($scope.selected.analogicalQuery) ? $scope.selected.analogicalQuery : $scope.searchQueries['analogical'];\n        } else {\n            queryTemplate = ($scope.selected.searchQuery) ? $scope.selected.searchQuery : $scope.searchQueries[$scope.selected.type];\n        }\n        const replacedQuery = queryTemplate\n            .replace('?index', 'inst:' + $scope.selected.name)\n            .replace('?query', $scope.lastSearch.termOrSubject)\n            .replace('?searchType', ($scope.selected.type === 'text' ? ':' : 'psi:') + ($scope.lastSearch.type === 'searchEntityPredicate' ? 'searchEntity' : $scope.lastSearch.type))\n            .replace('?resultType', $scope.selected.type === 'text' ? ':' + $scope.resultType : 'psi:entityResult')\n            .replace('?parameters', literalForQuery((!$scope.searchParameters) ? '' : $scope.searchParameters))\n            .replace('?psiPredicate', $scope.lastSearch.predicate ? iriForQuery($scope.lastSearch.predicate) : iriForQuery(ANY_PREDICATE))\n            .replace('?givenSubject', iriForQuery($scope.analogicalSubject))\n            .replace('?givenObject', iriForQuery($scope.analogicalObject))\n            .replace('?searchSubject', iriForQuery($scope.searchSubject));\n\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    return replacedQuery;\n                }\n            }\n        });\n    };\n\n\n    $scope.deleteIndex = function (index) {\n        ModalService.openSimpleModal({\n            title: 'Confirm',\n            message: 'Are you sure you want to delete the index ' + '\\'' + index.name + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                SimilarityRestService.deleteIndex(index)\n                    .then(function () {\n                        $scope.getSimilarityIndexes();\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    });\n            });\n    };\n\n    $scope.viewCreateQuery = function (index) {\n        SimilarityRestService.getQuery({\n            indexName: index.name,\n            indexOptions: index.options,\n            query: index.selectQuery,\n            indexStopList: index.stopList,\n            queryInference: index.infer,\n            querySameAs: index.sameAs,\n            viewType: index.type,\n            indexAnalyzer: index.analyzer\n        }).success(function (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        });\n    };\n\n    $scope.rebuildIndex = function (index) {\n        // Migration\n        if (!index.searchQuery) {\n            index.searchQuery = index.type ? $scope.searchQueries[index.type] : $scope.searchQueries.text;\n        }\n        ModalService.openSimpleModal({\n            title: 'Confirm',\n            message: 'Are you sure you want to rebuild the whole index ' + '\\'' + index.name + '\\'?' + '<br>You will still be able to use the latest successful build!',\n            warning: true\n        }).result\n            .then(function () {\n                index.status = 'REBUILDING';\n                SimilarityRestService.rebuildIndex(index)\n                    .then(function (res) {\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    });\n            });\n    };\n\n    $scope.copyToClipboardResult = function (uri) {\n        ModalService.openCopyToClipboardModal(uri);\n    };\n\n    $scope.trimIRI = function (iri) {\n        return _.trim(iri, \"<>\");\n    };\n\n    window.addEventListener('beforeunload', removeRepoIsSetListener);\n\n    function removeRepoIsSetListener() {\n        repoIsSetListener();\n        window.removeEventListener('beforeunload', removeRepoIsSetListener);\n    }\n}\n"],"sourceRoot":""}