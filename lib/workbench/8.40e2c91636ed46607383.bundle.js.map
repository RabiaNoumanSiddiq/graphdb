{"version":3,"sources":["webpack:///./src/js/angular/clustermanagement/directives.js"],"names":["navigationBarWidthFull","navigationBarWidthCollapsed","navigationBarWidth","radius","radius_x","clusterColors","workerIsConnected","n","weight","masterIsConnected","angular","module","directive","$window","$timeout","LocalStorageAdapter","LSKeys","restrict","link","scope","element","getWindowWidth","collapsed","get","MENU_STATE","Math","max","floor","innerWidth","getWindowHeight","innerHeight","width","height","colors","i","length","svg","d3","select","append","attr","drag_line","force","currentCluster","mousedown_link","mousedown_node","mousedown_svg","mouseup_node","resetMouseVars","on","event","preventDefault","classed","ctrlKey","selectNode","x","y","mouse","this","style","maxScreenWidthForReposition","repositionNodes","workers","_","filter","nodes","repositoryType","console","log","workerRows","min","workerColumns","ceil","wRow","wCol","usableWidth","widthDelta","px","py","fixed","repositionUnconnectedWorkers","masters","masterRows","masterColumns","mRow","mCol","repositionUnconnectedMasters","each","push","horizontalSpacing","mastersSpacing","workersSpacing","repositionConnectedMastersAndWorkers","render","undefined","stop","selectAll","remove","layout","links","gravity","charge","size","linkStrength","linkDistance","source","target","pathLinks","d","deltaX","deltaY","dist","sqrt","normX","normY","sourcePadding","left","targetPadding","right","pathGroupWarnings","circle","path","updateStatuses","status","restart","updateWarnings","reversePeerMissing","updateColors","clusters","start","hasWorkers","nodeColors","refreshMastersIcons","text","iconText","resize","resume","cluster","indexOf","iconTextContour","readonly","mode","pathGroup","data","enter","button","stopPropagation","disconnectLinkConfirm","$","hide","show","exit","reflexive","g","tooltip","windowWidth","window","pageX","pageY","copy","connectNodes","parser","document","createElement","gHostLabel","gHostLabelRect","textOffset","local","href","location","hostname","ip","blocks","split","sequence","parseInt","containsIPV4","port","labelHost","gNodeLabel","gNodeLabelRect","name","labelNode","getBBox","node","e","needsToRestart","updating"],"mappings":"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","file":"8.40e2c91636ed46607383.bundle.js","sourcesContent":["import 'angular/utils/local-storage-adapter';\n\nconst navigationBarWidthFull = 240;\nconst navigationBarWidthCollapsed = 70;\nlet navigationBarWidth = navigationBarWidthFull;\n\nconst radius = 24;\nconst radius_x = 28;\nconst clusterColors = ['#0CB0A0', '#F04E23', '#003663', '#ffcc99', '#99ccff', '#ccff99', '#ff99cc', '#99ffcc'];\n\nfunction containsIPV4(ip) {\n    var blocks = ip.split(\".\");\n    for (var i = 0, sequence = 0; i < blocks.length; i++) {\n        if (parseInt(blocks[i], 10) >= 0 && parseInt(blocks[i], 10) <= 255) {\n            sequence++;\n        } else {\n            sequence = 0;\n        }\n        if (sequence === 4) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction workerIsConnected(n) {\n    return n.weight > 0;\n}\n\nfunction masterIsConnected(n) {\n    return n.weight > 0;\n}\n\nvar clusterManagementDirectives = angular.module('graphdb.framework.clustermanagement.directives', [\n    'graphdb.framework.utils.localstorageadapter'\n]);\n\nclusterManagementDirectives.directive('clusterGraphicalView', ['$window', '$timeout', 'LocalStorageAdapter', 'LSKeys',\n    function ($window, $timeout, LocalStorageAdapter, LSKeys) {\n    return {\n        restrict: 'A',\n        //scope: {}, //no need for isolated scope here\n        link: function (scope, element) {\n            function getWindowWidth() {\n                var collapsed = LocalStorageAdapter.get(LSKeys.MENU_STATE) === 'collapsedMenu';\n                navigationBarWidth = collapsed ? navigationBarWidthCollapsed : navigationBarWidthFull;\n\n                // 95% avoids horizontal scrollbars and adds some margin\n                return Math.max(Math.floor(($window.innerWidth - navigationBarWidth) * 0.95), 600);\n            }\n\n            function getWindowHeight() {\n                // 95% avoids horizontal scrollbars and adds some margin\n                return Math.max($window.innerHeight - 120, 600);\n            }\n\n            var width = getWindowWidth(),\n                height = getWindowHeight(),\n                colors = function (i) {\n                    return clusterColors[i % clusterColors.length];\n                };\n\n            scope.width = function () {\n                return width;\n            };\n\n            scope.height = function () {\n                return height;\n            };\n\n            var svg = d3.select(element[0])\n                .append('svg')\n                .attr('width', width)\n                .attr('height', height);\n\n            // line displayed when dragging new nodes\n            var drag_line = svg.append('svg:path')\n                .attr('class', 'link dragline')\n                .attr('visibility', 'hidden')\n                .attr('d', 'M0,0L0,0');\n\n            var force = null;\n\n            var currentCluster = 0;\n\n            // mouse event vars\n            var mousedown_link = null,\n                mousedown_node = null,\n                mousedown_svg = null,\n                mouseup_node = null;\n\n            function resetMouseVars() {\n                mousedown_node = null;\n                mouseup_node = null;\n                mousedown_link = null;\n            }\n\n            function mousedown() {\n                // prevent I-bar on drag\n                d3.event.preventDefault();\n\n                // because :active only works in WebKit?\n                svg.classed('active', true);\n\n                if (d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n\n                scope.selectNode(null);\n            }\n\n            function mousemove() {\n                if (!mousedown_node) return;\n\n                // update drag line\n                drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n            }\n\n            function mouseup() {\n                if (mousedown_node) {\n                    // hide drag line\n                    drag_line\n                        .attr('visibility', \"hidden\")\n                        .style('marker-end', '');\n                }\n\n                // because :active only works in WebKit?\n                svg.classed('active', false);\n\n                // unhighlight source node\n                d3.select(mousedown_svg).classed('dragged', false);\n\n                // clear mouse event vars\n                resetMouseVars();\n            }\n\n            // app starts here\n            svg.on('mousedown', mousedown)\n                .on('mousemove', mousemove)\n                .on('mouseup', mouseup);\n\n            var maxScreenWidthForReposition = 1200;\n\n            function repositionNodes() {\n                repositionUnconnectedWorkers();\n                repositionUnconnectedMasters();\n                repositionConnectedMastersAndWorkers();\n            }\n\n            function repositionConnectedMastersAndWorkers() {\n                var masters = [];\n                var workers = [];\n\n                _.each(scope.nodes, function (n) {\n                    if (n.repositoryType === \"master\" && masterIsConnected(n)) {\n                        masters.push(n);\n                    } else if (n.repositoryType === \"worker\" && workerIsConnected(n)) {\n                        workers.push(n);\n                    }\n                });\n\n                var horizontalSpacing = scope.width() / 3;\n\n                // Masters initial positions are in the left side of the screen,\n                // ordered top to bottom\n                var mastersSpacing = scope.height() / (masters.length + 1);\n                for (var i = 0; i < masters.length; i++) {\n                    masters[i].px = masters[i].x = horizontalSpacing;\n                    masters[i].py = masters[i].y = mastersSpacing * (i + 1);\n                    masters[i].fixed = false;\n                }\n\n                // Workers initial positions are in the right side of the screen,\n                // ordered top to bottom\n                var workersSpacing = scope.height() / (workers.length + 1);\n                for (var i = 0; i < workers.length; i++) {\n                    workers[i].px = workers[i].x = horizontalSpacing * 2;\n                    workers[i].py = workers[i].y = workersSpacing * (i + 1);\n                    workers[i].fixed = false;\n                }\n            }\n\n            function repositionUnconnectedWorkers() {\n                var workers = _.filter(scope.nodes, function (n) {\n                    return n.repositoryType === 'worker' && !workerIsConnected(n);\n                });\n\n                // Between 3 and 6 rows, depending on window height\n                console.log(Math.floor((height - 50) / 110));\n                var workerRows = Math.max(Math.min(Math.floor(height / 110), 6), 3);\n                var workerColumns = Math.ceil(workers.length / workerRows);\n\n                for (var i = 0; i < workers.length; i++) {\n                    var wRow = i % workerRows;\n                    var wCol = workerColumns - Math.floor(i / workerRows) - 1;\n\n                    var usableWidth = Math.min(maxScreenWidthForReposition, scope.width());\n                    var widthDelta = scope.width() - usableWidth;\n                    workers[i].px = workers[i].x = scope.width() - widthDelta / 2 - wCol * 64 - 35;\n                    workers[i].py = workers[i].y = wRow * 110 + 50;\n\n                    workers[i].fixed = true;\n                }\n            }\n\n            function repositionUnconnectedMasters() {\n                var masters = _.filter(scope.nodes, function (n) {\n                    return n.repositoryType === 'master' && !masterIsConnected(n);\n                });\n\n                // Between 3 and 6 rows, depending on window height\n                var masterRows = Math.max(Math.min(Math.floor((height - 200) / 110), 6), 3);\n                var masterColumns = Math.ceil(masters.length / masterRows);\n\n                for (var i = 0; i < masters.length; i++) {\n                    var mRow = i % masterRows;\n                    var mCol = masterColumns - Math.floor(i / masterRows) - 1;\n\n                    var usableWidth = Math.min(maxScreenWidthForReposition, scope.width());\n                    var widthDelta = scope.width() - usableWidth;\n                    masters[i].px = masters[i].x = widthDelta / 2 + mCol * 64 + 35;\n                    masters[i].py = masters[i].y = mRow * 110 + 50;\n\n                    masters[i].fixed = true;\n                }\n            }\n\n            /* Main function that builds the d3 UI */\n            scope.render = function () {\n                if (scope.nodes === undefined) {\n                    return;\n                }\n\n                if (force !== null) {\n                    force.stop();\n                }\n\n                // remove all previous items before render\n                svg.selectAll('g').remove();\n\n                // init D3 force layout\n                force = d3.layout.force()\n                    .nodes(scope.nodes)\n                    .links(scope.links)\n                    // Those parameters are really important for stacking the clusters properly.\n                    // Take care when changing them please!\n                    .gravity(0)\n                    .charge(-50)\n                    .size([width, height])\n                    .linkStrength(0.05)\n                    .linkDistance(function (link) {\n                        if (link.source.repositoryType === \"master\" && link.target.repositoryType === \"master\") {\n                            return Math.min(width, 1200) * 0.208;\n                        }\n                        return Math.min(width, 1200) * 0.375;\n                    })\n                    .on('tick', tick);\n\n                // handles to link and node element groups\n                var path = svg.append('svg:g').selectAll('g'),\n                    circle = svg.append('svg:g').selectAll('g'),\n                    pathLinks,\n                    pathGroupWarnings;\n\n                // update force layout (called automatically each iteration)\n                function tick() {\n                    // draw directed edges with proper padding from node centers\n\n                    pathLinks.attr('d', function (d) {\n                        var deltaX = d.target.x - d.source.x,\n                            deltaY = d.target.y - d.source.y,\n                            dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n                            normX = deltaX / dist,\n                            normY = deltaY / dist,\n                            sourcePadding = d.left ? 17 : 12,\n                            targetPadding = d.right ? 17 : 12,\n                            sourceX = d.source.x + (sourcePadding * normX),\n                            sourceY = d.source.y + (sourcePadding * normY),\n                            targetX = d.target.x - (targetPadding * normX),\n                            targetY = d.target.y - (targetPadding * normY);\n                        return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n                    });\n\n                    // Position reversePeerMissing warning icons\n                    pathGroupWarnings.attr('transform', function (d) {\n                        var deltaX = d.target.x - d.source.x,\n                            deltaY = d.target.y - d.source.y,\n                            dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n                            normX = deltaX / dist,\n                            normY = deltaY / dist,\n                            targetPadding = 70,\n                            targetX = d.target.x - (targetPadding * normX),\n                            targetY = d.target.y - (targetPadding * normY);\n\n                        return 'translate(' + targetX + ' ' + targetY + ')';\n                    });\n\n                    circle.attr('transform', function (d) {\n                        if (!d.fixed) {\n                            if (d.x > width - 50) {\n                                d.x -= 50;\n                            } else if (d.x < 50) {\n                                d.x = 50;\n                            }\n\n                            if (d.y > height - 50) {\n                                d.y -= 50;\n                            } else if (d.y < 50) {\n                                d.y = 50;\n                            }\n                        }\n\n                        return 'translate(' + d.x + ',' + d.y + ')';\n                    });\n                }\n\n                function nodeColors(d) {\n                    if (d.cluster === undefined || d.cluster.length === 0) {\n                        return \"#888\";\n                    }\n                    if (d.repositoryType === \"worker\") {\n                        if (d.cluster.indexOf(currentCluster) >= 0) {\n                            return colors(currentCluster);\n                        } else {\n                            return colors(d.cluster[0]);\n                        }\n                    } else {\n                        return colors(d.cluster);\n                    }\n                }\n\n                function iconTextContour(d) {\n                    if (d.repositoryType === \"master\") {\n                        if (d.readonly && d.mode === \"MUTE\") {\n                            return \"\\ue910\";\n                        } else if (d.readonly) {\n                            return \"\\ue90b\";\n                        } else if (d.mode === \"MUTE\") {\n                            return \"\\ue90b\";\n                        } else {\n                            return \"\\ue906\";\n                        }\n                    } else if (d.repositoryType === \"worker\") {\n                        return \"\\ue906\";\n                    }\n                }\n\n                function iconText(d) {\n                    if (d.repositoryType === \"master\") {\n                        if (d.readonly && d.mode === \"MUTE\") {\n                            return \"\\ue913\";\n                        } else if (d.readonly) {\n                            return \"\\ue938\";\n                        } else if (d.mode === \"MUTE\") {\n                            return \"\\ue937\";\n                        } else {\n                            return \"\\ue939\";\n                        }\n                    } else if (d.repositoryType === \"worker\") {\n                        return \"\\ue93c\";\n                    }\n                }\n\n                // Updates the status of existing links\n                function updateStatuses() {\n                    path.select('.link').attr('class', function (link) {\n                        return link.status + ' link';\n                    });\n                }\n\n                // update graph (called when needed)\n                function restart() {\n                    // path (link) group\n                    path = path.data(scope.links);\n\n                    // add new links\n                    var pathGroup = path.enter().append('svg:g');\n\n                    pathGroup.append('svg:path')\n                        .attr('class', function (link) {\n                            var status = link.status;\n                            return status + ' link';\n                        })\n                        .on('mousedown', function (d) {\n                            // delete link\n                            if (d3.event.button === 0) {\n                                // Primary mouse button\n                                d3.event.stopPropagation();\n                                scope.disconnectLinkConfirm(d, restart);\n                            }\n                        })\n                        .on('mouseover', function () {\n                            $('.node-default-tip').hide();\n                            $('.node-disconnect-tip').show();\n                        })\n                        .on('mouseout', function () {\n                            $('.node-default-tip').show();\n                            $('.node-disconnect-tip').hide();\n                        });\n\n                    pathLinks = path.select('path');\n\n                    pathGroupWarnings = pathGroup.append('svg:g')\n                        .classed('link-warning', true)\n                        .on('mouseover', function () {\n                            $('.node-default-tip').hide();\n                            $('.node-warning-tip').show();\n                        })\n                        .on('mouseout', function () {\n                            $('.node-default-tip').show();\n                            $('.node-warning-tip').hide();\n                        });\n\n                    pathGroupWarnings.append('svg:polygon')\n                    //.attr('points', '0 -13.333, 11.547 6.666, -11.547 6.666')\n                    //.attr('points', '0 -14.6666, 12.7017 7.3333, -12.7017 7.3333')\n                        .attr('points', '0 -16.6666, 14.4337 8.3333, -14.4337 8.3333')\n                        .attr('fill', 'white');\n                    pathGroupWarnings.append('svg:text')\n                        .text('\\ue920')\n                        .attr('text-anchor', 'middle')\n                        .attr('alignment-baseline', 'baseline')\n                        .classed('icon-any', true);\n\n                    pathGroupWarnings = path.select('g');\n\n                    // remove old links\n                    path.exit().remove();\n\n\n                    // circle (node) group\n                    circle = circle.data(scope.nodes);\n\n                    // update existing nodes (reflexive & selected visual states)\n\n                    circle.selectAll('.repo')\n                        .style('fill', nodeColors)\n                        .classed('reflexive', function (d) {\n                            return d.reflexive;\n                        });\n\n                    // add new nodes\n                    var g = circle.enter().append('svg:g');\n\n                    var circleGroup = g.append('svg:g')\n                        .attr('class', 'node')\n                        .attr('title', 'Drag and drop node to connect to other nodes')\n                        .classed('reflexive', function (d) {\n                            return d.reflexive;\n                        })\n                        .on('mouseover', function (d) {\n                            if (!mousedown_node || d === mousedown_node) {\n                                $('.node-default-tip').hide();\n                                $('.node-connect-tip').show();\n                            } else {\n                                // highlight target node\n                                d3.select(this).classed('dragged', true);\n                            }\n                        })\n                        .on('mouseout', function (d) {\n                            if (!mousedown_node || d === mousedown_node) {\n                                $('.node-default-tip').show();\n                                $('.node-connect-tip').hide();\n                            } else {\n                                // unhighlight target node\n                                d3.select(this).classed('dragged', false);\n                            }\n                        })\n                        .on('mousedown', function (d) {\n                            if (d3.event.ctrlKey || d3.event.button !== 0) return;\n\n                            // select node\n                            mousedown_node = d;\n                            mousedown_svg = this;\n\n                            // reposition drag line\n                            drag_line\n                                .style('marker-end', 'url(#end-arrow)')\n                                .attr('visibility', \"visible\")\n                                .attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n                            // highlight source node\n                            d3.select(this).classed('dragged', true);\n                        })\n                        .on('click', function (d) {\n                            // highlight node for tooltip\n                            d3.select(this).classed('dragged', true);\n\n                            scope.selectNode(d);\n                            // position the tooltip according to the node!\n\n                            var tooltip = d3.select('.nodetooltip');\n                            var windowWidth = $(window).width();\n                            if (d3.event.pageX < windowWidth / 2) {\n                                // left\n                                tooltip.style(\"left\", d3.event.pageX + \"px\")\n                                tooltip.style(\"right\", \"\")\n                            } else {\n                                // right\n                                tooltip.style(\"left\", \"\");\n                                tooltip.style(\"right\", (windowWidth - d3.event.pageX) + \"px\")\n                            }\n                            tooltip.style(\"top\", (d3.event.pageY - 28) + \"px\");\n\n                            console.log(angular.copy(d3.event));\n                        })\n                        .on('mouseup', function (d) {\n                            if (!mousedown_node) return;\n\n                            drag_line\n                                .attr('visibility', 'hidden')\n                                .style('marker-end', '');\n\n                            // check for drag-to-self\n                            mouseup_node = d;\n                            if (mouseup_node === mousedown_node) {\n                                resetMouseVars();\n                                return;\n                            }\n\n                            // unhighlight target node\n                            d3.select(this).classed('dragged', false);\n\n                            scope.connectNodes(mousedown_node, mouseup_node, restart);\n                            scope.selectNode(null);\n                        });\n\n                    // The icons for workers and masters consist of several elements:\n                    // 1) Outer bigger circle, normally kept transparent and used for better mouse aim\n                    //    as well as for highlighting nodes when it becomes visible.\n                    circleGroup.append('svg:circle')\n                        .attr('r', radius + 10);\n\n                    // Create a dummy anchor node\n                    var parser = document.createElement('a');\n\n                    // 2) Contour icon in white to keep the transparent parts of the actual icons white\n                    g.append('svg:text')\n                        .attr('y', 25)\n                        .attr('text-anchor', 'middle')\n                        // attribute not supported by firefox so we instead play with the y axis\n                        //.attr('alignment-baseline', 'central')\n                        .attr('class', 'icon-any')\n                        .attr('fill', 'white')\n                        .text(iconTextContour);\n\n                    // 3) Actual master or worker icon.\n                    g.append('svg:text')\n                        .attr('y', 25)\n                        .attr('text-anchor', 'middle')\n                        // attribute not supported by firefox so we instead play with the y axis\n                        //.attr('alignment-baseline', 'central')\n                        .attr('class', 'icon-any repo')\n                        .attr('fill', nodeColors)\n                        .text(iconText);\n\n                    var gHostLabel = g.append('svg:g');\n\n                    var gHostLabelRect = gHostLabel.append('svg:rect');\n\n                    var textOffset = 38;\n                    var hostTextDelta = 15;\n\n                    // node host:port or local\n                    gHostLabel.append('svg:text')\n                        .attr('x', 0)\n                        .attr('y', function (d) {\n                            return textOffset + hostTextDelta;\n                        })\n                        .attr('class', 'id id-host')\n                        .text(function (d) {\n                            if (d.local) {\n                                return 'local';\n                            } else {\n                                parser.href = d.location;\n                                var hostname = parser.hostname;\n                                if (!containsIPV4(parser.hostname)) {\n                                    hostname = parser.hostname.split('.')[0];\n                                }\n                                return hostname + \":\" + parser.port;\n                            }\n                        })\n                        //.style('opacity', 0.7)\n                        .each(function (d) {\n                            d.labelHost = this;\n                        });\n\n\n                    var gNodeLabel = g.append('svg:g');\n\n                    var gNodeLabelRect = gNodeLabel.append('svg:rect');\n\n                    // show node names\n                    gNodeLabel.append('svg:text')\n                        .attr('x', 0)\n                        .attr('y', textOffset)\n                        .attr('class', 'id')\n                        .text(function (d) {\n                            return d.name;\n                        })\n                        .each(function (d) {\n                            d.labelNode = this;\n                        });\n\n\n                    // this will draw a single line that will strike i.e. mark the node as disabled\n                    // this is mostly done when the node is in some inconsistent state(we don't know\n                    // it's location or it is a master and we have no proper jmx connection to that location.\n                    g.append('svg:line')\n                        .attr('x1', -radius_x - 5)\n                        .attr('x2', radius_x + 5)\n                        .attr('y1', 0)\n                        .attr('y2', 0)\n                        .attr('stroke', 'red')\n                        .attr('stroke-width', 4)\n                        .attr('transform', 'rotate(-45)')\n                        .attr('class', 'disabled-bar')\n                        .attr('visibility', function (d) {\n                            return 'disabledReason' in d ? 'visible' : 'hidden'\n                        })\n                    ;\n\n                    // remove old nodes\n                    circle.exit().remove();\n\n                    // set the graph in motion\n                    force.start();\n\n                    // Needs to happen after start as we rely on node.weight\n                    repositionNodes();\n\n                    // timeouts + try/catch: workarounds for issues, see GDB-1188\n                    $timeout(function () {\n                        function getBBox(node) {\n                            // Due to an ancient yet unfixed bug in Firefox (https://bugzilla.mozilla.org/show_bug.cgi?id=612118)\n                            // getBBox() throws an error _sometimes_ (if the labelHost and labelNode aren't rendered yet)\n                            // and hell breaks loose. We overcome that by catching the error and providing a bbox with zeros\n                            // (this is what good browsers do!)\n                            try {\n                                return node.getBBox();\n                            } catch (e) {\n                                return {x: 0, y: 0, width: 0, height: 0}\n                            }\n                        }\n\n                        gHostLabelRect.attr('width', function (d) {\n                            return getBBox(d.labelHost)['width'] + 4;\n                        }).attr('height', function (d) {\n                            return getBBox(d.labelHost)['height'];\n                        }).attr('x', function (d) {\n                            return getBBox(d.labelHost)['x'] - 2;\n                        }).attr('y', function (d) {\n                            return getBBox(d.labelHost)['y'];\n                        }).attr('fill', '#EEEEEE');\n\n                        gNodeLabelRect.attr('width', function (d) {\n                            return getBBox(d.labelNode)['width'] + 4;\n                        }).attr('height', function (d) {\n                            return getBBox(d.labelNode)['height'];\n                        }).attr('x', function (d) {\n                            return getBBox(d.labelNode)['x'] - 2;\n                        }).attr('y', function (d) {\n                            return getBBox(d.labelNode)['y'];\n                        }).attr('fill', '#EEEEEE');\n                    }, 100);\n\n                    // updating done\n                    scope.needsToRestart = false;\n                    scope.updating = false;\n                }\n\n                scope.updateStatuses = updateStatuses;\n                scope.restart = restart;\n\n                function updateWarnings() {\n                    path.select('g')\n                        .classed('link-warning-visible', function (d) {\n                            return d.reversePeerMissing && !('disabledReason' in d.target);\n                        });\n                }\n\n                scope.updateWarnings = updateWarnings;\n\n                function updateColors() {\n                    currentCluster++;\n                    if (currentCluster >= scope.clusters.length) {\n                        currentCluster = 0;\n                    }\n\n                    // try to find the next cluster with workers\n                    var start = currentCluster;\n                    while (!scope.clusters[currentCluster].hasWorkers) {\n                        currentCluster++;\n                        if (currentCluster >= scope.clusters.length) {\n                            currentCluster = 0;\n                        }\n                        if (currentCluster === start) {\n                            // didn't find any clusters with workers, no need to update colors\n                            return;\n                        }\n                    }\n                    circle.selectAll('.repo').style('fill', nodeColors);\n                }\n\n                scope.updateColors = updateColors;\n\n                function refreshMastersIcons() {\n                    d3.selectAll('.repo').text(iconText);\n                }\n\n                scope.refreshMastersIcons = refreshMastersIcons;\n\n                scope.resize = function () {\n                    // recalculates with new screen width\n                    width = getWindowWidth();\n                    height = getWindowHeight();\n                    svg.attr(\"width\", width);\n                    svg.attr(\"height\", height);\n                    force.size([width, height]).resume();\n                    scope.restart();\n                };\n\n                restart();\n            };\n        }\n    };\n}]);\n"],"sourceRoot":""}