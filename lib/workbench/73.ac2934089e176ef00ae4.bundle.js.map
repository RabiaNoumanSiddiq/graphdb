{"version":3,"sources":["webpack:///./src/js/angular/plugin-registry.js"],"names":["window","PluginRegistry","plugins","registry","isNumber","variable","isNaN","parseFloat","isFinite","isDefined","registerPlugin","extensionPoint","pluginDefinition","disabled","currentPointPlugins","order","ordered","Error","priority","assignDefaultPriority","currentExtensions","sameOrderPluginIndex","forEach","element","index","sameOrderPlugin","push","sort","prev","current","processOrderedPlugin","add","Array","isArray","get","clear","listModules"],"mappings":"4EAAAA,OAAOC,eAAiB,WAEpB,MAAMC,EAAU,GAEVC,EAAW,GA0CjB,SAASC,EAASC,GACd,OAAQC,MAAMC,WAAWF,KAAcG,SAASH,IAAiC,iBAAbA,EAGxE,SAASI,EAAUJ,GACf,YAA2B,IAAbA,EAGlB,SAASK,EAAeC,EAAgBC,GACpC,GAAIA,EAAiBC,SACjB,OAGJ,IAAIC,EAAsBZ,EAAQS,GASlC,GAPKF,EAAUK,KACXA,EAAsB,GACtBA,EAAoBH,eAAiBA,EACrCT,EAAQS,GAAkBG,GAI1BV,EAASQ,EAAiBG,OAAQ,CAClC,IAAoC,IAAhCD,EAAoBE,QACpB,MAAM,IAAIC,MAAM,yEAlC5B,SAA+BL,GAC3B,IAAKR,EAASQ,EAAiBM,UAAW,CACtC,GAAIT,EAAUG,EAAiBM,UAC3B,MAAM,IAAID,MAAM,2CAGpBL,EAAiBM,SAAW,GA+B5BC,CAAsBP,GAnE9B,SAA8BA,EAAkBQ,GAC5C,IAAIC,EAWJ,GATAD,EAAkBE,SAAQ,SAASC,EAASC,GACxC,GAAIZ,EAAiBG,QAAUQ,EAAQR,MAEnC,OADAM,EAAuBG,GAChB,KAMXf,EAAUY,GAAuB,CACjC,MAAMI,EAAkBL,EAAkBC,GAE1C,GAAIT,EAAiBM,WAAaO,EAAgBP,SAC9C,MAAM,IAAID,MAAM,gFAAkFG,EAAkBT,eAC9G,YAAcC,EAAiBG,MAAQ,KACtCH,EAAiBM,SAAWO,EAAgBP,WACnDE,EAAkBC,GAAwBT,QAG9CQ,EAAkBM,KAAKd,GAG3BQ,EAAkBO,MAAK,SAASC,EAAMC,GAClC,OAAOD,EAAKb,MAAQc,EAAQd,SA2C5Be,CAAqBlB,EAAkBE,GACvCA,EAAoBE,SAAU,MAC3B,CACH,IAAoC,IAAhCF,EAAoBE,QACpB,MAAM,IAAIC,MAAM,wEAGpBH,EAAoBY,KAAKd,GACzBE,EAAoBE,SAAU,GA0BtC,OAtBAb,EAAS4B,IAAM,SAASpB,EAAgBC,GAChCoB,MAAMC,QAAQrB,GACdA,EAAiBU,SAAQ,SAASC,GAC9Bb,EAAeC,EAAgBY,MAGnCb,EAAeC,EAAgBC,IAIvCT,EAAS+B,IAAM,SAASvB,GACpB,OAAOT,EAAQS,IAGnBR,EAASgC,MAAQ,SAASxB,GACtBT,EAAQS,GAAkB,IAG9BR,EAASiC,YAAc,WACnB,OAAOlC,GAGJC,EA7Ga","file":"73.ac2934089e176ef00ae4.bundle.js","sourcesContent":["window.PluginRegistry = (function() {\n\n    const plugins = [];\n\n    const registry = {};\n\n    function processOrderedPlugin(pluginDefinition, currentExtensions) {\n        let sameOrderPluginIndex;\n\n        currentExtensions.forEach(function(element, index) {\n            if (pluginDefinition.order === element.order) {\n                sameOrderPluginIndex = index;\n                return false; // NOSONAR\n            }\n        });\n\n        // If there is an existing plugin with the same order, the one with higher priority gets added\n        // An error gets thrown for two plugins with the same order and same priority\n        if (isDefined(sameOrderPluginIndex)) {\n            const sameOrderPlugin = currentExtensions[sameOrderPluginIndex];\n\n            if (pluginDefinition.priority === sameOrderPlugin.priority) {\n                throw new Error('There is already a plugin with the same order and priority. Extension point \"' + currentExtensions.extensionPoint\n                    + '\" order \"' + pluginDefinition.order + '\"');\n            } else if (pluginDefinition.priority > sameOrderPlugin.priority) {\n                currentExtensions[sameOrderPluginIndex] = pluginDefinition;\n            }\n        } else {\n            currentExtensions.push(pluginDefinition);\n        }\n\n        currentExtensions.sort(function(prev, current) {\n            return prev.order - current.order;\n        });\n    }\n\n    function assignDefaultPriority(pluginDefinition) {\n        if (!isNumber(pluginDefinition.priority)) {\n            if (isDefined(pluginDefinition.priority)) {\n                throw new Error('Priority is defined but is not a number');\n            }\n\n            pluginDefinition.priority = 0;\n        }\n    }\n\n    function isNumber(variable) {\n        return !isNaN(parseFloat(variable)) && isFinite(variable) && typeof variable !== 'string';\n    }\n\n    function isDefined(variable) {\n        return typeof variable !== 'undefined';\n    }\n\n    function registerPlugin(extensionPoint, pluginDefinition) {\n        if (pluginDefinition.disabled) {\n            return;\n        }\n\n        let currentPointPlugins = plugins[extensionPoint];\n\n        if (!isDefined(currentPointPlugins)) {\n            currentPointPlugins = [];\n            currentPointPlugins.extensionPoint = extensionPoint;\n            plugins[extensionPoint] = currentPointPlugins;\n        }\n\n        // If there is even one ordered plugin, all of the plugins should be ordered too\n        if (isNumber(pluginDefinition.order)) {\n            if (currentPointPlugins.ordered === false) {\n                throw new Error('Cannot add an ordered plugin definition to unordered extension point');\n            }\n\n            assignDefaultPriority(pluginDefinition);\n\n            processOrderedPlugin(pluginDefinition, currentPointPlugins);\n            currentPointPlugins.ordered = true;\n        } else {\n            if (currentPointPlugins.ordered === true) {\n                throw new Error('Cannot add unordered plugin definition to an ordered extension point');\n            }\n\n            currentPointPlugins.push(pluginDefinition);\n            currentPointPlugins.ordered = false;\n        }\n    }\n\n    registry.add = function(extensionPoint, pluginDefinition) {\n        if (Array.isArray(pluginDefinition)) {\n            pluginDefinition.forEach(function(element) {\n                registerPlugin(extensionPoint, element);\n            });\n        } else {\n            registerPlugin(extensionPoint, pluginDefinition);\n        }\n    };\n\n    registry.get = function(extensionPoint) {\n        return plugins[extensionPoint];\n    };\n\n    registry.clear = function(extensionPoint) {\n        plugins[extensionPoint] = [];\n    };\n\n    registry.listModules = function() {\n        return plugins;\n    };\n\n    return registry;\n\n})();\n"],"sourceRoot":""}