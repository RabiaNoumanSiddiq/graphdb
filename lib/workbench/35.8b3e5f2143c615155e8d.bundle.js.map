{"version":3,"sources":["webpack:///./src/js/angular/rest/connectors.rest.service.js","webpack:///./src/js/angular/externalsync/controllers.js"],"names":["angular","module","factory","ConnectorsRestService","$inject","CONNECTORS_ENDPOINT","$http","getConnectors","get","initConnector","prefix","hasConnector","checkConnector","data","post","headers","jsonToFormData","str","Object","keys","forEach","key","push","encodeURIComponent","join","mapCreateValuesToUiValues","values","options","i","length","option","__type","__name","j","__childOptions","child","k","valueK","hasOwnProperty","isDefined","__defaultValue","optionEl","isUndefined","map","_","value","toJson","_evaluateSparqlQuery","http","repository","query","buildNamePrefix","substring","createConnectorQuery","name","fields","reportError","fcopy","sortObject","obj","newObject","each","childOption","copy","arrayMap","reduce","acc","Error","fromJson","e","__label","message","removeEmptyValues","Array","isArray","filter","item","trim","finalString","replace","ConnectorsCtrl","$scope","$repositories","$modal","toastr","ModalService","$q","RDF4JRepositoriesRestService","resetProgress","repair","beingBuiltConnector","percentDone","status","processedEntities","estimatedEntities","indexedEntities","entitiesPerSecond","actionName","waitOnRepairStartOnce","eta","inline","iri","openProgressModal","$","extend","doneCallback","modalInstance","dismiss","open","templateUrl","controller","size","backdrop","scope","executeCreate","connector","errorCallback","modal","addStatements","getActiveRepository","update","then","res","existing","success","err","error","getError","finally","loader","controllers","definitions","getLoaderMessage","timeSeconds","Date","now","loaderStartTime","timeHuman","getHumanReadableSeconds","progressMessage","extraMessage","setLoader","isRunning","canWriteActiveRepo","connectors","all","connectorIris","createStatusQueryForAny","evaluateSparqlQuery","results","bindings","statusObject","JSON","parse","console","parseFirstBuildingResult","d","split","catch","getOptions","isEmpty","isObject","toPrettyJson","$watch","getActiveLocation","copyConnector","newValues","resolve","result","skipConversion","newConnector","inst","type","openSimpleModal","title","warning","delete","isExternal","indexOf","force","namePrefix","deleteConnectorQuery","viewQuery","DeleteConnectorCtrl","$modalInstance","ok","close","cancel","ExtendNewConnectorCtrl","toQuery","label","addField","index","optionName","newField","defaultValues","splice","addOption","array","deleteOption","addMapOption","deleteMapOption","form","$valid","CreateConnectorCtrl","$controller","this","CreateProgressCtrl","$interval","initProgress","statusIri","createStatusQueryForIri","progressInterval","getFirstStatusFromResult","toFixed","etaSeconds","$on","input","Math","ceil"],"mappings":"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","file":"35.8b3e5f2143c615155e8d.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.connectors.service', [])\n    .factory('ConnectorsRestService', ConnectorsRestService);\n\nConnectorsRestService.$inject = ['$http'];\n\nconst CONNECTORS_ENDPOINT = 'rest/connectors';\n\nfunction ConnectorsRestService($http) {\n\n    return {\n        getConnectors,\n        initConnector,\n        hasConnector,\n        checkConnector\n    };\n\n    function getConnectors() {\n        return $http.get(CONNECTORS_ENDPOINT);\n    }\n\n    function initConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/options?prefix=${prefix}`);\n    }\n\n    function hasConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/existing?prefix=${prefix}`);\n    }\n\n    function checkConnector(data) {\n        return $http.post(`${CONNECTORS_ENDPOINT}/check`, data, {\n            headers: {\n                'Content-Type': 'text/plain'\n            }\n        });\n    }\n}\n","import 'angular/rest/rdf4j.repositories.rest.service';\nimport 'angular/rest/connectors.rest.service';\n\nconst modules = [\n    'graphdb.framework.rest.rdf4j.repositories.service',\n    'graphdb.framework.rest.connectors.service'\n];\n\nangular\n    .module('graphdb.framework.externalsync.controllers', modules)\n    .controller('ConnectorsCtrl', ConnectorsCtrl)\n    .controller('ExtendNewConnectorCtrl', ExtendNewConnectorCtrl)\n    .controller('CreateConnectorCtrl', CreateConnectorCtrl)\n    .controller('CreateProgressCtrl', CreateProgressCtrl)\n    .controller('DeleteConnectorCtrl', DeleteConnectorCtrl)\n    .filter('ceil', ceil);\n\nfunction jsonToFormData(data) {\n    const str = [];\n    Object.keys(data).forEach(function (key) {\n        str.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    });\n    return str.join('&');\n}\n\nfunction toArrayMap(map) {\n    return _.map(map, function (value, key) {\n        return {key: key, value: value};\n    });\n}\n\nfunction fromArrayMap(arrayMap) {\n    return _.reduce(arrayMap, function (acc, value) {\n        if (value.key === '' && value.value === '') {\n            // empty pair, skip it\n        } else if (value.key === '') {\n            throw new Error('Key may not be empty with value \"' + value.value + '\"');\n        } else if (acc.hasOwnProperty(value.key)) {\n            throw new Error('Duplicate key ' + value.key);\n        } else {\n            acc[value.key] = value.value;\n        }\n        return acc;\n    }, {});\n}\n\nfunction mapCreateValuesToUiValues(values, options) {\n    for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        if (option.__type === 'StringArray') {\n            if (!values[option.__name]) {\n                values[option.__name] = [''];\n            }\n        } else if (option.__type === 'OptionArray') {\n            if (!values[option.__name]) { // values has no entry for this option\n                values[option.__name] = [];\n                const optionEl = {};\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'StringArray') {\n                        optionEl[child.__name] = [''];\n                    } else {\n                        optionEl[child.__name] = (!angular.isUndefined(child.__defaultValue) ? child.__defaultValue : '');\n                    }\n                }\n                values[option.__name].push(optionEl);\n            } else { // values already has en entry for this option\n                // Copies the default value for Boolean child options if no explicit value is set\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'Boolean') {\n                        for (let k = 0; k < values[option.__name].length; k++) {\n                            const valueK = values[option.__name][k];\n                            if (!valueK.hasOwnProperty([child.__name]) && angular.isDefined(child.__defaultValue)) {\n                                valueK[child.__name] = child.__defaultValue;\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (option.__type === 'Map') {\n            if (!values[option.__name]) {\n                values[option.__name] = [];\n            } else {\n                values[option.__name] = toArrayMap(values[option.__name]);\n            }\n        } else if (option.__type === 'JsonString') {\n            if (values[option.__name]) {\n                values[option.__name] = angular.toJson(values[option.__name], 2);\n            }\n        } else {\n            if (angular.isUndefined(values[option.__name])) {\n                values[option.__name] = (!angular.isUndefined(option.__defaultValue) ? option.__defaultValue : '');\n            }\n        }\n    }\n\n    return values;\n}\n\nfunction _evaluateSparqlQuery(http, repository, query) {\n    return http.post('repositories/' + repository, jsonToFormData({query: query}),\n        {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/sparql-results+json',\n                'X-GraphDB-Local-Consistency': 'updating'\n            }\n        });\n}\n\nfunction buildNamePrefix(prefix) {\n    return prefix.substring(0, prefix.length - 1) + '/instance#';\n}\n\nfunction createConnectorQuery(name, prefix, fields, options, reportError) {\n    // Returns a copy of the parameter obj sorted according to the order in options\n    function sortObject(obj, options) {\n        const newObject = {};\n        _.each(options, function (option) {\n            if (angular.isDefined(obj[option.__name])) {\n                if (option.__type === 'OptionArray') {\n                    newObject[option.__name] = [];\n                    _.each(obj[option.__name], function (childOption) {\n                        newObject[option.__name].push(sortObject(childOption, option.__childOptions));\n                    });\n                } else {\n                    newObject[option.__name] = angular.copy(obj[option.__name]);\n                }\n            }\n        });\n        return newObject;\n    }\n\n    const fcopy = sortObject(fields, options);\n\n    for (let i = 0; i < options.length; i++) {\n        try {\n            if (options[i].__type === 'Map') {\n                fcopy[options[i].__name] = fromArrayMap(fcopy[options[i].__name]);\n            } else if (options[i].__type === 'JsonString') {\n                fcopy[options[i].__name] = angular.fromJson(fcopy[options[i].__name]);\n            }\n        } catch (e) {\n            reportError(options[i].__label, e.message);\n            return null;\n        }\n    }\n\n    removeEmptyValues(fcopy);\n    //escapeValues(fields);\n    let finalString = '';\n    finalString += 'PREFIX :<' + prefix + '>\\n';\n    const namePrefix = buildNamePrefix(prefix);\n    finalString += 'PREFIX inst:<' + namePrefix + '>\\n';\n    finalString += 'INSERT DATA {\\n';\n    finalString += \"\\tinst:\" + name + \" :createConnector '''\\n\"; // eslint-disable-line quotes\n    finalString += angular.toJson(fcopy, 2);\n    finalString += \"\\n''' .\\n}\\n\"; // eslint-disable-line quotes\n    finalString = finalString.replace(/\\\\/g, '\\\\\\\\\\\\');\n    return finalString;\n}\n\nfunction createStatusQueryForIri(iri) {\n    const statusIri = iri.replace(/\\/instance#.+$/, '#connectorStatus');\n    let finalString = '';\n    finalString += 'SELECT ?status {\\n';\n    finalString += '\\t<' + iri + '> <' + statusIri + '> ?status';\n    finalString += '\\n}';\n    return finalString;\n}\n\nfunction createStatusQueryForAny(connectors) {\n    const connectorIris = _.map(connectors,\n        function (k) {\n            return '<' + k.value + 'connectorStatus' + '>';\n        }).join('|');\n\n    if (connectorIris) {\n        return 'SELECT ?connector ?status { ?connector ' + connectorIris + ' ?status }';\n    }\n\n    return null;\n}\n\nfunction repairConnectorQuery(name, prefix) {\n    const namePrefix = buildNamePrefix(prefix);\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:repairConnector \"\"\\n' +\n        '}';\n}\n\nfunction deleteConnectorQuery(name, prefix, force) {\n    const namePrefix = prefix.substring(0, prefix.length - 1) + \"/instance#\";\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:dropConnector \"' + (force ? \"force\" : \"\") + '\"\\n' +\n        '}';\n}\n\nfunction removeEmptyValues(data) {\n    // remove empty values from array\n    if (Array.isArray(data)) {\n        data = _.filter(data, function (item) {\n            return item !== null && (!item.trim || item.trim() !== '');\n        });\n    }\n    // remove empty values from object values\n    Object.keys(data).forEach(function (key) {\n        if ((data[key] === '' || data[key] == null) && data[key] !== false) {\n            delete data[key];\n        } else if (typeof data[key] === 'object') {\n            data[key] = removeEmptyValues(data[key]);\n        }\n    });\n    return data;\n}\n\nfunction parseFirstBuildingResult(results) {\n    if (results.bindings) {\n        for (let i = 0; i < results.bindings.length; i++) {\n            try {\n                const statusObject = JSON.parse(results.bindings[i].status.value);\n                if (statusObject.status === 'BUILDING') {\n                    return {\n                        connector: results.bindings[i].connector.value,\n                        status: statusObject\n                    };\n                }\n            } catch (e) {\n                console.error(e); // eslint-disable-line no-console\n            }\n        }\n    }\n\n    return {};\n}\n\nConnectorsCtrl.$inject = ['$scope', '$http', '$repositories', '$modal', 'toastr', 'ModalService', '$q', 'RDF4JRepositoriesRestService', 'ConnectorsRestService'];\n\nfunction ConnectorsCtrl($scope, $http, $repositories, $modal, toastr, ModalService, $q, RDF4JRepositoriesRestService, ConnectorsRestService) {\n    $scope.loader = false;\n\n    $scope.controllers = [];\n\n    $scope.existing = {};\n\n    $scope.definitions = {};\n\n    $scope.getLoaderMessage = function () {\n        const timeSeconds = (Date.now() - $scope.loaderStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = 'Running operation...' + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    };\n\n    $scope.setLoader = function (isRunning, progressMessage, extraMessage) {\n        if (isRunning) {\n            $scope.loader = true;\n            $scope.loaderStartTime = Date.now();\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n        } else {\n            $scope.loader = false;\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n        }\n    };\n\n    $scope.initConnector = function (connector) {\n        return ConnectorsRestService.initConnector(encodeURIComponent(connector.value))\n            .then(function (res) {\n                $scope.definitions[connector.key] = res.data;\n\n                return ConnectorsRestService.hasConnector(encodeURIComponent(connector.value))\n                    .then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n\n                    });\n            });\n    };\n\n    $scope.getConnectors = function () {\n        if (!$scope.canWriteActiveRepo()) {\n            return;\n        }\n\n        $scope.setLoader(true, 'Fetching connectors', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n\n        ConnectorsRestService.getConnectors()\n            .then(function (res) {\n                $scope.connectors = Object.keys(res.data).map(function (key) {\n                    return {key: key, value: res.data[key]};\n                });\n\n                $q.all(_.map($scope.connectors, function (connector) {\n                    return $scope.initConnector(connector);\n                })).finally(function () {\n                    resetProgress();\n\n                    const query = createStatusQueryForAny($scope.connectors);\n\n                    if (query) {\n                        evaluateSparqlQuery(query)\n                            .then(function (res) {\n                                const status = parseFirstBuildingResult(res.data.results);\n                                if (status.connector) {\n                                    // has a building connector, open progress indicator\n                                    const d = status.connector.split(/#/);\n                                    d[0] = d[0].replace(/\\/instance$/, '#');\n                                    showProgress(d[0], d[1]);\n                                }\n                            })\n                            .finally(function () {\n                                $scope.setLoader(false);\n                            });\n                    } else {\n                        $scope.setLoader(false);\n                    }\n                });\n            }).catch(function (e) {\n                $scope.setLoader(false);\n                toastr.error(getError(e), 'Could not get connectors');\n            });\n\n        $scope.existing = {};\n    };\n\n    $scope.getOptions = function (connector) {\n        return $scope.definitions[connector.key];\n    };\n\n    $scope.isEmpty = function (value) {\n        return angular.isObject(value) && Object.keys(value).length === 0;\n    };\n\n    $scope.toPrettyJson = function (value) {\n        return angular.toJson(value, 2);\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, $scope.getConnectors);\n\n    $scope.$watch(function () {\n        return $repositories.getActiveLocation();\n    }, $scope.getConnectors);\n\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function resetProgress(repair) {\n        $scope.beingBuiltConnector = {\n            percentDone: 0,\n            status: {\n                processedEntities: 0,\n                estimatedEntities: 0,\n                indexedEntities: 0,\n                entitiesPerSecond: 0\n            },\n            actionName: repair ? 'Repairing' : 'Creating',\n            waitOnRepairStartOnce: !!repair,\n            eta: '-',\n            inline: false,\n            iri: null\n        };\n    }\n\n    function openProgressModal(prefix, name, repair) {\n        resetProgress(repair);\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: false,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.modalInstance.dismiss('cancel');\n            }\n        });\n\n        $scope.beingBuiltConnector.modalInstance = $modal.open({\n            templateUrl: 'pages/connectorProgress.html',\n            controller: 'CreateProgressCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            scope: $scope\n        });\n\n        return $scope.beingBuiltConnector.modalInstance;\n    }\n\n    function showProgress(prefix, name) {\n        resetProgress();\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: true,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.inline = false;\n            }\n        });\n    }\n\n    function executeCreate(connector, obj, errorCallback) {\n        const modal = openProgressModal(connector.value, obj.name, false);\n        RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: obj.query}))\n            .then(function () {\n                ConnectorsRestService.getConnectors().then(function () {\n                    ConnectorsRestService.hasConnector(encodeURIComponent(connector.value)).then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n                    });\n                });\n                toastr.success('Created connector ' + obj.name);\n            }, function (err) {\n                toastr.error(getError(err));\n                errorCallback();\n            }).finally(function () {\n                modal.dismiss('cancel');\n            });\n    }\n\n    $scope.copyConnector = function (connector, values) {\n        let newValues;\n        if (!angular.isUndefined(values)) {\n            newValues = angular.copy(values);\n            newValues.name = newValues.name + '-copy';\n        }\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(newValues) ? {name: '', values: {}} : newValues;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.newConnector = function (connector, values) {\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(values) ? {name: '', values: {}} : values;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.repair = function (inst, type) {\n        ModalService.openSimpleModal({\n            title: 'Confirm repair',\n            message: 'Are you sure you want to repair this connector?<br>Note that repair means delete + recreate with the same settings.',\n            warning: true\n        }).result\n            .then(function () {\n                const modal = openProgressModal(type.value, inst.name, true);\n\n                const query = repairConnectorQuery(inst.name, type.value);\n\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        toastr.success('Repaired connector ' + inst.name);\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function () {\n                        modal.dismiss('cancel');\n                    });\n            });\n    };\n\n    $scope.delete = function (inst, type) {\n        const isExternal = type.key.indexOf(\"Elastic\") >= 0 || type.key.indexOf(\"Solr\") >= 0;\n\n        $modal.open({\n            templateUrl: 'js/angular/externalsync/templates/deleteConnector.html',\n            controller: 'DeleteConnectorCtrl',\n            resolve: {\n                type: function () {\n                    return type.key;\n                },\n                isExternal: function () {\n                    return isExternal;\n                }\n            }\n        }).result\n            .then(function(force) {\n                $scope.setLoader(true, 'Deleting connector ' + inst.name, 'This is usually a fast operation but it might take a while.');\n\n                const query = deleteConnectorQuery(inst.name, type.value, force);\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        if (force) {\n                            toastr.success(\"Deleted (with force) connector \" + inst.name);\n                            if (isExternal) {\n                                toastr.warning(\"You may have to remove the index manually from \" + type.key);\n                            }\n                        } else {\n                            toastr.success(\"Deleted connector \" + inst.name);\n                        }\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function() {\n                        $scope.setLoader(false);\n                    });\n            });\n    };\n\n    $scope.viewQuery = function (connector, inst) {\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    const options = $scope.getOptions(connector);\n                    return createConnectorQuery(inst.name, connector.value,\n                        mapCreateValuesToUiValues(inst.values, options), options);\n                }\n            }\n        });\n    };\n}\n\nDeleteConnectorCtrl.$inject = ['$scope', '$modalInstance', 'type', 'isExternal'];\nfunction DeleteConnectorCtrl($scope, $modalInstance, type, isExternal) {\n    $scope.force = false;\n    $scope.type = type;\n    $scope.isExternal = isExternal;\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.force);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n}\n\nExtendNewConnectorCtrl.$inject = ['$scope', '$modalInstance', 'connector', '$modal', 'toastr'];\nfunction ExtendNewConnectorCtrl($scope, $modalInstance, connector, $modal, toastr) {\n\n    $scope.connector = connector;\n\n    $scope.addField = function (index, optionName) {\n        const newField = angular.copy($scope.defaultValues[optionName][0]);\n        $scope.values[optionName].splice(index + 1, 0, newField);\n    };\n\n    $scope.addOption = function (index, array) {\n        array.splice(index + 1, 0, '');\n    };\n\n    $scope.deleteOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    $scope.addMapOption = function (index, array) {\n        array.splice(index + 1, 0, {key: '', value: ''});\n    };\n\n    $scope.deleteMapOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    function toQuery() {\n        return createConnectorQuery($scope.name, connector.value, $scope.values, $scope.options,\n            function (label, error) {\n                toastr.error(error, label);\n            });\n    }\n\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            const query = toQuery();\n\n            if (query) {\n                $modalInstance.close({name: $scope.name, values: $scope.values, options: $scope.options, query: query});\n            }\n        }\n    };\n\n    $scope.viewQuery = function () {\n        const query = toQuery();\n\n        if (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nCreateConnectorCtrl.$inject = ['$scope', '$controller', '$http', '$modalInstance', 'connector', '$modal', 'values', 'options'];\n\nfunction CreateConnectorCtrl($scope, $controller, $http, $modalInstance, connector, $modal, values, options) {\n    angular.extend(this, $controller('ExtendNewConnectorCtrl', {\n        $scope: $scope,\n        $modalInstance: $modalInstance,\n        connector: connector,\n        $modal: $modal\n    }));\n    $scope.values = values.values;\n    $scope.options = options;\n    $scope.name = values.name;\n    if (!values.skipConversion) {\n        $scope.values = mapCreateValuesToUiValues($scope.values, $scope.options);\n    }\n    $scope.defaultValues = angular.copy($scope.values);\n}\n\n// Note that this is a fancy controller: it's used both for a modal and for a directive.\n// This means you can't rely on custom injection through resolve in the modal and the scope\n// must be shared with the main connectors controller.\nCreateProgressCtrl.$inject = ['$scope', '$interval', '$http', '$repositories'];\n\nfunction CreateProgressCtrl($scope, $interval, $http, $repositories) {\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function initProgress() {\n        const query = createStatusQueryForIri($scope.beingBuiltConnector.iri);\n\n        // reset iri value so that watch will fire again when we do something with the same connector\n        $scope.beingBuiltConnector.iri = null;\n\n        $scope.progressInterval = $interval(function () {\n            function getFirstStatusFromResult(results) {\n                if (results.bindings) {\n                    if (results.bindings.length > 0) {\n                        try {\n                            return JSON.parse(results.bindings[0].status.value);\n                        } catch (e) {\n                            console.error(e); // eslint-disable-line no-console\n                        }\n                    }\n                }\n\n                return {};\n            }\n\n            evaluateSparqlQuery(query)\n                .then(function (res) {\n                    const status = getFirstStatusFromResult(res.data.results);\n                    if (status.status === 'BUILDING') {\n                        $scope.beingBuiltConnector.status = status;\n                        $scope.beingBuiltConnector.percentDone = (100 * status.processedEntities / status.estimatedEntities).toFixed(0);\n                        $scope.beingBuiltConnector.eta = $scope.getHumanReadableSeconds(status.etaSeconds);\n                        $scope.beingBuiltConnector.actionName = status.repair ? 'Repairing' : 'Creating';\n                        $scope.beingBuiltConnector.waitOnRepairStartOnce = false;\n                    } else if (status.status === 'BUILT' && !$scope.beingBuiltConnector.waitOnRepairStartOnce) {\n                        // done\n                        $interval.cancel($scope.progressInterval);\n                        if ($scope.beingBuiltConnector.doneCallback) {\n                            $scope.beingBuiltConnector.doneCallback();\n                        }\n                    }\n                });\n        }, 1000);\n\n        $scope.$on('$destroy', function () {\n            $interval.cancel($scope.progressInterval);\n        });\n    }\n\n    $scope.beingBuiltConnector = $scope.beingBuiltConnector || {};\n\n    // for modal instance we get the iri before hand and can start progress now\n    if (!$scope.beingBuiltConnector.inline && $scope.beingBuiltConnector.iri) {\n        initProgress();\n    }\n\n    // for inline progress we need to watch for the iri value\n    $scope.$watch('beingBuiltConnector.iri', function (value) {\n        if ($scope.beingBuiltConnector.inline && value) {\n            initProgress();\n        }\n    });\n}\n\nfunction ceil() {\n    return function (input) {\n        return Math.ceil(input);\n    };\n}\n"],"sourceRoot":""}