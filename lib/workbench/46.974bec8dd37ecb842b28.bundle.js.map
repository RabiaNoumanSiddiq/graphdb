{"version":3,"sources":["webpack:///./src/js/angular/core/directives/fit-text.directive.js"],"names":["fitTextDirective","$timeout","restrict","scope","min","max","link","element","attrs","config","_","debounce","fitTextMin","fitTextMax","parent","domElem","domElemStyle","style","computed","window","getComputedStyle","newlines","children","length","lines","minFontSize","maxFontSize","lineHeight","display","resizePromise","calculate","ratio","calcSize","offsetWidth","Math","paddingLeft","parseFloat","paddingRight","compressor","getMaxFontSize","resizer","cancel","offsetHeight","fontSize","loadDelay","$watch","join","$","on","$apply","delay","$on","off","angular","module","directive","$inject"],"mappings":"2EAOA,SAASA,EAAiBC,GACtB,MAAO,CACHC,SAAU,IACVC,MAAO,CACHC,IAAK,IACLC,IAAK,KAETC,KAAM,SAAUH,EAAOI,EAASC,GAE5B,MAAMC,EAAS,CACX,SAAYC,EAAEC,SACd,MAAS,IACT,UAAa,GACb,WAAc,EACd,IAAOH,EAAMI,YAAc,UAC3B,IAAOJ,EAAMK,YAAc,UAC3B,SAAY,GACZ,MAAS,GAGPC,EAASP,EAAQO,SACjBC,EAAUR,EAAQ,GAClBS,EAAeD,EAAQE,MACvBC,EAAWC,OAAOC,iBAAiBb,EAAQ,GAAI,MAC/Cc,EAAWd,EAAQe,WAAWC,QAAUd,EAAOe,MAC/CC,EAA6B,YAAfhB,EAAOL,IAAoBc,EAAS,aAAeT,EAAOL,IACxEsB,EAA6B,YAAfjB,EAAOJ,IAAoBa,EAAS,aAAeT,EAAOJ,IACxEsB,EAAaT,EAAS,eACtBU,EAAUV,EAAkB,QAClC,IAAIW,EAEJ,SAASC,IACL,MAAMC,EAAStB,EAAOuB,SAAWX,EAAYN,EAAQkB,YAAcZ,EACnE,OAAOa,KAAK7B,IAAI6B,KAAK9B,IAGzB,SAAwB2B,GACpB,MAAMI,EAAcC,WAAWhB,iBAAiBN,EAAO,IAAIqB,aACrDE,EAAeD,WAAWhB,iBAAiBN,EAAO,IAAIuB,cAE5D,OAAQvB,EAAO,GAAGmB,aAAeE,EAAcE,IAAiBN,EAAQtB,EAAO6B,WAPtDC,CAAeR,GAAQK,WAAWV,IAAeU,WAAWX,IA0BzF,SAASe,IACDX,GACA5B,EAASwC,OAAOZ,GAGpBA,EAAgB5B,GAAS,WApBrBc,EAAQ2B,aAAe3B,EAAQkB,aAAgB,IAKnDjB,EAAa2B,SAAWlC,EAAOuB,SAAW,KAC1ChB,EAAaW,WAAa,IAC1BX,EAAaY,QAAU,eAGvBZ,EAAa2B,SAAWb,IAAc,KACtCd,EAAaW,WAAaA,EAC1BX,EAAaY,QAAUA,KAUpBnB,EAAOmC,WAGdzC,EAAM0C,QAAO,WACT,MAAO,CACH/B,EAAO,GAAGmB,YACV1B,EAAQ,GAAG0B,aACba,KAAK,QACR,WACCN,OAGJO,EAAE5B,QAAQ6B,GAAG,SAAUvC,EAAOE,UAAS,WACnCR,EAAM8C,OAAOT,KACd/B,EAAOyC,QAEV/C,EAAMgD,IAAI,YAAY,WACdtB,GACA5B,EAASwC,OAAOZ,GAEpBkB,EAAE5B,QAAQiC,IAAI,eA5F9BC,QACKC,OAAO,4CAA6C,IACpDC,UAAU,UAAWvD,GAE1BA,EAAiBwD,QAAU,CAAC","file":"46.974bec8dd37ecb842b28.bundle.js","sourcesContent":["// This is a rework of the ng-FitText.js which can be found here https://github.com/patrickmarabeas/ng-FitText.js\nangular\n    .module('graphdb.framework.core.directives.fittext', [])\n    .directive('fitText', fitTextDirective);\n\nfitTextDirective.$inject = ['$timeout'];\n\nfunction fitTextDirective($timeout) {\n    return {\n        restrict: 'A',\n        scope: {\n            min: '=',\n            max: '='\n        },\n        link: function (scope, element, attrs) {\n\n            const config = {\n                'debounce': _.debounce,\n                'delay': 100,\n                'loadDelay': 10,\n                'compressor': 1,\n                'min': attrs.fitTextMin || 'inherit',\n                'max': attrs.fitTextMax || 'inherit',\n                'calcSize': 10,\n                'lines': 1\n            };\n\n            const parent = element.parent();\n            const domElem = element[0];\n            const domElemStyle = domElem.style;\n            const computed = window.getComputedStyle(element[0], null);\n            const newlines = element.children().length || config.lines;\n            const minFontSize = config.min === 'inherit' ? computed['font-size'] : config.min;\n            const maxFontSize = config.max === 'inherit' ? computed['font-size'] : config.max;\n            const lineHeight = computed['line-height'];\n            const display = computed['display'];\n            let resizePromise;\n\n            function calculate() {\n                const ratio = (config.calcSize * newlines) / domElem.offsetWidth / newlines;\n                return Math.max(Math.min(getMaxFontSize(ratio), parseFloat(maxFontSize)), parseFloat(minFontSize));\n            }\n\n            function getMaxFontSize(ratio) {\n                const paddingLeft = parseFloat(getComputedStyle(parent[0]).paddingLeft);\n                const paddingRight = parseFloat(getComputedStyle(parent[0]).paddingRight);\n\n                return (parent[0].offsetWidth - (paddingLeft + paddingRight)) * ratio * config.compressor;\n            }\n\n            function resize() {\n                if (domElem.offsetHeight * domElem.offsetWidth === 0) {\n                    return;\n                }\n\n                // Preset standard values for making the size calculation\n                domElemStyle.fontSize = config.calcSize + 'px';\n                domElemStyle.lineHeight = '1';\n                domElemStyle.display = 'inline-block';\n\n                // Set usage values\n                domElemStyle.fontSize = calculate() + 'px';\n                domElemStyle.lineHeight = lineHeight;\n                domElemStyle.display = display;\n            }\n\n            function resizer() {\n                if (resizePromise) {\n                    $timeout.cancel(resizePromise);\n                }\n\n                resizePromise = $timeout(function () {\n                    resize();\n                }, config.loadDelay);\n            }\n\n            scope.$watch(function () {\n                return [\n                    parent[0].offsetWidth,\n                    element[0].offsetWidth\n                ].join('_');\n            }, function () {\n                resizer();\n            });\n\n            $(window).on('resize', config.debounce(function () {\n                scope.$apply(resizer)\n            }, config.delay));\n\n            scope.$on('$destroy', function () {\n                if (resizePromise) {\n                    $timeout.cancel(resizePromise);\n                }\n                $(window).off('resize');\n            });\n        }\n    };\n}\n"],"sourceRoot":""}