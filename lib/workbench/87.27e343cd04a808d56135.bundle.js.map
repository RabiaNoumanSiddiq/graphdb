{"version":3,"sources":["webpack:///./src/js/angular/rest/jdbc.rest.service.js"],"names":["angular","module","factory","JdbcRestService","$inject","JDBC_ENDPOINT","$http","getJdbcConfigurations","get","getJdbcConfiguration","configuration","createNewJdbcConfiguration","createConfiguration","updateJdbcConfiguration","name","deleteJdbcConfiguration","delete","getColumnNames","query","post","headers","getColumnsTypeSuggestion","columns","Array","isArray","method","url","data","column_names","getExistingSqlTablePreview","limit","$","ajax","params","getNewSqlTablePreview","sqlView","contentType","dataType","Accept","table","noCancelOnRouteChange"],"mappings":"2EAAAA,QACKC,OAAO,sCAAuC,IAC9CC,QAAQ,kBAAmBC,GAEhCA,EAAgBC,QAAU,CAAC,QAAS,iBAEpC,MAAMC,EAAgB,iBAEtB,SAASF,EAAgBG,GAErB,MAAO,CACHC,sBAWJ,WACI,OAAOD,EAAME,IAAI,GAAGH,aAXpBI,qBAcJ,SAA8BC,GAC1B,OAAOJ,EAAME,IAAI,GAAGH,YAAwBK,MAd5CC,2BA+BJ,SAAoCD,GAChC,OAAOE,EAAoB,OAAQ,GAAIF,IA/BvCG,wBAkCJ,SAAiCH,GAC7B,OAAOE,EAAoB,MAAOF,EAAcI,KAAMJ,IAlCtDK,wBAqCJ,SAAiCD,GAC7B,OAAOR,EAAMU,OAAO,GAAGX,YAAwBS,MArC/CG,eAwCJ,SAAwBC,GAQpB,OAAOZ,EAAMa,KAAK,GAAGd,YAAyBa,EAP9B,CACZE,QAAS,CACL,OAAU,mBACV,eAAgB,iBA3CxBC,yBAkDJ,SAAkCH,EAAOI,GACrC,IAAKC,MAAMC,QAAQF,GACf,KAAM,wCAGV,OAAOhB,EAAM,CACLmB,OAAQ,OACRC,IAAK,GAAGrB,UACRsB,KAAM,CACFT,MAAOA,EACPU,aAAcN,MA3D1BO,2BAgEJ,SAAoCf,EAAMgB,GAEtC,OAAOC,EAAEC,KAAK,CACVP,OAAQ,MACRC,IAAK,0BAA0BZ,IAC/BmB,OAAQ,CACJH,YArERI,sBA0EJ,SAA+BC,EAASL,GAEpC,OAAOC,EAAEC,KAAK,CACVP,OAAQ,OACRC,IAAK,yBACLU,YAAa,kCACbC,SAAU,OACVV,KAAMQ,EACNF,OAAQ,CACJH,SAEJV,QAAS,CAACkB,OAAQ,uCA1E1B,SAAS1B,EAAoBa,EAAQc,EAAO7B,GACxC,OAAOJ,EAAM,CACLmB,SACAC,IAAK,GAAGrB,YAAwBkC,IAChCC,uBAAuB,EACvBb,KAAM,CACFb,KAAMJ,EAAcI,KACpBI,MAAOR,EAAcQ,MACrBI,QAASZ,EAAcY,SAAW","file":"87.27e343cd04a808d56135.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.jdbc.service', [])\n    .factory('JdbcRestService', JdbcRestService);\n\nJdbcRestService.$inject = ['$http', '$repositories'];\n\nconst JDBC_ENDPOINT = 'rest/sql-views';\n\nfunction JdbcRestService($http) {\n\n    return {\n        getJdbcConfigurations,\n        getJdbcConfiguration,\n        createNewJdbcConfiguration,\n        updateJdbcConfiguration,\n        deleteJdbcConfiguration,\n        getColumnNames,\n        getColumnsTypeSuggestion,\n        getExistingSqlTablePreview,\n        getNewSqlTablePreview\n    };\n\n    function getJdbcConfigurations() {\n        return $http.get(`${JDBC_ENDPOINT}/tables`);\n    }\n\n    function getJdbcConfiguration(configuration) {\n        return $http.get(`${JDBC_ENDPOINT}/tables/${configuration}`);\n    }\n\n    function createConfiguration(method, table, configuration) {\n        return $http({\n                method,\n                url: `${JDBC_ENDPOINT}/tables/${table}`,\n                noCancelOnRouteChange: true,\n                data: {\n                    name: configuration.name,\n                    query: configuration.query,\n                    columns: configuration.columns || []\n                }\n            }\n        );\n    }\n\n    function createNewJdbcConfiguration(configuration) {\n        return createConfiguration('POST', '', configuration);\n    }\n\n    function updateJdbcConfiguration(configuration) {\n        return createConfiguration('PUT', configuration.name, configuration);\n    }\n\n    function deleteJdbcConfiguration(name) {\n        return $http.delete(`${JDBC_ENDPOINT}/tables/${name}`);\n    }\n\n    function getColumnNames(query) {\n        const headers = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'text/plain'\n            }\n        };\n\n        return $http.post(`${JDBC_ENDPOINT}/columns`, query, headers);\n    }\n\n    function getColumnsTypeSuggestion(query, columns) {\n        if (!Array.isArray(columns)) {\n            throw 'Column names must be placed in array.'\n        }\n\n        return $http({\n                method: 'POST',\n                url: `${JDBC_ENDPOINT}/types`,\n                data: {\n                    query: query,\n                    column_names: columns\n                }\n            }\n        );\n    }\n    function getExistingSqlTablePreview(name, limit) {\n        // Limit in preview is optional. On backend default value is set to 100\n        return $.ajax({\n            method: 'GET',\n            url: `rest/sql-views/preview/${name}`,\n            params: {\n                limit\n            }\n        })\n    }\n\n    function getNewSqlTablePreview(sqlView, limit) {\n        // Limit in preview is optional. On backend default value is set to 100\n        return $.ajax({\n            method: 'POST',\n            url: \"rest/sql-views/preview\",\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: sqlView,\n            params: {\n                limit\n            },\n            headers: {Accept: 'application/sparql-results+json'}\n        })\n    }\n}\n"],"sourceRoot":""}