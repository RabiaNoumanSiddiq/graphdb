{"version":3,"sources":["webpack:///./src/js/angular/utils/file-types.js","webpack:///./src/js/angular/export/controllers.js"],"names":["angular","module","value","name","type","extension","controller","$scope","$http","$location","$timeout","ModalService","filterFilter","$repositories","toastr","RDF4JRepositoriesRestService","FileTypes","getActiveRepository","exportFormats","deleting","showExportDDTooltip","page","pageSize","pageSizeOptions","displayGraphs","exportFilter","export","exportMultipleGraphs","repoExportFormat","selectedGraphs","exportGraphs","$watch","getGraphs","selectedAll","changePageSize","isShacl","iri","loader","success","data","results","bindings","unshift","contextID","graphsByValue","Object","keys","forEach","key","binding","uri","encodeURIComponent","clearUri","exportUri","longName","graphs","filteredGraphs","copy","slice","matchedElements","error","status","msg","getError","setRepository","onGraphSearch","deselectAll","filterResults","item","indexOf","push","downloadExport","downloadUrl","format","url","auth","localStorage","getItem","window","open","openExportDDTooltip","$","trigger","exportRepo","openSimpleModal","title","message","warning","result","then","startDownload","hasMultipleSelected","_","isEmpty","index","exportSelectedGraphs","contextStr","substring","length","element","document","find","valueOfFilteredGraphsButton","innerHTML","trim","valueOfFilteredGraphs","changePagination","isDefined","size","removeClass","checkAll","dropRepository","canWriteActiveRepo","addStatements","err","dropContext","ctx","updateResults","dropGraph","selectedGraphsForDelete","counterOfClearedGraphs","dropSelectedGraphs"],"mappings":"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","file":"34.af70302b47e62d49d058.bundle.js","sourcesContent":["angular.module('graphdb.workbench.utils.filetypes', [])\n    .value('FileTypes', [\n        {name: 'JSON', type: 'application/rdf+json', extension: '.json'},\n        {name: 'JSON-LD', type: 'application/ld+json', extension: '.jsonld'},\n        {name: 'RDF-XML', type: 'application/rdf+xml', extension: '.rdf'},\n        {name: 'N3', type: 'text/rdf+n3', extension: '.n3'},\n        {name: 'N-Triples', type: 'text/plain', extension: '.nt'},\n        {name: 'N-Quads', type: 'text/x-nquads', extension: '.nq'},\n        {name: 'Turtle', type: 'text/turtle', extension: '.ttl'},\n        {name: 'Turtle*', type: 'application/x-turtlestar', extension: '.ttls'},\n        {name: 'TriX', type: 'application/trix', extension: '.trix'},\n        {name: 'TriG', type: 'application/x-trig', extension: '.trig'},\n        {name: 'TriG*', type: 'application/x-trigstar', extension: '.trigs'},\n        {name: 'Binary RDF', type: 'application/x-binary-rdf', extension: '.brf'}\n    ]);\n","import 'angular/core/services';\nimport 'angular/core/services/repositories.service';\nimport 'angular/core/services/jwt-auth.service';\nimport 'angular/utils/file-types';\n\nconst modules = [\n    'ngCookies',\n    'ui.bootstrap',\n    'toastr',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.core.services.jwtauth',\n    'graphdb.workbench.utils.filetypes'\n];\n\nconst exportCtrl = angular.module('graphdb.framework.impex.export.controllers', modules);\n\nexportCtrl.controller('ExportCtrl',\n    ['$scope', '$http', '$location', '$timeout', 'ModalService', 'filterFilter', '$repositories', 'toastr', 'RDF4JRepositoriesRestService', 'FileTypes',\n        function ($scope, $http, $location, $timeout, ModalService, filterFilter, $repositories, toastr, RDF4JRepositoriesRestService, FileTypes) {\n\n            $scope.getActiveRepository = function () {\n                return $repositories.getActiveRepository();\n            };\n\n            $scope.exportFormats = FileTypes;\n            $scope.deleting = {};\n            $scope.showExportDDTooltip = true;\n            $scope.page = 1;\n            $scope.pageSize = 10;\n            $scope.pageSizeOptions = [10, 20, 50, 100];\n            $scope.displayGraphs = [];\n            $scope.exportFilter = '';\n            $scope.export = true;\n            $scope.exportMultipleGraphs = false;\n            $scope.repoExportFormat = {\n                name: 'TriG',\n                type: 'application/x-trig',\n                extension: '.trig'\n            };\n            $scope.selectedGraphs = {\n                exportGraphs: {}\n            };\n\n            $scope.$watch(function () {\n                return $repositories.getActiveRepository();\n            }, function () {\n                $scope.exportFilter = '';\n                $scope.getGraphs();\n                $scope.selectedAll = false;\n                $timeout(function () {\n                    $scope.changePageSize(10);\n                }, 100);\n            });\n\n            $scope.isShacl = function (iri) {\n                return iri === \"http%3A%2F%2Frdf4j.org%2Fschema%2Frdf4j%23SHACLShapeGraph\";\n            };\n\n            /// <summary>Get Graphs that are part of the Active Repository.</summary>\n            $scope.getGraphs = function () {\n                if ($scope.getActiveRepository()) {\n                    $scope.loader = true;\n                    RDF4JRepositoriesRestService.getGraphs($scope.getActiveRepository()).success(function (data) {\n                        data.results.bindings.unshift({\n                            contextID: {\n                                type: 'default',\n                                value: 'The default graph'\n                            }\n                        });\n                        $scope.graphsByValue = {};\n                        Object.keys(data.results.bindings).forEach(function (key) {\n                            const binding = data.results.bindings[key];\n                            if (binding.contextID.type === 'bnode') {\n                                binding.contextID.value = '_:' + binding.contextID.value;\n                            } else if (binding.contextID.type === 'default') {\n                                binding.contextID.uri = encodeURIComponent('http://www.openrdf.org/schema/sesame#nil');\n                                binding.contextID.clearUri = 'DEFAULT';\n                                binding.contextID.exportUri = 'null';\n                                binding.contextID.longName = 'default graph';\n                            } else {\n                                binding.contextID.uri = encodeURIComponent(binding.contextID.value);\n                                binding.contextID.clearUri = 'GRAPH <' + binding.contextID.value + '>';\n                                binding.contextID.exportUri = encodeURIComponent('<' + binding.contextID.value + '>');\n                                binding.contextID.longName = 'named graph ' + binding.contextID.value;\n                            }\n                            $scope.graphsByValue[binding.contextID.value] = binding.contextID;\n                        });\n                        $scope.graphs = data.results.bindings;\n                        $scope.filteredGraphs = angular.copy($scope.graphs);\n                        $scope.displayGraphs = $scope.filteredGraphs.slice($scope.pageSize * ($scope.page - 1), $scope.pageSize * $scope.page);\n                        $scope.loader = false;\n                        $scope.selectedGraphs.exportGraphs = {};\n                        $scope.matchedElements = $scope.graphs;\n                    }).error(function (data, status) {\n                        const msg = getError(data, status);\n                        if (msg === 'There is no active location!') {\n                            $repositories.setRepository('');\n                            toastr.error(msg, 'Error');\n                        }\n                        $scope.loader = false;\n                    });\n                } else {\n                    $scope.loader = false;\n                }\n            };\n\n            $scope.onGraphSearch = function() {\n                $scope.matchedElements = [];\n                $scope.deselectAll();\n                $scope.filterResults();\n            };\n\n            $scope.filterResults = function() {\n                angular.forEach($scope.graphs, function (item) {\n                    if (item.contextID.value.indexOf($scope.exportFilter) !== -1) {\n                        $scope.matchedElements.push(item);\n                    }\n                });\n            };\n\n            $scope.downloadExport = function (downloadUrl, format) {\n                let url = downloadUrl + '&Accept=' + encodeURIComponent(format.type);\n                const auth = localStorage.getItem('com.ontotext.graphdb.auth');\n                if (auth) {\n                    url = url + '&authToken=' + encodeURIComponent(auth);\n                }\n                window.open(url);\n            };\n\n            /// <summary>Trigger the custom event for DD tooltip.</summary>\n            $scope.openExportDDTooltip = function () {\n                if ($scope.showExportDDTooltip) {\n                    $timeout(function () {\n                        $('#tooltipTarget').trigger('showExportDDTooltip');\n                    }, 0);\n                    $timeout(function () {\n                        $('#tooltipTarget').trigger('showExportDDTooltip');\n                    }, 3000);\n\n                    //Set to false so the tooltip shows only once\n                    $scope.showExportDDTooltip = false;\n\n                }\n            };\n\n            /// <summary>Fill the hidden form and submit it to start download document.</summary>\n            $scope.exportRepo = function (format, contextID) {\n                if (format.type === 'application/rdf+xml' || format.type === 'text/plain' || format.type === 'text/turtle' || format.type === 'application/x-turtlestar' || format.type === 'text/rdf+n3') {\n                    ModalService.openSimpleModal({\n                        title: 'Warning',\n                        message: 'This format does not support graphs.<br>Graph information will not be available in the export.',\n                        warning: true\n                    }).result\n                        .then(function () {\n                            $scope.startDownload(format, contextID);\n                        });\n                } else {\n                    $scope.startDownload(format, contextID);\n                }\n            };\n\n            $scope.startDownload = function (format, contextID) {\n                //If it's graph set the url for ?context=\n                let downloadUrl;\n                if (contextID) {\n                    downloadUrl = 'repositories/' + $scope.getActiveRepository() + '/statements?infer=false&context=' + $scope.graphsByValue[contextID.value].exportUri;\n                } else {\n                    downloadUrl = 'repositories/' + $scope.getActiveRepository() + '/statements?infer=false';\n                }\n                $scope.downloadExport(downloadUrl, format);\n            };\n\n            $scope.hasMultipleSelected = function () {\n                if (_.isEmpty($scope.selectedGraphs.exportGraphs)) {\n                    return !_.isEmpty($scope.selectedGraphs.exportGraphs);\n                } else {\n                    for (const index in $scope.selectedGraphs.exportGraphs) {\n                        if ($scope.selectedGraphs.exportGraphs[index] === true) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n\n            $scope.exportSelectedGraphs = function (format) {\n                let contextStr = '';\n                for (const index in $scope.selectedGraphs.exportGraphs) {\n                    if ($scope.selectedGraphs.exportGraphs[index]) {\n                        contextStr += 'context=' + $scope.graphsByValue[index].exportUri + '&';\n                    }\n                }\n\n                if (contextStr) {\n                    const startDownload = function () {\n                        contextStr = contextStr.substring(0, contextStr.length - 1);\n                        const downloadUrl = 'repositories/' + $scope.getActiveRepository() + '/statements?infer=false&' + contextStr;\n                        $scope.downloadExport(downloadUrl, format);\n                    };\n\n                    if (format.type === 'application/rdf+xml' || format.type === 'text/plain' || format.type === 'text/turtle' || format.type === 'application/x-turtlestar' || format.type === 'text/rdf+n3') {\n                        ModalService.openSimpleModal({\n                            title: 'Warning',\n                            message: 'This format does not support graphs.<br>Graph information will not be available in the export.',\n                            warning: true\n                        }).result\n                            .then(function () {\n                                startDownload();\n                            });\n                    } else {\n                        startDownload();\n                    }\n                } else {\n                    ModalService.openSimpleModal({\n                        title: 'Multiple graph export',\n                        message: 'Check graphs you want to export first.',\n                        warning: true\n                    });\n                }\n            };\n\n            $scope.$watch('exportFilter', function () {\n                $scope.filteredGraphs = filterFilter($scope.graphs, $scope.exportFilter);\n                if ($scope.getActiveRepository() && angular.element(document).find('.btn.btn-secondary.btn-sm.dropdown-toggle span').length) {\n                    const valueOfFilteredGraphsButton = angular.element(document).find('.btn.btn-secondary.btn-sm.dropdown-toggle span')[0].innerHTML.trim();\n                    let valueOfFilteredGraphs;\n                    if (valueOfFilteredGraphsButton === 'All') {\n                        valueOfFilteredGraphs = $scope.filteredGraphs.length;\n                    }\n                    if ($scope.filteredGraphs && $scope.filteredGraphs.length > $scope.pageSize && valueOfFilteredGraphsButton !== 'All') {\n                        valueOfFilteredGraphs = $scope.pageSize;\n                    }\n                    $scope.changePageSize(valueOfFilteredGraphs);\n                    $scope.changePagination();\n                }\n            });\n\n            $scope.changePagination = function () {\n                $scope.selectedAll = false;\n                if (angular.isDefined($scope.filteredGraphs)) {\n                    $scope.displayGraphs = $scope.filteredGraphs.slice($scope.pageSize * ($scope.page - 1), $scope.pageSize * $scope.page);\n                }\n            };\n\n            $scope.changePageSize = function (size) {\n                $('.ot-graph-page-size').removeClass('active');\n                $scope.page = 1;\n                if (size) {\n                    $scope.pageSize = size;\n                    $scope.changePagination();\n                }\n                if ($scope.filteredGraphs && $scope.exportFilter !== '') {\n                    $scope.displayGraphs = $scope.filteredGraphs;\n                }\n            };\n\n            $scope.checkAll = function () {\n                $scope.selectedAll = $scope.selectedAll || false;\n\n                angular.forEach($scope.displayGraphs, function (item) {\n                    if (item.contextID.uri) {\n                        $scope.selectedGraphs.exportGraphs[item.contextID.value] = $scope.selectedAll;\n                    }\n                });\n            };\n\n            $scope.deselectAll = function () {\n                $scope.selectedAll = false;\n                angular.forEach($scope.displayGraphs, function (item) {\n                    if (item.contextID.uri) {\n                        $scope.selectedGraphs.exportGraphs[item.contextID.value] = false;\n                    }\n                });\n            };\n\n            $scope.dropRepository = function () {\n                if (!$scope.canWriteActiveRepo()) {\n                    return;\n                }\n                $scope.deleting['*'] = true;\n\n                ModalService.openSimpleModal({\n                    title: 'Confirm clear repository',\n                    message: 'Are you sure you want to clear repository ' + $repositories.getActiveRepository() + '?',\n                    warning: true\n                }).result\n                    .then(function () {\n                        $timeout(function () {\n                            RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), 'update=CLEAR ALL')\n                                .then(function () {\n                                    $scope.deleting['*'] = false;\n                                    toastr.success('Cleared repository ' + $repositories.getActiveRepository());\n                                    $scope.getGraphs();\n                                }, function (err) {\n                                    $scope.deleting['*'] = false;\n                                    toastr.error('Failed to clear repository ' + $repositories.getActiveRepository(), err);\n                                });\n                        }, 100);\n                    });\n            };\n\n            function dropGraph(ctx) {\n                const longName = ctx.contextID.longName;\n                $scope.deleting[ctx] = true;\n                ModalService.openSimpleModal({\n                    title: 'Confirm clear graph',\n                    message: 'Are you sure you want to clear the ' + longName + '?',\n                    warning: true\n                }).result\n                    .then(function () {\n                        $timeout(function () {\n                            const data = `update=CLEAR ${ctx.contextID.clearUri}`;\n                            RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), data)\n                                .then(function () {\n                                    $scope.deleting[ctx] = false;\n                                    toastr.success('Cleared the ' + longName);\n                                    $scope.getGraphs();\n                                    $scope.exportFilter = '';\n                                    $scope.filteredGraphs.length = 0;\n                                    $scope.updateResults();\n                                    $scope.changePageSize($scope.pageSize);\n                                }, function (err) {\n                                    $scope.deleting[ctx] = false;\n                                    toastr.error('Failed to clear the ' + longName, getError(err, err.status));\n                                });\n                        }, 100);\n                    }, function () {\n                        $scope.deleting[ctx] = false;\n                    });\n            }\n\n            function dropSelectedGraphs(ctx) {\n                const selectedGraphsForDelete = [];\n                angular.forEach($scope.selectedGraphs.exportGraphs, function (value, key) {\n                    if (value) {\n                        selectedGraphsForDelete.push(key);\n                    }\n                });\n\n                if (selectedGraphsForDelete.length > 0) {\n                    $scope.deleting[ctx] = true;\n                    ModalService.openSimpleModal({\n                        title: 'Confirm clear graphs',\n                        message: 'Are you sure you want to clear the selected graphs?',\n                        warning: true\n                    }).result.then(function () {\n                        $timeout(function () {\n                            let counterOfClearedGraphs = 0;\n                            angular.forEach(selectedGraphsForDelete, function (contextID) {\n                                const data = `update=CLEAR ${$scope.graphsByValue[contextID].clearUri}`;\n                                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), data)\n                                    .then(function () {\n                                        $scope.loader = true;\n                                        $scope.selectedGraphs.exportGraphs[contextID] = false;\n                                        delete $scope.selectedGraphs.exportGraphs[contextID];\n                                        counterOfClearedGraphs++;\n                                        if (selectedGraphsForDelete.length === counterOfClearedGraphs) {\n                                            $scope.selectedAll = false;\n                                            $scope.exportFilter = '';\n                                            $scope.filteredGraphs.length = 0;\n                                            $scope.getGraphs();\n                                            $scope.updateResults();\n                                            $scope.changePageSize($scope.pageSize);\n                                            toastr.success('Cleared the selected graphs');\n                                            $scope.loader = false;\n                                        }\n                                    }, function (err) {\n                                        const longName = $scope.graphsByValue[contextID].longName;\n                                        toastr.error('Failed to clear the ' + longName, getError(err, err.status));\n                                        $scope.selectedAll = false;\n                                    });\n                            });\n                        }, 100);\n                    }, function () {\n                        $scope.deleting[ctx] = false;\n                    });\n                }\n            }\n\n            $scope.dropContext = function (ctx) {\n                if (!$scope.canWriteActiveRepo()) {\n                    return;\n                }\n                if (angular.isDefined(ctx)) {\n                    dropGraph(ctx);\n                } else {\n                    dropSelectedGraphs(ctx);\n                }\n            };\n        }]);\n"],"sourceRoot":""}