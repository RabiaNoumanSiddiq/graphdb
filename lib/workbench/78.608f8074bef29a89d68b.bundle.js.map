{"version":3,"sources":["webpack:///./src/js/angular/repositories/fedx-repo.directive.js"],"names":["fedxRepoDirective","$modal","RepositoriesRestService","toastr","$timeout","LocationsRestService","restrict","scope","templateUrl","link","$scope","LOCAL_REPO_STORE","populateKnownRepos","member","fedxMembers","knownRepos","filter","repo","repositoryServer","id","repositoryName","location","local","getKnownRepos","getRepositories","success","response","allLocalRepos","slice","error","msg","getError","then","getLocations","locations","forEach","l","getRepositoriesFromKnownLocation","el","indexOf","allAttachedRepos","concat","getRepositoriesFromLocation","uri","editRepoPage","repositoryInfo","params","value","setWritableRepo","currentWritable","find","writable","store","JSON","stringify","getActiveClass","checkIfRepoExist","getRepositoryServer","localReposTimer","setInterval","updateMembers","push","removeEndingSlash","url","checkEditMode","model","editMode","$on","clearInterval","addMember","repository","addLocalMember","username","password","supportsASKQueries","repoType","type","respectRights","removeMember","endpoint","repositoryLocation","addRemoteMember","mode","sparqlEndpoint","$modalInstance","open","getMemberIcon","editFedXRepository","resolveName","cancel","dismiss","ok","resolvedName","close","angular","module","directive","$inject"],"mappings":"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","file":"78.608f8074bef29a89d68b.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.repositories.fedx-repo.directive', [])\n    .directive('fedxRepo', fedxRepoDirective);\n\nfedxRepoDirective.$inject = ['$modal', 'RepositoriesRestService', 'toastr', '$timeout', 'LocationsRestService'];\n\nfunction fedxRepoDirective($modal, RepositoriesRestService, toastr, $timeout, LocationsRestService) {\n    return {\n        restrict: 'E',\n        scope: false,\n        templateUrl: 'js/angular/repositories/templates/fedx-repo.html',\n\n        link: linkFunc\n    };\n\n    function linkFunc($scope) {\n\n        const LOCAL_REPO_STORE = 'ResolvableRepository';\n        const REMOTE_REPO_STORE = 'RemoteRepository';\n        const SPARQL_ENDPOINT_STORE = 'SPARQLEndpoint';\n        const NATIVE_STORE = 'NativeStore';\n\n        $scope.fedxMembers = [];\n        $scope.knownRepos = [];\n        $scope.allLocalRepos = [];\n        $scope.allAttachedRepos = [];\n        $scope.locations = [];\n\n        function getRepositories() {\n            return RepositoriesRestService.getRepositories()\n                .success(function (response) {\n                    $scope.allLocalRepos = response.slice();\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, 'Error');\n                });\n        }\n\n        function getRepositoriesFromLocation(location) {\n            return RepositoriesRestService.getRepositoriesFromKnownLocation(location)\n                .success(function (response) {\n                    $scope.knownRepos = $scope.allLocalRepos.filter(el => $scope.knownRepos.indexOf(el) !== -1);\n                    for (const member of response) {\n                        $scope.allAttachedRepos = $scope.allAttachedRepos.filter(repo => repo.id !== member.id || repo.location !== member.location);\n                    }\n                    $scope.allAttachedRepos = $scope.allAttachedRepos.concat(response.slice());\n                    $scope.knownRepos = $scope.knownRepos.concat($scope.allAttachedRepos);\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, 'Error');\n                });\n        }\n\n        function populateKnownRepos() {\n            for (const member of $scope.fedxMembers) {\n                $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                    if (member.repositoryServer) {\n                        // if the member is a remote attached member\n                        return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                    } else {\n                        // if the member is a local one\n                        return repo.id !== member.repositoryName || !repo.local;\n                    }\n                });\n            }\n        }\n\n        $scope.setWritableRepo = function (member) {\n            let currentWritable = getWritableRepo();\n            if (currentWritable) {\n                if (currentWritable.store === LOCAL_REPO_STORE && (member.store !== LOCAL_REPO_STORE || currentWritable.repositoryName !== member.repositoryName) ) {\n                    currentWritable.writable = 'false';\n                } else if (currentWritable.store === REMOTE_REPO_STORE && (member.store !== REMOTE_REPO_STORE || currentWritable.repositoryName !== member.repositoryName || currentWritable.repositoryServer !== member.repositoryServer)) {\n                    currentWritable.writable = 'false';\n                }\n            }\n            member.writable = JSON.stringify(member.writable === 'false');\n        }\n\n        $scope.getActiveClass = function (member) {\n            return member.writable === 'true' ? ' active' : '';\n        }\n\n        function getWritableRepo() {\n            return $scope.fedxMembers.find(member => member.writable === \"true\");\n        }\n\n        function getKnownRepos() {\n            return getRepositories()\n                .then(function () {\n                    getAttachedRepositories();\n                });\n        }\n\n        function getLocations() {\n            return LocationsRestService.getLocations()\n                .success(function(response) {\n                    $scope.locations = response.slice();\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, 'Error');\n                });\n        }\n\n        function getAttachedRepositories() {\n            return getLocations()\n                .then(function() {\n                    $scope.locations.forEach(l => getRepositoriesFromLocation(l.uri)\n                        .then(function () {\n                            if ($scope.editRepoPage) {\n                                $scope.fedxMembers = $scope.repositoryInfo.params.member.value.slice();\n                            }\n                            populateKnownRepos();\n                        }))\n                });\n        }\n\n        $scope.checkIfRepoExist = function (member) {\n            if (member.store === LOCAL_REPO_STORE) {\n                return $scope.allLocalRepos.find(repo => repo.id === member.repositoryName);\n            } else if (member.store === REMOTE_REPO_STORE && checkIfLocationIsAttached(member)) {\n                return $scope.allAttachedRepos.find(repo => repo.id === member.repositoryName && repo.location === member.repositoryServer);\n            } else {\n                return true;\n            }\n        }\n\n        function checkIfLocationIsAttached(repo) {\n            return $scope.locations.find(el => el.uri === repo.repositoryServer);\n        }\n\n        $scope.getRepositoryServer = function (repo) {\n            if (repo.local) {\n                return \"Local\";\n            } else {\n                return repo.location;\n            }\n        }\n\n        const localReposTimer = setInterval(function () {\n            getKnownRepos();\n        }, 5000);\n\n        $scope.$on('$destroy', function () {\n            clearInterval(localReposTimer);\n        });\n\n        $scope.addMember = function(repository) {\n            if ($scope.getRepositoryServer(repository) === \"Local\") {\n                $scope.addLocalMember(repository);\n            } else {\n                let member = {\n                    store: REMOTE_REPO_STORE,\n                    repositoryName: repository.id,\n                    repositoryServer: repository.location,\n                    username: '',\n                    password: '',\n                    supportsASKQueries: \"true\",\n                    writable: \"false\"\n                }\n                $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                    if (member.repositoryServer) {\n                        return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                    } else {\n                        return repo.id !== member.repositoryName || !repo.local;\n                    }\n                });\n                updateMembers(member);\n            }\n        }\n\n        $scope.addLocalMember = function (repository) {\n            let member = {\n                store: LOCAL_REPO_STORE,\n                repositoryName: repository.id,\n                repoType: repository.type,\n                respectRights: \"true\",\n                writable: \"false\"\n            };\n\n            $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                if (member.repositoryServer) {\n                    return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                } else {\n                    return repo.id !== member.repositoryName || !repo.local;\n                }\n            });            updateMembers(member);\n        }\n\n        $scope.removeMember = function (member) {\n            if (member.store && member.store === LOCAL_REPO_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName || el.store !== member.store);\n                $scope.allLocalRepos = [];\n                getKnownRepos();\n            } else if (member.store && member.store === SPARQL_ENDPOINT_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.endpoint !== member.endpoint);\n            } else if (member.store && member.store === NATIVE_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryLocation !== member.repositoryLocation);\n            } else if (member.store && member.store === REMOTE_REPO_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName\n                    || el.repositoryServer !== member.repositoryServer || el.store !== member.store);\n                $scope.allAttachedRepos = []\n                getKnownRepos();\n            }\n            $scope.repositoryInfo.params['member'].value = $scope.fedxMembers;\n        }\n\n        $scope.addRemoteMember = function () {\n            $scope.mode = 'remote';\n            $scope.model = {\n                editMode: false,\n                store: REMOTE_REPO_STORE,\n                repositoryName: '',\n                repositoryServer: '',\n                sparqlEndpoint: '',\n                username: '',\n                password: '',\n                supportsASKQueries: \"true\",\n                writable: \"false\"\n            }\n\n            $scope.$modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/add-fedx-remote-repo.html',\n                scope: $scope,\n            });\n        };\n\n        $scope.getMemberIcon = function (member) {\n            if (member.repoType) {\n                return 'icon-repo-' + member.repoType;\n            } else if (member.store === NATIVE_STORE) {\n                return 'icon-warning';\n            } else {\n                return 'icon-link';\n            }\n        }\n\n        $scope.editFedXRepository = function (member) {\n            if (member.store === LOCAL_REPO_STORE) {\n                $scope.mode = 'local';\n                $scope.model = {\n                    editMode: true,\n                    store: member.store,\n                    respectRights: member.respectRights,\n                    repositoryName: member.repositoryName,\n                    repoType: member.repoType,\n                    writable: member.writable\n                }\n            } else {\n                $scope.mode = 'remote';\n                $scope.model = {\n                    editMode: true,\n                    store: member.store,\n                    repositoryName: member.repositoryName,\n                    repositoryServer: member.repositoryServer,\n                    sparqlEndpoint: member.store === SPARQL_ENDPOINT_STORE ? member.endpoint : member.repositoryLocation,\n                    username: member.username,\n                    password: member.password,\n                    supportsASKQueries: member.supportsASKQueries,\n                    writable: member.writable\n                }\n            }\n\n            $scope.$modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/add-fedx-remote-repo.html',\n                scope: $scope\n            });\n        };\n\n        $scope.resolveName = function (member) {\n            switch (member.store) {\n                case LOCAL_REPO_STORE : {\n                    return member.repositoryName;\n                }\n                case REMOTE_REPO_STORE : {\n                    return member.repositoryName + '@' + member.repositoryServer;\n                }\n                case SPARQL_ENDPOINT_STORE : {\n                    return member.endpoint;\n                }\n                case NATIVE_STORE : {\n                    return member.repositoryLocation;\n                }\n                default :\n                    return \"\";\n            }\n        }\n\n        $scope.cancel = function () {\n            $scope.$modalInstance.dismiss('cancel');\n        };\n\n        function updateMembers(member) {\n            $scope.fedxMembers.push(member);\n            $scope.repositoryInfo.params['member'].value = $scope.fedxMembers;\n        }\n\n        function removeEndingSlash(url) {\n            return url.slice(-1) === '/' ? url.slice(0, -1) : url\n        }\n\n        function checkEditMode() {\n            return $scope.editRepoPage && !$scope.editRepoPage || !$scope.model.editMode;\n        }\n\n        $scope.ok = function () {\n            let member;\n            if ($scope.model.repositoryName && $scope.model.store === LOCAL_REPO_STORE) {\n                member = {\n                    store: LOCAL_REPO_STORE,\n                    repositoryName: $scope.model.repositoryName,\n                    repoType: $scope.model.repoType,\n                    respectRights: $scope.model.respectRights,\n                    writable: $scope.model.writable\n                }\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName || el.store !== member.store );\n            } else if ($scope.model.repositoryName && $scope.model.store === REMOTE_REPO_STORE) {\n                member = {\n                    store: REMOTE_REPO_STORE,\n                    repositoryName: $scope.model.repositoryName,\n                    repositoryServer: removeEndingSlash($scope.model.repositoryServer),\n                    username: $scope.model.username,\n                    password: $scope.model.password,\n                    writable: $scope.model.writable\n                };\n                if (checkEditMode() && $scope.fedxMembers.find(el => el.repositoryName === member.repositoryName\n                    && el.repositoryServer === member.repositoryServer)) {\n                    let resolvedName = $scope.resolveName(member);\n                    toastr.error(`Repository ${resolvedName} already added as a FedX member`);\n                    $scope.$modalInstance.close();\n                    return;\n                }\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName\n                    || el.repositoryServer !== member.repositoryServer);\n            } else {\n                member = {\n                    store: SPARQL_ENDPOINT_STORE,\n                    endpoint: removeEndingSlash($scope.model.sparqlEndpoint),\n                    username: $scope.model.username,\n                    password: $scope.model.password,\n                    supportsASKQueries: $scope.model.supportsASKQueries,\n                    writable: $scope.model.writable\n                };\n\n                if (checkEditMode() && $scope.fedxMembers.find(el => el.endpoint === member.endpoint)) {\n                    let resolvedName = $scope.resolveName(member);\n                    toastr.error(`SPARQL endpoint ${resolvedName} already added as a FedX member`);\n                    $scope.$modalInstance.close();\n                    return;\n                }\n\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.endpoint !== member.endpoint);\n            }\n\n            updateMembers(member);\n            populateKnownRepos();\n            $scope.$modalInstance.close();\n        };\n\n        getKnownRepos();\n    }\n}\n"],"sourceRoot":""}