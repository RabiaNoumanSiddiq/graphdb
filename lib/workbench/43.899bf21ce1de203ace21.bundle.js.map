{"version":3,"sources":["webpack:///./src/js/angular/utils/notifications.js","webpack:///./src/js/angular/similarity/controllers/create-index.controller.js"],"names":["Notifications","toastr","showToastMessageWithDelay","message","Promise","r","success","setTimeout","angular","module","factory","$inject","CreateSimilarityIdxCtrl","$scope","$modal","$timeout","SimilarityRestService","SparqlRestService","$location","productInfo","RDF4JRepositoriesRestService","LocalStorageAdapter","LSKeys","indexType","search","type","undefined","startsWith","viewType","newIndex","info","page","defaultTabConfig","id","name","query","inference","sameAs","initForViewType","indexNameFromLocation","editSearchQuery","options","searchQueries","searchQuery","analogicalQuery","currentQuery","notoolbarInference","notoolbarSameAs","window","editor","setQuery","allSamples","samples","stopList","analyzer","isLiteralIndex","getAndRemoveOption","getIndexes","data","literalIndexes","concat","filter","idx","status","map","inputIndex","desiredIdx","j","length","error","msg","getError","filenamePattern","RegExp","validateIndex","invalidIndexName","saveQueries","test","getQueryType","appendOption","option","value","key","optArr","split","i","join","saveQueryToLocal","currentQueryTab","setLoader","isRunning","progressMessage","extraMessage","yasrInnerContainer","element","document","getElementById","queryIsRunning","queryStartTime","Date","now","countTimeouted","addClass","removeClass","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalViewParam","visibleWindowHeight","innerHeight","documentElement","clientHeight","body","verticalView","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","timer","$on","cancel","yasr","container","resize","showHideEditor","selectTab","$","tab","runQuery","changePage","explain","executedQueryTab","warning","getQueryMode","explainRequested","currentTabConfig","resultsCount","resetCurrentTabConfig","getNamespaces","getRepositoryNamespaces","usedPrefixes","results","bindings","forEach","e","prefix","namespace","namespaces","repositoryError","finally","addKnownPrefixes","JSON","stringify","getValue","isDefined","setValue","getExistingTabId","existingTabId","tabsData","item","loadTab","queryType","offset","allResultsCount","pageSize","timeFinished","timeTook","sizeDelta","css","getQueryID","attr","getSearchQueries","getSamples","selectQuery","infer","tabs","copy","$watch","helpHidden","get","HIDE_SIMILARITY_HELP","toggleHelp","set","viewQuery","getQuery","indexName","indexOptions","indexStopList","queryInference","querySameAs","indexAnalyzer","open","templateUrl","controller","resolve","isInvalidIndexName","isEmptyIndexName","trim","goToPage","showEditor","notoolbar","createIndex","index","err","url","xhr","abort","showPreview","outputType","queryExists","saveTab","findTabIndexByID","addNewTab","callback","tabName","savedQuery","changePagination","toggleSampleQueries","querySelected","tabId","getLoaderMessage","timeSeconds","timeHuman","getHumanReadableSeconds","changeViewMode","tabID","remove","focusQueryEditor","find","is","focus","getActiveRepository","on","$watchCollection","tabEvent","relatedTarget","target","showSampleQueries","sampleQueries","getResultsDescription","getUpdateDescription","getStaleWarningMessage","saveSearchQuery","changedQuery","isSearchQuery","then","async","response","getCloseBtnMsg"],"mappings":"+EAMA,SAASA,EAAcC,GACnB,MAAO,CACHC,0BASJ,SAAmCC,GAC/B,OAAO,IAAIC,QAASC,IAChBJ,EAAOK,QAAQH,GACfI,WAAWF,EAAG,SApB1BG,QACKC,OAAO,wCAAyC,IAChDC,QAAQ,gBAAiBV,GAE9BA,EAAcW,QAAU,CAAC,W,gCCJzB,kBAYA,SAASC,EAAwBC,EAAQZ,EAAQa,EAAQC,EAAUC,EAAuBC,EAAmBC,EAAWC,EAAanB,EAAeoB,EAA8BC,EAAqBC,GAEnM,MAAMC,EAAYL,EAAUM,SAASC,UACnBC,IAAdH,GAA2BA,EAAUI,WAAW,QAChDd,EAAOe,SAAW,OAElBf,EAAOe,SAAWL,EAKtBV,EAAOgB,SAAW,GAElBhB,EAAOiB,KAAOX,EACdN,EAAOkB,KAAO,EAEd,MAAMC,EAAmB,CACrBC,GAAI,IACJC,KAAM,GACNC,MAAO,GACPC,WAAW,EACXC,QAAQ,GAcZ,MAAMC,EAAkB,WAXF,IAAUC,EAwB5B,GAZA1B,EAAO2B,gBAAkBtB,EAAUM,SAASgB,gBAC5C3B,EAAOkB,KAAOlB,EAAO2B,gBAAkB,EAAI,EAC3C3B,EAAOgB,SAASK,MAdYK,EAcWrB,EAAUM,SAASU,MAZlC,IAAhBrB,EAAOkB,KACAQ,EAEA,WAAaA,EAGrB,GAOP1B,EAAOgB,SAASY,QAAWvB,EAAUM,SAASiB,QAAUvB,EAAUM,SAASiB,QAA+B,SAApB5B,EAAOe,SA9BtE,kBACA,GA+BnBf,EAAO6B,gBACP7B,EAAOgB,SAASc,YAAczB,EAAUM,SAASmB,YAAczB,EAAUM,SAASmB,YAAc9B,EAAO6B,cAAc7B,EAAOe,UACpG,gBAApBf,EAAOe,WACPf,EAAOgB,SAASe,gBAAkB1B,EAAUM,SAASoB,gBAAkB1B,EAAUM,SAASoB,gBAAkB/B,EAAO6B,cAA0B,aAIjJ7B,EAAO2B,gBAEP3B,EAAOgC,aAAaV,MAAQtB,EAAOgB,SAASc,YAC5C9B,EAAOiC,oBAAqB,EAC5BjC,EAAOkC,iBAAkB,EACrBC,OAAOC,QACPpC,EAAOqC,SAASrC,EAAOgB,SAASc,iBAEjC,CACH,GAAwB,SAApB9B,EAAOe,UAAuBf,EAAOsC,WAAY,CACjDtC,EAAOuC,QAAUvC,EAAOsC,WAAiB,KACzCtC,EAAOgB,SAASwB,SAAYnC,EAAUM,SAAS6B,SAAWnC,EAAUM,SAAS6B,cAAW3B,EACxFb,EAAOgB,SAASyB,SAAYpC,EAAUM,SAAS8B,SAAWpC,EAAUM,SAAS8B,SAAW,gDACxF,MAAMC,EAAiBC,EAAmB,uBACnB9B,IAAnB6B,IACA1C,EAAOgB,SAAS0B,eAAiBA,GAEjCP,OAAOC,QACPpC,EAAOqC,SAASrC,EAAOuC,QAAkB,UAGzB,gBAApBvC,EAAOe,UAA8Bf,EAAOsC,aAC5CnC,EAAsByC,aACjBnD,SAAQ,SAAUoD,GASnB,GARI7C,EAAO8C,eAAiB,CAAC,YAAYC,OAAOF,EACvCG,QAAO,SAAUC,GACd,MAAoB,gBAAbA,EAAIrC,OAA0C,UAAfqC,EAAIC,QAAqC,aAAfD,EAAIC,WAEvEC,KAAI,SAAUF,GACX,OAAOA,EAAI5B,cAGYR,IAA/Bb,EAAOgB,SAASoC,WAA0B,CAC1C,MAAMC,EAAaV,EAAmB,gBACtC,QAAmB9B,IAAfwC,EACA,IAAK,IAAIC,EAAI,EAAGA,EAAItD,EAAO8C,eAAeS,OAAQD,IAC1CD,IAAerD,EAAO8C,eAAeQ,KACrCtD,EAAOgB,SAASoC,WAAapD,EAAO8C,eAAeQ,SAKhCzC,IAA/Bb,EAAOgB,SAASoC,aAChBpD,EAAOgB,SAASoC,WAAapD,EAAO8C,eAAe,OAG1DU,OAAM,SAAUX,GACb,MAAMY,EAAMC,SAASb,GACrBzD,EAAOoE,MAAMC,EAAK,4BAGtBzD,EAAOuC,QAAUvC,EAAOsC,WAAwB,YAC5CH,OAAOC,QACPpC,EAAOqC,SAASrC,EAAOuC,QAAqB,gBAMtDoB,EAAkB,IAAIC,OAAO,oBAE7BC,EAAgB,WAGlB,OAFA7D,EAAO8D,kBAAmB,EAC1B9D,EAAO+D,cACF/D,EAAOgB,SAASK,KAIhBsC,EAAgBK,KAAKhE,EAAOgB,SAASK,MAKrCrB,EAAOgB,SAASM,MAKhBtB,EAAOgB,SAASc,YAKG,gBAApB9B,EAAOe,UAA+Bf,EAAOgB,SAASe,gBAKrB,WAAjCI,OAAOC,OAAO6B,qBACd7E,EAAOoE,MAAM,8CALbpE,EAAOoE,MAAM,sCACN,IANPpE,EAAOoE,MAAM,kCACN,IANPpE,EAAOoE,MAAM,kCACN,IANPxD,EAAO8D,iBAAmB,8EACnB,IALP9D,EAAO8D,iBAAmB,8BACnB,IA8BTI,EAAe,SAAUC,EAAQC,GACnCpE,EAAOgB,SAASY,QAAU5B,EAAOgB,SAASY,SAAuC,KAA5B5B,EAAOgB,SAASY,QAAiB,GAAK,KAAOuC,EAAS,IAAMC,GAuOrH,SAASzB,EAAmB0B,GACxB,MAAMC,EAAStE,EAAOgB,SAASY,QAAQ2C,MAAM,KAC7C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOf,OAAQiB,IAC/B,GAAIF,EAAOE,KAAOH,GAAOG,EAAI,EAAIF,EAAOf,OAAQ,CAC5C,MAAMa,EAAQE,EAAOE,EAAI,GAMzB,cAJOF,EAAOE,UACPF,EAAOE,EAAI,GAClBxE,EAAOgB,SAASY,QAAU0C,EAAOG,KAAK,KAE/BL,GAMnB,SAASM,EAAiBC,IAG1B,SAASC,EAAUC,EAAWC,EAAiBC,GAC3C,MAAMC,EAAqBrF,QAAQsF,QAAQC,SAASC,eAAe,eACnEnF,EAAOoF,eAAiBP,EACpBA,GACA7E,EAAOqF,eAAiBC,KAAKC,MAC7BvF,EAAOwF,gBAAiB,EACxBxF,EAAO8E,gBAAkBA,EACzB9E,EAAO+E,aAAeA,EACtBC,EAAmBS,SAAS,UAE5BzF,EAAO8E,gBAAkB,GACzB9E,EAAO+E,aAAe,GACtBC,EAAmBU,YAAY,SAGZ,OAAnB1F,EAAO2F,SACP3F,EAAO4F,SAsBf,SAASC,EAAmCC,GACxC,SAASC,IACL,OAAO5D,OAAO6D,aAAed,SAASe,gBAAgBC,cAAgBhB,SAASiB,KAAKD,cAAgB,EAGxG,MAAME,EAAeN,EACrB,GAAK9F,EAAOqG,oBAwBL,CACH,GAAwB,SAApBrG,EAAOsG,SAAqB,CAC5B,IAAIC,EAAYR,IAAyBb,SAASsB,cAAc,oBAAoBC,wBAA2B,IAC/GF,GAAa,GACbrB,SAASsB,cAAc,oBAAoBE,MAAMC,OAASJ,EAAY,UAEtEvG,EAAO4G,UAAY,GACnB1B,SAASsB,cAAc,oBAAoBE,MAAMC,OAAS,GAE9DzB,SAASC,eAAe,QAAQuB,MAAMG,UAAY,QA7BlD,GAHA7G,EAAO4G,UAAY,CAACE,aAAc,GAAIC,YAAa,GAG/C5E,OAAOC,QAAU8C,SAASsB,cAAc,oBAAqB,CAC7D,IAAID,EAAYR,IAAyBb,SAASsB,cAAc,oBAAoBC,wBAA2B,IAC/GF,GAAa,GACbrB,SAASsB,cAAc,oBAAoBE,MAAMC,OAASJ,EAAY,KACtErB,SAASC,eAAe,QAAQuB,MAAMG,UAAYN,EAAY,SAE3D,CACH,IAAIS,EAEAA,EAAQ9G,EADRkG,EACiB,WACbpG,EAAO6F,mCAAmCO,IAG7BpG,EAAO6F,mCAFrB,KAKP7F,EAAOiH,IAAI,YAAY,WACnB/G,EAASgH,OAAOF,MAcxB7E,OAAOgF,MAAQhF,OAAOgF,KAAKC,WAC3BlH,GAAS,WACLiC,OAAOgF,KAAKC,UAAUC,WACvB,KAoBX,SAASC,IACLzB,GAAmC,GAWvC,SAAS0B,EAAUnG,GACflB,GAAS,WACLsH,EAAE,gBAAkBpG,EAAK,MAAMqG,IAAI,UACpC,GAIP,SAASC,EAASC,EAAYC,GAC1B5H,EAAO6H,iBAAmB7H,EAAOgC,aACI,WAAjCG,OAAOC,OAAO6B,eAId2D,GAA8C,WAAjCzF,OAAOC,OAAO6B,eAC3B7E,EAAO0I,QAAQ,2CAIkB,WAAjC3F,OAAOC,OAAO2F,gBAKlB/H,EAAOgI,iBAAmBJ,EACrB5H,EAAOoF,iBACJuC,EACA3H,EAAOiI,iBAAiBC,aAAe,EAEvClI,EAAOmI,wBAIXnI,EAAOsG,SAAW,SACdtG,EAAOqG,qBACPrG,EAAO6F,qCAGXjB,GAAU,EAAM,oBAChBzC,OAAOC,OAAOd,UAnBdlC,EAAO0I,QAAQ,4CATf1I,EAAOoE,MAAM,qDAiCrB,SAAS4E,IAELxD,GAAU,EAAM,wBAAyB,kHACzCrE,EAA6B8H,0BACxB5I,SAAQ,SAAUoD,GACf,MAAMyF,EAAe,GACrBzF,EAAK0F,QAAQC,SAASC,SAAQ,SAAUC,GACpCJ,EAAaI,EAAEC,OAAOvE,OAASsE,EAAEE,UAAUxE,SAE/CpE,EAAO6I,WAAaP,KAEvB9E,OAAM,SAAUX,GACb7C,EAAO8I,gBAAkBpF,SAASb,MAErCkG,SAAQ,WAELnE,GAAU,MAqBtB,SAASoE,IACL5I,EAAkB4I,iBAAiBC,KAAKC,UAAU/G,OAAOC,OAAO+G,aAC3D1J,SAAQ,SAAUoD,GACXlD,QAAQyJ,UAAUjH,OAAOC,SAAWzC,QAAQyJ,UAAUvG,IAASA,IAASV,OAAOC,OAAO+G,YACtFhH,OAAOC,OAAOiH,SAASxG,MAG9BW,OAAM,SAAUX,GACb,MAAMY,EAAMC,SAASb,GAErB,OADAzD,EAAOoE,MAAMC,EAAK,wCACX,KAoBnB,SAAS6F,EAAiBhI,GACtB,IAAIiI,OAAgB1I,EAQpB,OAPAlB,QAAQ8I,QAAQzI,EAAOwJ,UAAU,SAAUC,GACvC,GAAIA,EAAKpI,OAASC,EAAMD,MAAQoI,EAAKnI,QAAUA,EAAM6E,KAEjD,OADAoD,EAAgBE,EAAKrI,GACdqI,KAIRF,EAmCX,SAASG,IACL1J,EAAOwJ,SAAW,CAACxJ,EAAOgC,cAE1B,MAAMyF,EAAMzH,EAAOgC,aAEe,OAA9BhC,EAAOgC,aAAaV,OAAgD,KAA9BtB,EAAOgC,aAAaV,MAE1Da,OAAOC,OAAOiH,SAAS,KAEvBlH,OAAOC,OAAOiH,SAASrJ,EAAOgC,aAAaV,OAAS,KAGxDpB,GAAS,WACLF,EAAOiI,iBAAmB,GAC1BjI,EAAOiI,iBAAiB0B,UAAYlC,EAAIkC,UACxC3J,EAAOiI,iBAAiBC,aAAeT,EAAIS,aAE3ClI,EAAOiI,iBAAiB2B,OAASnC,EAAImC,OACrC5J,EAAOiI,iBAAiB4B,gBAAkBpC,EAAIoC,gBAC9C7J,EAAOiI,iBAAiB/G,KAAOuG,EAAIvG,KACnClB,EAAOiI,iBAAiB6B,SAAWrC,EAAIqC,SAEvC9J,EAAOiI,iBAAiB8B,aAAetC,EAAIsC,aAC3C/J,EAAOiI,iBAAiB+B,SAAWvC,EAAIuC,SACvChK,EAAOiI,iBAAiBgC,UAAYxC,EAAIwC,UACxCjK,EAAO4F,WACR,GAGH4B,EAAE,SAAS0C,IAAI,UAAW,KAG9B,SAASC,EAAWlF,GAChB,OAAOuC,EAAEvC,GAASmF,KAAK,WApiB3BjK,EAAsBkK,mBAAmB5K,SAAQ,SAAUoD,GACvD7C,EAAO6B,cAAgBgB,EACvB1C,EAAsBmK,aAAa7K,SAAQ,SAAU8C,GACjDpB,EAAiBG,MAAQjB,EAAUM,SAAS4J,YAAclK,EAAUM,SAAS4J,YAAchI,EAAc,KAAY,SACrHpB,EAAiBI,YAA2C,UAA7BlB,EAAUM,SAAS6J,OAClDrJ,EAAiBK,SAAyC,UAA9BnB,EAAUM,SAASa,QAC/CxB,EAAOwJ,SAAWxJ,EAAOyK,KAAO,CAACtJ,GACjCnB,EAAOgC,aAAerC,QAAQ+K,KAAKvJ,GACnCnB,EAAOsC,WAAaC,EACpBd,UAEL+B,OAAM,SAAUX,GACf,MAAMY,EAAMC,SAASb,GACrBzD,EAAOoE,MAAMC,EAAK,mCAGtBzD,EAAO2K,OAAO,YAAY,WACtBlJ,OAGJzB,EAAO4K,WAAsE,IAAzDpK,EAAoBqK,IAAIpK,EAAOqK,sBACnD9K,EAAO+K,WAAa,SAAU3G,QACZvD,IAAVuD,IACAA,EAAQ5D,EAAoBqK,IAAIpK,EAAOqK,uBAE7B,IAAV1G,GACA5D,EAAoBwK,IAAIvK,EAAOqK,qBAAsB,GACrD9K,EAAO4K,YAAa,IAEpBpK,EAAoBwK,IAAIvK,EAAOqK,qBAAsB,GACrD9K,EAAO4K,YAAa,IAI5B5K,EAAOiL,UAAY,WACVpH,KAIL1D,EAAsB+K,SAAS,CAC3BC,UAAWnL,EAAOgB,SAASK,KAC3B+J,aAAcpL,EAAOgB,SAASY,QAC9BN,MAAOtB,EAAOgC,aAAaV,MAC3B+J,cAAerL,EAAOgB,SAASwB,SAC/B8I,eAAgBtL,EAAOgC,aAAaT,UACpCgK,YAAavL,EAAOgC,aAAaR,OACjCT,SAAUf,EAAOe,SACjByK,cAAexL,EAAOgB,SAASyB,WAChChD,SAAQ,SAAU6B,GACbA,GACArB,EAAOwL,KAAK,CACRC,YAAa,uBACbC,WAAY,gBACZC,QAAS,CACLtK,MAAO,WACH,OAAOA,UAQ/BtB,EAAO2K,OAAO,iBAAiB,WAC3B3K,EAAO6L,oBAAqB,EAC5B7L,EAAO8L,kBAAmB,KAG9B9L,EAAO+D,YAAc,WAEjB,MAAMzC,EAAQa,OAAOC,OAAO+G,WAAW4C,OACnB,IAAhB/L,EAAOkB,KACPlB,EAAOgB,SAASM,MAAQA,EACD,IAAhBtB,EAAOkB,KACdlB,EAAOgB,SAASc,YAAcR,EACP,IAAhBtB,EAAOkB,OACdlB,EAAOgB,SAASe,gBAAkBT,IAI1CtB,EAAOgM,SAAW,SAAU9K,GAEX,IAATA,GAAkC,SAApBlB,EAAOsG,WACrBtG,EAAOiM,aACP/L,GAAS,WACQ,IAATgB,IACAlB,EAAOgC,aAAaV,MAAQtB,EAAOgB,SAASc,aAEnC,IAATZ,IACAlB,EAAOgC,aAAaV,MAAQtB,EAAOgB,SAASe,iBAGhDI,OAAOC,OAAOiH,SAASrJ,EAAOgC,aAAaV,OAAS,SAI5DtB,EAAO+D,cAEM,IAAT7C,EACAlB,EAAOgC,aAAaV,MAAQtB,EAAOgB,SAASM,MAC5B,IAATJ,EACPlB,EAAOgC,aAAaV,MAAQtB,EAAOgB,SAASc,YAC5B,IAATZ,IACPlB,EAAOgC,aAAaV,MAAQtB,EAAOgB,SAASe,iBAGhD2H,IACA1J,EAAOkM,UAAqB,IAAThL,EAEnBlB,EAAOkB,KAAOA,GAGlBlB,EAAOmM,YAAc,WACZtI,KAIL1D,EAAsByC,aACjBnD,SAAQ,SAAUoD,GAMf,GALAA,EAAK4F,SAAQ,SAAU2D,GACfA,EAAM/K,OAASrB,EAAOgB,SAASK,OAC/BrB,EAAO8D,iBAAmB,4CAG7B9D,EAAO8D,iBAAkB,CAC1B,IAAIpD,EAAYV,EAAOe,SAEvB,QAA8BF,IAA1Bb,EAAO8C,eAA8B,CACrC,MAAMM,EAAapD,EAAOgB,SAASoC,WAC/BA,IAAepD,EAAO8C,eAAe,IACrCoB,EAAa,eAAgBd,GAGE,SAAnCpD,EAAOgB,SAAS0B,iBAChBwB,EAAa,iBAAkB,QAC/BxD,EAAY,eAGhBP,EAAsBgM,YAAY,OAC9BnM,EAAOgB,SAASK,KAChBrB,EAAOgB,SAASY,QAChB5B,EAAOgB,SAASM,MAChBtB,EAAOgB,SAASc,YAChB9B,EAAOgB,SAASe,gBAChB/B,EAAOgB,SAASwB,SAChBxC,EAAOgC,aAAaT,UACpBvB,EAAOgC,aAAaR,OACpBd,EACAV,EAAOgB,SAASyB,UACfe,OAAM,SAAU6I,GACbjN,EAAOoE,MAAME,SAAS2I,GAAM,6BAEpChM,EAAUiM,IAAI,kBAIrB9I,OAAM,SAAUX,GACb,MAAMY,EAAMC,SAASb,GACrBzD,EAAOoE,MAAMC,EAAK,6BAK9BzD,EAAOqC,SAAW,SAAUf,GAExBa,OAAOC,OAAOiH,SAAS/H,GAAgB,MAM3CtB,EAAOiM,WAAa,WACZ9J,OAAOC,OAAOmK,KACdpK,OAAOC,OAAOmK,IAAIC,QAEtBxM,EAAOsG,SAAW,QAGtBtG,EAAOyM,YAAc,WAGjBzM,EAAOgC,aAAa0K,WAAa,QACjC1M,EAAO0H,YAGX1H,EAAOmI,sBAAwB,WAC3BnI,EAAOiI,iBAAmB,CACtB6B,SAAU,IACV5I,KAAM,EACN2I,gBAAiB,EACjB3B,aAAc,IAItBlI,EAAO2M,aAAc,EAErB3M,EAAOmI,wBAEPnI,EAAOwJ,SAAWxJ,EAAOyK,KAAO,CAACtJ,GAGjCnB,EAAO4M,QA2SP,SAAiBxL,GACb,MAAM6B,EAdV,SAA0B7B,GACtB,IAAK,IAAIoD,EAAI,EAAGA,EAAIxE,EAAOwJ,SAASjG,OAAQiB,IAAK,CAE7C,GADYxE,EAAOwJ,SAAShF,GACpBpD,KAAOA,EACX,OAAOoD,GAUHqI,CAAiBzL,GAE7B,QAAYP,IAARoC,EACA,MAAO,GAEX,MAAMwE,EAAMzH,EAAOwJ,SAASvG,GAG5B,OADAjD,EAAO0E,iBAAiB+C,GACjBA,GAnTXzH,EAAO0J,QAAUA,EACjB1J,EAAO8M,UAqTP,SAAmBC,EAAUC,EAASC,KAlTtCjN,EAAO0H,SAAWA,EAClB1H,EAAOoI,cAAgBA,EACvBpI,EAAOkN,iBAwNP,WACIxF,GAAS,EAAM1H,EAAOgI,mBAxN1BhI,EAAOmN,oBAoOP,aAnOAnN,EAAOgJ,iBAAmBA,EAC1BhJ,EAAOsJ,iBAAmBA,EAC1BtJ,EAAOoN,cAyPP,SAAuB9L,GACnB,MAAM+L,EAAQ/D,EAAiBhI,GAC/BtB,EAAOmN,sBACFxN,QAAQyJ,UAAUiE,GAGnB9F,EAAU8F,GAFVrN,EAAO8M,UAAU,KAAMxL,EAAMD,KAAMC,EAAM6E,OA5PjDnG,EAAO0E,iBAAmBA,EAE1B1E,EAAO4E,UAAYA,EACnB5E,EAAOsN,iBAmDP,WACI,MAAMC,GAAejI,KAAKC,MAAQvF,EAAOqF,gBAAkB,IACrDmI,EAAYxN,EAAOyN,wBAAwBF,GACjD,IAAIjO,EAAU,GAGVA,EADAU,EAAO8E,gBACG9E,EAAO8E,gBAAkB,OAAS0I,EAElC,uBAAyBA,EAEnCxN,EAAO+E,cAAgBwI,EAAc,KACrCjO,GAAW,KAAOU,EAAO+E,cAG7B,OAAOzF,GA9DXU,EAAO6F,mCAAqCA,EAC5C7F,EAAO0N,eAqHP,SAAwBC,GACpB3N,EAAOsG,SAAW,OAClBtG,EAAOqG,qBAAuBrG,EAAOqG,oBACrCR,IACA2B,EAAE,sBAAsBoG,SACxBpG,EAAE,iBAAiBoG,SACnB1N,GAAS,WACLwJ,IACAnC,EAAUoG,KACX,MA7HP3N,EAAOsH,eAAiBA,EACxBtH,EAAO6N,iBAmIP,WACSlO,QAAQsF,QAAQC,UAAU4I,KAAK,mBAAmBC,GAAG,WACtDpO,QAAQsF,QAAQC,UAAU4I,KAAK,oCAAoCE,SApI3EhO,EAAOqG,qBAAsB,EAG7BrG,EAAOiO,sBA2GFjO,EAAOqG,qBACRiB,IA8FAtH,EAAOiO,uBACP7F,IAGJpI,EAAOiH,IAAI,YAAY,WACnB9E,OAAOC,OAAS,KAChBD,OAAOgF,KAAO,QAqBlBK,EAAE,YAAY0G,GAAG,SAAS,WACtBhO,GAAS,WACL8I,MACD,MAsCPhJ,EAAOmO,iBAAiB,iDAAiD,WACpDnO,EAAOgC,gBAsD5BhC,EAAOiH,IAAI,aAAa,SAAUyB,EAAG0F,GAC7BA,EAASC,eACTrO,EAAO4M,QAAQzC,EAAWiE,EAASC,gBAEvCrO,EAAO0J,QAAQS,EAAWiE,EAASE,YAGvCtO,EAAOiH,IAAI,0BAA0B,SAAUyB,EAAG+B,GAC9CzK,EAAOwJ,SAAWiB,EAClBzK,EAAOyK,KAAOA,KAIlBzK,EAAOgC,aAAerC,QAAQ+K,KAAKvJ,GAEnCnB,EAAOuO,mBAAoB,EAC3BvO,EAAOiN,WAAa,GACpBjN,EAAOwO,cAAgB,GAEvBxO,EAAOyO,sBAAwB,aAG/BzO,EAAO0O,qBAAuB,aAG9B1O,EAAO2O,uBAAyB,aAGhC3O,EAAO4O,gBAAkB,WAErB,GAAqC,WAAjCzM,OAAOC,OAAO6B,eAEd,YADA7E,EAAOoE,MAAM,6CAGjB,IAAIX,EAAO,CACPxB,KAAMrB,EAAOgB,SAASK,KACtBwN,aAAc7O,EAAOgC,aAAaV,MAClCwN,cAA+B,IAAhB9O,EAAOkB,MAG1B,OAAOf,EAAsByO,gBAAgB3F,KAAKC,UAAUrG,IACvDkM,MAAKC,uBACI7P,EAAcE,0BAA0C,IAAhBW,EAAOkB,KAAa,uBAAyB,4BAC3Fb,EAAUiM,IAAI,iBACf,SAAU2C,GACT7P,EAAOoE,MAAME,SAASuL,GAAW,+BAI7CjP,EAAOkP,eAAiB,WACpB,MAAO,WAAalP,EAAO2B,gBAAkB,gBAAiB,kBAAoB,gCAtvB1FhC,QACKC,OAAO,kDAAmD,CACvD,wCACA,gDAEH+L,WAAW,0BAA2B5L,GAE3CA,EAAwBD,QAAU,CAAC,SAAU,SAAU,SAAU,WAAY,wBAAyB,oBAAqB,YAAa,cAAe,gBAAiB,+BAAgC,sBAAuB","file":"43.899bf21ce1de203ace21.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr'];\n\nfunction Notifications(toastr) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success(message);\n            setTimeout(r, 200);\n        });\n    }\n}\n","import 'angular/utils/notifications';\nimport 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.similarity.controllers.create', [\n        'graphdb.framework.utils.notifications',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .controller('CreateSimilarityIdxCtrl', CreateSimilarityIdxCtrl);\n\nCreateSimilarityIdxCtrl.$inject = ['$scope', 'toastr', '$modal', '$timeout', 'SimilarityRestService', 'SparqlRestService', '$location', 'productInfo', 'Notifications', 'RDF4JRepositoriesRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction CreateSimilarityIdxCtrl($scope, toastr, $modal, $timeout, SimilarityRestService, SparqlRestService, $location, productInfo, Notifications, RDF4JRepositoriesRestService, LocalStorageAdapter, LSKeys) {\n\n    const indexType = $location.search().type;\n    if (indexType === undefined || indexType.startsWith('text')) {\n        $scope.viewType = 'text';\n    } else {\n        $scope.viewType = indexType;\n    }\n\n    const textDefaultOptions = '-termweight idf';\n    const predDefaultOptions = '';\n    $scope.newIndex = {};\n\n    $scope.info = productInfo;\n    $scope.page = 1;\n\n    const defaultTabConfig = {\n        id: '1',\n        name: '',\n        query: '',\n        inference: true,\n        sameAs: true\n    };\n\n    let getNewIndexName = function (indexNameFromLocation) {\n        if (indexNameFromLocation) {\n            if ($scope.page !== 1) {\n                return indexNameFromLocation;\n            } else {\n                return 'Copy_of_' + indexNameFromLocation;\n            }\n        }\n        return '';\n    };\n\n    const initForViewType = function () {\n        $scope.editSearchQuery = $location.search().editSearchQuery;\n        $scope.page = $scope.editSearchQuery ? 2 : 1;\n        $scope.newIndex.name = getNewIndexName($location.search().name);\n        $scope.newIndex.options = ($location.search().options ? $location.search().options : ($scope.viewType === \"text\") ? textDefaultOptions : predDefaultOptions);\n\n        if ($scope.searchQueries) {\n            $scope.newIndex.searchQuery = $location.search().searchQuery ? $location.search().searchQuery : $scope.searchQueries[$scope.viewType];\n            if ($scope.viewType === 'predication') {\n                $scope.newIndex.analogicalQuery = $location.search().analogicalQuery ? $location.search().analogicalQuery : $scope.searchQueries['analogical'];\n            }\n        }\n\n        if ($scope.editSearchQuery) {\n            // Default will be opened search query tab for edition\n            $scope.currentQuery.query = $scope.newIndex.searchQuery;\n            $scope.notoolbarInference = true;\n            $scope.notoolbarSameAs = true;\n            if (window.editor) {\n                $scope.setQuery($scope.newIndex.searchQuery);\n            }\n        } else {\n            if ($scope.viewType === 'text' && $scope.allSamples) {\n                $scope.samples = $scope.allSamples['text'];\n                $scope.newIndex.stopList = ($location.search().stopList ? $location.search().stopList : undefined);\n                $scope.newIndex.analyzer = ($location.search().analyzer ? $location.search().analyzer : 'org.apache.lucene.analysis.en.EnglishAnalyzer');\n                const isLiteralIndex = getAndRemoveOption('-literal_index');\n                if (isLiteralIndex !== undefined) {\n                    $scope.newIndex.isLiteralIndex = isLiteralIndex;\n                }\n                if (window.editor) {\n                    $scope.setQuery($scope.samples['literals']);\n                }\n            }\n            if ($scope.viewType === 'predication' && $scope.allSamples) {\n                SimilarityRestService.getIndexes()\n                    .success(function (data) {\n                        $scope.literalIndexes = ['no-index'].concat(data\n                            .filter(function (idx) {\n                                return idx.type === 'textLiteral' && (idx.status === 'BUILT' || idx.status === 'OUTDATED')\n                            })\n                            .map(function (idx) {\n                                return idx.name;\n                            }));\n\n                    if ($scope.newIndex.inputIndex === undefined) {\n                        const desiredIdx = getAndRemoveOption('-input_index');\n                        if (desiredIdx !== undefined) {\n                            for (let j = 0; j < $scope.literalIndexes.length; j++) {\n                                if (desiredIdx === $scope.literalIndexes[j]) {\n                                    $scope.newIndex.inputIndex = $scope.literalIndexes[j];\n                                }\n                            }\n                        }\n                    }\n                    if ($scope.newIndex.inputIndex === undefined) {\n                        $scope.newIndex.inputIndex = $scope.literalIndexes[0];\n                    }\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Could not get indexes');\n                });\n\n                $scope.samples = $scope.allSamples['predication'];\n                if (window.editor) {\n                    $scope.setQuery($scope.samples['predication']);\n                }\n            }\n        }\n    };\n\n    const filenamePattern = new RegExp('^[a-zA-Z0-9-_]+$');\n\n    const validateIndex = function () {\n        $scope.invalidIndexName = false;\n        $scope.saveQueries();\n        if (!$scope.newIndex.name) {\n            $scope.invalidIndexName = 'Index name cannot be empty';\n            return false;\n        }\n        if (!filenamePattern.test($scope.newIndex.name)) {\n            $scope.invalidIndexName = 'Index name can contain only letters (a-z, A-Z), numbers (0-9), \"-\" and \"_\"';\n            return false;\n        }\n\n        if (!$scope.newIndex.query) {\n            toastr.error('Select query cannot be empty.');\n            return false;\n        }\n\n        if (!$scope.newIndex.searchQuery) {\n            toastr.error('Search query cannot be empty.');\n            return false;\n        }\n\n        if ($scope.viewType === 'predication' && !$scope.newIndex.analogicalQuery) {\n            toastr.error('Analogical query cannot be empty.');\n            return false;\n        }\n\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error('Similarity index requires SELECT queries.');\n            return;\n        }\n\n        return true;\n    };\n\n    const appendOption = function (option, value) {\n        $scope.newIndex.options = $scope.newIndex.options + ($scope.newIndex.options === '' ? '' : ' ') + option + ' ' + value;\n    };\n\n    SimilarityRestService.getSearchQueries().success(function (data) {\n        $scope.searchQueries = data;\n        SimilarityRestService.getSamples().success(function (samples) {\n            defaultTabConfig.query = $location.search().selectQuery ? $location.search().selectQuery : samples['text']['literals'];\n            defaultTabConfig.inference = !($location.search().infer === 'false');\n            defaultTabConfig.sameAs = !($location.search().sameAs === 'false');\n            $scope.tabsData = $scope.tabs = [defaultTabConfig];\n            $scope.currentQuery = angular.copy(defaultTabConfig);\n            $scope.allSamples = samples;\n            initForViewType();\n        });\n    }).error(function (data) {\n        const msg = getError(data);\n        toastr.error(msg, 'Could not get search queries');\n    });\n\n    $scope.$watch('viewType', function () {\n        initForViewType();\n    });\n\n    $scope.helpHidden = LocalStorageAdapter.get(LSKeys.HIDE_SIMILARITY_HELP) === 1;\n    $scope.toggleHelp = function (value) {\n        if (value === undefined) {\n            value = LocalStorageAdapter.get(LSKeys.HIDE_SIMILARITY_HELP);\n        }\n        if (value !== 1) {\n            LocalStorageAdapter.set(LSKeys.HIDE_SIMILARITY_HELP, 1);\n            $scope.helpHidden = true;\n        } else {\n            LocalStorageAdapter.set(LSKeys.HIDE_SIMILARITY_HELP, 0);\n            $scope.helpHidden = false;\n        }\n    };\n\n    $scope.viewQuery = function () {\n        if (!validateIndex()) {\n            return;\n        }\n\n        SimilarityRestService.getQuery({\n            indexName: $scope.newIndex.name,\n            indexOptions: $scope.newIndex.options,\n            query: $scope.currentQuery.query,\n            indexStopList: $scope.newIndex.stopList,\n            queryInference: $scope.currentQuery.inference,\n            querySameAs: $scope.currentQuery.sameAs,\n            viewType: $scope.viewType,\n            indexAnalyzer: $scope.newIndex.analyzer\n        }).success(function (query) {\n            if (query) {\n                $modal.open({\n                    templateUrl: 'pages/viewQuery.html',\n                    controller: 'ViewQueryCtrl',\n                    resolve: {\n                        query: function () {\n                            return query;\n                        }\n                    }\n                });\n            }\n        });\n    };\n\n    $scope.$watch('newIndex.name', function () {\n        $scope.isInvalidIndexName = false;\n        $scope.isEmptyIndexName = false;\n    });\n\n    $scope.saveQueries = function () {\n        // save the current query\n        const query = window.editor.getValue().trim();\n        if ($scope.page === 1) {\n            $scope.newIndex.query = query;\n        } else if ($scope.page === 2) {\n            $scope.newIndex.searchQuery = query;\n        } else if ($scope.page === 3) {\n            $scope.newIndex.analogicalQuery = query;\n        }\n    };\n\n    $scope.goToPage = function (page) {\n        // ugly fix for GDB-3099\n        if (page !== 1 && $scope.viewMode !== 'yasr') {\n            $scope.showEditor();\n            $timeout(function () {\n                if (page === 2) {\n                    $scope.currentQuery.query = $scope.newIndex.searchQuery;\n                }\n                if (page === 3) {\n                    $scope.currentQuery.query = $scope.newIndex.analogicalQuery;\n                }\n\n                window.editor.setValue($scope.currentQuery.query || ' ');\n            });\n        }\n\n        $scope.saveQueries();\n        // get the saved query\n        if (page === 1) {\n            $scope.currentQuery.query = $scope.newIndex.query;\n        } else if (page === 2) {\n            $scope.currentQuery.query = $scope.newIndex.searchQuery;\n        } else if (page === 3) {\n            $scope.currentQuery.query = $scope.newIndex.analogicalQuery;\n        }\n\n        loadTab();\n        $scope.notoolbar = page !== 1;\n\n        $scope.page = page;\n    };\n\n    $scope.createIndex = function () {\n        if (!validateIndex()) {\n            return;\n        }\n        // Check existing indexes\n        SimilarityRestService.getIndexes()\n            .success(function (data) {\n                data.forEach(function (index) {\n                    if (index.name === $scope.newIndex.name) {\n                        $scope.invalidIndexName = 'Index with this name already exists.';\n                    }\n                });\n                if (!$scope.invalidIndexName) {\n                    let indexType = $scope.viewType;\n\n                    if ($scope.literalIndexes !== undefined) {\n                        const inputIndex = $scope.newIndex.inputIndex;\n                        if (inputIndex !== $scope.literalIndexes[0]) {\n                            appendOption('-input_index', inputIndex);\n                        }\n                    }\n                    if ($scope.newIndex.isLiteralIndex === 'true') {\n                        appendOption('-literal_index', 'true');\n                        indexType = 'textLiteral';\n                    }\n\n                    SimilarityRestService.createIndex('POST',\n                        $scope.newIndex.name,\n                        $scope.newIndex.options,\n                        $scope.newIndex.query,\n                        $scope.newIndex.searchQuery,\n                        $scope.newIndex.analogicalQuery,\n                        $scope.newIndex.stopList,\n                        $scope.currentQuery.inference,\n                        $scope.currentQuery.sameAs,\n                        indexType,\n                        $scope.newIndex.analyzer)\n                        .error(function (err) {\n                            toastr.error(getError(err), 'Could not create index');\n                        });\n                    $location.url('similarity');\n                }\n\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not get indexes');\n            });\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    // TODO don't copy paste each time, this is the same as in the graph config\n    // DOWN HERE WE KEEP EVERYTHING PURELY QUERY EDITOR (MOSTLY BORROWED FROM query-editor.controller.js)\n\n    $scope.showEditor = function () {\n        if (window.editor.xhr) {\n            window.editor.xhr.abort();\n        }\n        $scope.viewMode = 'yasr';\n    };\n\n    $scope.showPreview = function () {\n        // For some reason YASR gets confused and sets this to rawResponse\n        // if we execute a CONSTRUCT and then a SELECT. This makes sure it's always table.\n        $scope.currentQuery.outputType = 'table';\n        $scope.runQuery();\n    };\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 100, // page limit 100 as this is only used for preview\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    $scope.tabsData = $scope.tabs = [defaultTabConfig];\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = true;\n\n    // start of repository actions\n    $scope.getActiveRepository();\n\n    function getAndRemoveOption(key) {\n        const optArr = $scope.newIndex.options.split(' ');\n        for (let i = 0; i < optArr.length; i++) {\n            if (optArr[i] === key && i + 1 < optArr.length) {\n                const value = optArr[i + 1];\n\n                delete optArr[i];\n                delete optArr[i + 1];\n                $scope.newIndex.options = optArr.join(' ');\n\n                return value;\n            }\n        }\n        return undefined;\n    }\n\n    function saveQueryToLocal(currentQueryTab) {\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = 'Running operation...' + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalViewParam) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        const verticalView = verticalViewParam;\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode(tabID) {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        fixSizesOnHorizontalViewModeSwitch();\n        $('.dataTables_filter').remove();\n        $('.resultsTable').remove();\n        $timeout(function () {\n            loadTab();\n            selectTab(tabID);\n        }, 100);\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(':focus')) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error('Similarity indexes work only with SELECT queries.');\n            return;\n        }\n        if (explain && !(window.editor.getQueryType() === 'SELECT')) {\n            toastr.warning('Explain only works with SELECT queries.');\n            return;\n        }\n\n        if (window.editor.getQueryMode() === 'update') {\n            toastr.warning('Cannot execute updates from this editor.');\n            return;\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            // Hides the editor and shows the yasr results\n            $scope.viewMode = 'editor';\n            if ($scope.orientationViewMode) {\n                $scope.fixSizesOnHorizontalViewModeSwitch();\n            }\n\n            setLoader(true, 'Evaluating query');\n            window.editor.query();\n        }\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    if ($scope.getActiveRepository()) {\n        getNamespaces();\n    }\n\n    $scope.$on('$destroy', function () {\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n    }\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n        if (!angular.isDefined(tabId)) {\n            $scope.addNewTab(null, query.name, query.body);\n        } else {\n            selectTab(tabId);\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        angular.forEach($scope.tabsData, function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n\n        return existingTabId;\n    }\n\n\n    // end of query operations\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    $scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function () {\n        saveQueryToLocal($scope.currentQuery);\n    });\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    function addNewTab(callback, tabName, savedQuery) {\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if ($scope.currentQuery.query === null || $scope.currentQuery.query === '') {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query || ' ');\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n        $scope.loadTab(getQueryID(tabEvent.target));\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = angular.copy(defaultTabConfig);\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n\n    $scope.getResultsDescription = function () {\n    };\n\n    $scope.getUpdateDescription = function () {\n    };\n\n    $scope.getStaleWarningMessage = function () {\n    };\n\n    $scope.saveSearchQuery = function () {\n        // Should validate that query is SELECT\n        if (window.editor.getQueryType() !== 'SELECT') {\n            toastr.error('Similarity index requires SELECT queries.');\n            return;\n        }\n        let data = {\n            name: $scope.newIndex.name,\n            changedQuery: $scope.currentQuery.query,\n            isSearchQuery: $scope.page === 2\n        };\n\n        return SimilarityRestService.saveSearchQuery(JSON.stringify(data))\n            .then(async function () {\n                await Notifications.showToastMessageWithDelay($scope.page === 2 ? 'Changed search query' : 'Changed analogical query');\n                $location.url('similarity');\n            }, function (response) {\n                toastr.error(getError(response), 'Could not change query!');\n            });\n    };\n\n    $scope.getCloseBtnMsg = function () {\n        return \"Closes \" + ($scope.editSearchQuery ? \"query edition\": \"index creation\") + \" without saving the changes.\"\n    }\n}\n"],"sourceRoot":""}