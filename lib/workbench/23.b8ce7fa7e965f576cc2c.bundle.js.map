{"version":3,"sources":["webpack:///./src/js/angular/repositories/app.js","webpack:///./src/js/angular/settings/controllers.js","webpack:///./src/js/angular/repositories/ontop-repo.directive.js","webpack:///./src/js/angular/repositories/fedx-repo.directive.js","webpack:///./src/js/angular/settings/app.js"],"names":["angular","module","ActiveLocationSettingsCtrl","$scope","toastr","$modalInstance","LicenseRestService","supportsStatistics","settings","statistics","getSettings","loader","getStatistics","then","response","data","status","msg","getError","error","setSettings","toggleStatistics","close","success","submitForm","cancel","dismiss","LicenseCtrl","$rootScope","checkLicenseHardcoded","res","isLicenseHardcoded","getLicenseInfo","license","message","valid","RegisterLicenseCtrl","$location","$modal","$window","$jwtAuth","$on","isAdmin","path","sendLicenseToValidateAndActivate","textAreaSel","$","licenseCode","sendLicenseToValidate","validatedLicense","licensee","val","open","templateUrl","controller","resolve","result","decodedLicense","atob","replace","registerLicense","history","back","confirmWantedNewLicenseDetails","$watch","currentFile","file","extractFromLicenseFile","getBackToPreviousPage","ValidateLicenseModalCtrl","ok","LoaderSamplesCtrl","setLoader","$inject","ontopRepoDirective","RepositoriesRestService","Upload","restrict","scope","link","selectedDriver","driverType","driverName","jdbc","hostName","port","databaseName","userName","password","driverClass","url","urlTemplate","downloadDriverUrl","ontopRepoFileNames","supportedDriversData","ontopRepoFileLabels","propertiesFile","obdaFile","owlFile","constraintFile","ontopRepoFiles","Object","keys","forEach","key","repositoryInfo","params","value","supportedDriverLabels","propertiesFileParams","classAvailable","genericDriverType","REQUIRED_ONTOP_REPO_PARAMS","REQUIRED_PROPERTIES_FIELD_PARAMS","updateProperties","filter","requiredField","length","Promise","reject","uploadFileLoader","updatePropertiesFile","fileLocation","showErrorMsg","title","loadDriverByClass","foundDriver","find","driver","copyDriverProperties","selectDriverByType","concatURL","portRequired","isReadOnly","labelName","editFile","updateRepositoryFileContent","content","uploadOntopRepoFile","files","param","uploadFile","upload","name","errorMessage","getInputType","checkForRequiredOntopFiles","requiredFile","validateOntopPropertiesConnection","isOntopRepoFileUploaded","isRequiredOntopRepoFile","indexOf","isRequiredField","field","getFieldTooltip","repoTooltips","ontop","editOntopRepo","editRepository","catch","err","createOntopRepo","id","createRepo","goBackToPrevious","goBackToPreviousLocation","getSupportedDriversData","editRepoPage","loadPropertiesFile","driverData","parseInt","directive","fedxRepoDirective","$timeout","LocationsRestService","LOCAL_REPO_STORE","populateKnownRepos","member","fedxMembers","knownRepos","repo","repositoryServer","repositoryName","location","local","getKnownRepos","getRepositories","allLocalRepos","slice","getLocations","locations","l","getRepositoriesFromKnownLocation","el","allAttachedRepos","concat","getRepositoriesFromLocation","uri","setWritableRepo","currentWritable","writable","store","JSON","stringify","getActiveClass","checkIfRepoExist","getRepositoryServer","localReposTimer","setInterval","updateMembers","push","removeEndingSlash","checkEditMode","model","editMode","clearInterval","addMember","repository","addLocalMember","username","supportsASKQueries","repoType","type","respectRights","removeMember","endpoint","repositoryLocation","addRemoteMember","mode","sparqlEndpoint","getMemberIcon","editFedXRepository","resolveName","resolvedName","config","$httpProvider","interceptors","run"],"mappings":"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","file":"23.b8ce7fa7e965f576cc2c.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/core/controllers';\nimport 'angular/repositories/controllers';\nimport 'angular/repositories/ontop-repo.directive';\nimport 'angular/repositories/fedx-repo.directive';\nimport 'angular/core/services/repositories.service';\nimport 'angular/settings/app';\nimport 'ng-file-upload/dist/ng-file-upload.min';\nimport 'ng-file-upload/dist/ng-file-upload-shim.min';\n\nconst modules = [\n    'ui.bootstrap',\n    'toastr',\n    'ngCookies',\n    'ngRoute',\n    'graphdb.framework.repositories.controllers',\n    'graphdb.framework.repositories.ontop-repo.directive',\n    'graphdb.framework.repositories.fedx-repo.directive',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.core.directives',\n    'graphdb.framework.core.controllers',\n    'graphdb.framework.settings'\n];\n\nangular.module('graphdb.framework.repositories', modules);\n","import 'angular/core/services';\nimport 'angular/core/services/jwt-auth.service';\n\nangular\n    .module('graphdb.framework.settings.controllers', [\n        'ngCookies',\n        'ui.bootstrap',\n        'graphdb.framework.core.services.jwtauth',\n        'toastr'\n    ])\n    .controller('ActiveLocationSettingsCtrl', ActiveLocationSettingsCtrl)\n    .controller('ValidateLicenseModalCtrl', ValidateLicenseModalCtrl)\n    .controller('LicenseCtrl', LicenseCtrl)\n    .controller('RegisterLicenseCtrl', RegisterLicenseCtrl)\n    .controller('LoaderSamplesCtrl', LoaderSamplesCtrl);\n\nActiveLocationSettingsCtrl.$inject = ['$scope', 'toastr', '$modalInstance', 'LicenseRestService'];\n\nfunction ActiveLocationSettingsCtrl($scope, toastr, $modalInstance, LicenseRestService) {\n    $scope.supportsStatistics = true;\n    $scope.settings = {statistics: false};\n    $scope.getSettings = getSettings;\n\n    function getSettings() {\n        $scope.loader = true;\n        LicenseRestService.getStatistics().then(function (response) {\n            $scope.settings.statistics = response.data === 'true';\n            $scope.supportsStatistics = true;\n        }, function (response) {\n            if (response.status === 404) {\n                $scope.supportsStatistics = false;\n            } else {\n                const msg = getError(response.data);\n                toastr.error(msg, 'Error getting settings');\n            }\n        });\n    }\n\n    $scope.getSettings();\n\n    $scope.setSettings = function () {\n        $scope.loader = true;\n        LicenseRestService.toggleStatistics($scope.settings.statistics).then(function () {\n            $modalInstance.close();\n            toastr.success('Settings have been saved');\n        }, function (response) {\n            const msg = getError(response.data);\n            toastr.error(msg, 'Error saving settings');\n        });\n    };\n\n    $scope.submitForm = function () {\n        $scope.setSettings();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nLicenseCtrl.$inject = ['$scope', 'LicenseRestService', 'toastr', '$rootScope'];\n\nfunction LicenseCtrl($scope, LicenseRestService, toastr, $rootScope) {\n    $scope.loader = true;\n\n    LicenseRestService.checkLicenseHardcoded()\n        .success(function (res) {\n            $rootScope.isLicenseHardcoded = (res === 'true');\n        })\n        .error(function () {\n            $rootScope.isLicenseHardcoded = false;\n            toastr.error('Error checking license availability');\n        })\n        .then(function () {\n            LicenseRestService.getLicenseInfo()\n                .success(function (res) {\n                    $scope.loader = false;\n                    $scope.license = res;\n                    // check if you have a hardcoded license that is not activated through the workbench and if\n                    // you do disable ability to update license\n                })\n                .error(function () {\n                    // no license but we need to check for 417\n                    $scope.loader = false;\n                    $scope.license = {message: 'No license was set.', valid: false};\n                });\n        });\n}\n\nRegisterLicenseCtrl.$inject = ['$scope', 'LicenseRestService', '$location', '$modal', 'toastr', '$window', '$jwtAuth'];\n\nfunction RegisterLicenseCtrl($scope, LicenseRestService, $location, $modal, toastr, $window, $jwtAuth) {\n    $scope.$on('securityInit', function () {\n        if (!$jwtAuth.isAdmin()) {\n            $location.path('/license');\n        }\n    });\n\n    $scope.sendLicenseToValidateAndActivate = sendLicenseToValidateAndActivate;\n\n    const textAreaSel = $('.license-textarea');\n\n    // watch for uploaded license file\n    $scope.$watch('currentFile', function () {\n        if ($scope.currentFile) {\n            const file = $scope.currentFile;\n            LicenseRestService.extractFromLicenseFile(file)\n                .success(function (licenseCode) {\n                    sendLicenseToValidateAndActivate(licenseCode);\n                }).error(function () {\n                    toastr.error('Could not upload file');\n                });\n        }\n    });\n\n    $scope.getBackToPreviousPage = function () {\n        $window.history.back();\n    };\n\n    // send license code for validation and activation\n    function sendLicenseToValidateAndActivate(licenseCode) {\n        LicenseRestService.sendLicenseToValidate(licenseCode)\n            .success(function (validatedLicense) {\n                if (validatedLicense.licensee !== 'Invalid') {\n                    // write code to textarea\n                    textAreaSel.val(licenseCode);\n                    // pop dialog for license details confirmation\n                    confirmWantedNewLicenseDetails(validatedLicense, licenseCode);\n                } else {\n                    // clear textarea on invalid license\n                    textAreaSel.val('');\n                    // show error\n                    toastr.error(validatedLicense.message);\n                }\n            })\n            .error(function () {\n                toastr.error('Invalid license');\n            });\n    }\n\n\n    // pops a modal dialog which asks you if your expected license details are correct\n    // and sends license to GraphDB upon confirmation\n    function confirmWantedNewLicenseDetails(license, licenseCode) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/settings/modal/validate-license.html',\n            controller: 'ValidateLicenseModalCtrl',\n            resolve: {\n                license: function () {\n                    return license;\n                }\n            }\n        });\n\n        modalInstance.result.then(function () {\n            registerLicense(licenseCode);\n        });\n    }\n\n    // send license code to GraphDB for activation\n    function registerLicense(licenseCode) {\n        if (!licenseCode) {\n            licenseCode = textAreaSel.val();\n        }\n\n        if (licenseCode) {\n            // replacing whitespace makes this work on Safari too,\n            // whereas other browser happily ignore the whitespace\n            const decodedLicense = atob(licenseCode.replace(/\\s/g, ''));\n            LicenseRestService.registerLicense(decodedLicense)\n                .success(function () {\n                    $window.history.back();\n                }).error(function () {\n                    toastr.error('Error registering GraphDB license');\n                });\n        } else {\n            toastr.error('No license code available in textarea');\n        }\n    }\n}\n\nValidateLicenseModalCtrl.$inject = ['$scope', '$modalInstance', 'license'];\n\nfunction ValidateLicenseModalCtrl($scope, $modalInstance, license) {\n    $scope.ok = ok;\n    $scope.cancel = cancel;\n    $scope.license = license;\n\n    function ok() {\n        $modalInstance.close();\n    }\n\n    function cancel() {\n        $modalInstance.dismiss('cancel');\n    }\n}\n\nLoaderSamplesCtrl.$inject = ['$scope'];\n\nfunction LoaderSamplesCtrl($scope) {\n    $scope.loader = true;\n    $scope.setLoader = function (loader) {\n        $scope.loader = loader;\n    };\n}\n","import {getFileName} from \"./controllers\";\n\nangular\n    .module('graphdb.framework.repositories.ontop-repo.directive', [])\n    .directive('ontopRepo', ontopRepoDirective);\n\nontopRepoDirective.$inject = ['$modal', 'RepositoriesRestService', 'toastr', 'Upload'];\n\nfunction ontopRepoDirective($modal, RepositoriesRestService, toastr, Upload) {\n    return {\n        restrict: 'E',\n        scope: false,\n        templateUrl: 'js/angular/repositories/templates/ontop-repo.html',\n\n        link: linkFunc\n    };\n\n    function linkFunc($scope) {\n\n        $scope.selectedDriver = {\n            driverType: \"generic\",\n            driverName: \"Generic JDBC Driver\",\n            jdbc: {\n                hostName: \"\",\n                port: \"\",\n                databaseName: \"\",\n                userName: \"\",\n                password: \"\",\n                driverClass: \"\",\n                url: \"\"\n            },\n            urlTemplate: \"\",\n            downloadDriverUrl: \"\"\n        };\n        $scope.ontopRepoFileNames = {};\n        $scope.supportedDriversData = [];\n        $scope.ontopRepoFileLabels =\n            {propertiesFile: 'JDBC properties', obdaFile: 'OBDA or R2RML', owlFile: 'ontology file', constraintFile: 'constraint file'};\n        $scope.ontopRepoFiles = Object.keys($scope.ontopRepoFileLabels);\n        $scope.ontopRepoFiles.forEach(function(key) {\n            if ($scope.repositoryInfo.params[key]) {\n                $scope.ontopRepoFileNames[key] = getFileName($scope.repositoryInfo.params[key].value);\n            }\n        });\n        $scope.supportedDriverLabels = {hostName: 'Hostname', port: \"Port\", databaseName: 'Database name',\n                                        userName: 'Username', password: 'Password', driverClass: 'Driver class', url: 'URL'};\n        $scope.propertiesFileParams = Object.keys($scope.supportedDriverLabels);\n        $scope.classAvailable = false;\n        $scope.genericDriverType = 'generic';\n        $scope.propertiesFile = 'propertiesFile';\n\n        const REQUIRED_ONTOP_REPO_PARAMS = [$scope.propertiesFile, 'obdaFile'];\n        const REQUIRED_PROPERTIES_FIELD_PARAMS = ['hostName', 'databaseName', 'userName'];\n\n        function getSupportedDriversData() {\n            return RepositoriesRestService.getSupportedDriversData()\n                .success(function (response) {\n                    $scope.supportedDriversData = response;\n                }).error(function (response) {\n                    showErrorMsg('Error', response);\n                });\n        }\n\n        $scope.loadDriverByClass = function (driverClass) {\n            const foundDriver = $scope.supportedDriversData\n                .find((driver) => driver.driverClass === driverClass);\n            if (foundDriver) {\n                $scope.copyDriverProperties(foundDriver);\n            }\n            return foundDriver;\n        };\n\n        $scope.selectDriverByType = function (driverType) {\n            $scope.copyDriverProperties($scope.supportedDriversData\n                .find((driver) => driver.driverType === driverType));\n            // Call concatURL with proper labelName to apply changes to url field\n            $scope.concatURL('hostName', $scope);\n        };\n\n        $scope.copyDriverProperties = function (driver) {\n            $scope.selectedDriver.driverType = driver.driverType;\n            $scope.selectedDriver.jdbc.driverClass = driver.driverClass;\n            $scope.selectedDriver.jdbc.url = driver.urlTemplate;\n            $scope.selectedDriver.urlTemplate = driver.urlTemplate;\n            $scope.selectedDriver.downloadDriverUrl = driver.downloadDriverUrl;\n            $scope.selectedDriver.portRequired = driver.portRequired;\n            $scope.classAvailable = driver.classAvailable;\n        };\n\n        $scope.isReadOnly = function (labelName) {\n            return labelName === 'driverClass' || labelName === 'url';\n        }\n\n        $scope.editFile = function(file) {\n            const modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/editRepoFile.html',\n                controller: 'EditRepositoryFileCtrl',\n                resolve: {\n                    file: function () {\n                        return $scope.repositoryInfo.params[file] ? $scope.repositoryInfo.params[file].value : '';\n                    }\n                }\n            });\n\n            modalInstance.result.then(function (data) {\n                // send data to backend\n                RepositoriesRestService.updateRepositoryFileContent(data.fileLocation, data.content).success(function(result) {\n                    $scope.ontopRepoFileNames[file] = getFileName(result.fileLocation);\n                    $scope.repositoryInfo.params[file].value = result.fileLocation;\n                }).error(function (error) {\n                    showErrorMsg('Error', error);\n                })\n            });\n        }\n\n        $scope.uploadOntopRepoFile = function(files, param) {\n            if (files && files.length) {\n                $scope.uploadFile = files[0];\n                $scope.uploadFileLoader = true;\n                Upload.upload({\n                    url: 'rest/repositories/uploadFile',\n                    data: {uploadFile: $scope.uploadFile}\n                })\n                    .success(function (data) {\n                        if (!data.success) {\n                            toastr.error(data.errorMessage);\n                        } else {\n                            $scope.ontopRepoFileNames[param] = $scope.uploadFile.name;\n                            $scope.repositoryInfo.params[param].value = data.fileLocation;\n                        }\n                        $scope.uploadFileLoader = false;\n                    }).error(function (data) {\n                    showErrorMsg('Error', data);\n                    $scope.uploadFile = '';\n                    $scope.uploadFileLoader = false;\n                });\n            }\n        }\n\n        $scope.concatURL = function(labelName) {\n            if (labelName === 'hostName' || labelName === 'port' || labelName === 'databaseName') {\n                let result = $scope.selectedDriver.urlTemplate;\n                if ($scope.selectedDriver.jdbc.hostName) {\n                    if ($scope.selectedDriver.jdbc.port) {\n                        result = result.replace('{hostport}',\n                            `${$scope.selectedDriver.jdbc.hostName}:${$scope.selectedDriver.jdbc.port}`);\n                    } else {\n                        result = result.replace('{hostport}', $scope.selectedDriver.jdbc.hostName);\n                    }\n                }\n\n                if ($scope.selectedDriver.jdbc.databaseName) {\n                    result = result.replace('{database}', $scope.selectedDriver.jdbc.databaseName);\n                }\n\n                $scope.selectedDriver.jdbc.url = result;\n            }\n        }\n\n        $scope.getInputType = function (labelName) {\n            switch (labelName) {\n                case 'password':\n                    return 'password';\n                case 'port':\n                    return 'number';\n                default:\n                    return 'text';\n            }\n        }\n\n        $scope.checkForRequiredOntopFiles = function () {\n            // Should guarantee that code will be executed in sequential manner,\n            // because properties file is not created yet\n            return updateProperties()\n                .then(function () {\n                    const missingRequired = REQUIRED_ONTOP_REPO_PARAMS.filter(function (requiredFile) {\n                        return !$scope.repositoryInfo.params[requiredFile].value;\n                    });\n                    if (missingRequired.length > 0) {\n                        toastr.error('Missing required ontop repo file');\n                        return Promise.reject('Missing required ontop repo file');\n                    }\n                    return Promise.resolve();\n                });\n        }\n\n        function loadPropertiesFile() {\n            RepositoriesRestService.loadPropertiesFile($scope.repositoryInfo.params[$scope.propertiesFile].value)\n                .success(function (driverData) {\n                    const driver = $scope.loadDriverByClass(driverData.driverClass);\n                    // If driver class is not found means that the selected driver is a GENERIC ONE\n                    if (driver) {\n                        $scope.selectedDriver.jdbc.hostName = driverData.hostName;\n                        $scope.selectedDriver.jdbc.port = parseInt(driverData.port);\n                        $scope.selectedDriver.jdbc.databaseName = driverData.databaseName;\n                        $scope.selectedDriver.jdbc.userName = driverData.userName;\n                        $scope.selectedDriver.jdbc.password = driverData.password;\n                        $scope.selectedDriver.jdbc.url = driverData.url;\n                    }\n                }).error(function (data) {\n                showErrorMsg('Error', data);\n                $scope.uploadFileLoader = false;\n            });\n        }\n\n        $scope.validateOntopPropertiesConnection = function () {\n            updateProperties()\n                .then(function () {\n                    RepositoriesRestService.validateOntopPropertiesConnection($scope.repositoryInfo.params.propertiesFile)\n                        .success(function () {\n                            toastr.success('Connection is successful');\n                        }).error(function (data) {\n                        showErrorMsg('Failed to connect', data);\n                    });\n                });\n        }\n\n        $scope.isOntopRepoFileUploaded = function() {\n            return $scope.repositoryInfo.params.propertiesFile &&\n                $scope.repositoryInfo.params.propertiesFile.value.length > 0\n        };\n\n        function missingRequiredField() {\n            const missing = REQUIRED_PROPERTIES_FIELD_PARAMS\n                .filter(function (requiredField) {\n                    return !$scope.selectedDriver.jdbc[requiredField]\n                });\n            if (missing.length > 0) {\n                toastr.error('Missing required field');\n                return true;\n            }\n            return false;\n        }\n\n        function updateProperties() {\n            if ($scope.selectedDriver.driverType !== $scope.genericDriverType) {\n                if (missingRequiredField()) {\n                    return Promise.reject('Missing required field');\n                }\n                return updatePropertiesFile();\n            }\n            return Promise.resolve();\n        }\n\n        function updatePropertiesFile() {\n            $scope.uploadFileLoader = true;\n            return RepositoriesRestService\n                .updatePropertiesFile($scope.repositoryInfo.params[$scope.propertiesFile].value, $scope.selectedDriver.jdbc)\n                .success(function (data) {\n                    $scope.ontopRepoFileNames[$scope.propertiesFile] = getFileName(data.fileLocation);\n                    $scope.repositoryInfo.params[$scope.propertiesFile].value = data.fileLocation;\n                    $scope.uploadFileLoader = false;\n                }).error(function (data) {\n                    showErrorMsg('Error', data);\n                    $scope.uploadFileLoader = false;\n                });\n        }\n\n        $scope.isRequiredOntopRepoFile = function(file) {\n            return REQUIRED_ONTOP_REPO_PARAMS.indexOf(file) > -1;\n        };\n\n        $scope.isRequiredField = function (field) {\n            return REQUIRED_PROPERTIES_FIELD_PARAMS.indexOf(field) > -1\n                || field === 'port' && $scope.selectedDriver.portRequired;\n        };\n\n        $scope.getFieldTooltip = function (field) {\n            if (field === 'port' && $scope.selectedDriver.portRequired) {\n                field = 'portIfRequired';\n            }\n            return $scope.repoTooltips.ontop[field];\n        };\n\n        $scope.editOntopRepo = function () {\n            $scope.checkForRequiredOntopFiles()\n                .then(function () {\n                    $scope.editRepository();\n                }).catch(function (err) {\n                // The catch block is empty, because error is handled in promise\n            });\n        }\n\n        $scope.createOntopRepo = function () {\n            if (!$scope.repositoryInfo.id) {\n                toastr.error('Repository ID cannot be empty');\n                return;\n            }\n\n            $scope.checkForRequiredOntopFiles()\n                .then(function () {\n                    $scope.createRepo();\n                }).catch(function (err) {\n                // The catch block is empty, because error is handled in promise\n            });\n        };\n\n        $scope.goBackToPrevious = function () {\n            $scope.goBackToPreviousLocation();\n        }\n\n        function showErrorMsg (title, data) {\n            const msg = getError(data);\n            toastr.error(msg, title);\n        }\n\n        getSupportedDriversData()\n            .then(function () {\n                if ($scope.editRepoPage) {\n                    loadPropertiesFile();\n                }\n            });\n    }\n}\n","angular\n    .module('graphdb.framework.repositories.fedx-repo.directive', [])\n    .directive('fedxRepo', fedxRepoDirective);\n\nfedxRepoDirective.$inject = ['$modal', 'RepositoriesRestService', 'toastr', '$timeout', 'LocationsRestService'];\n\nfunction fedxRepoDirective($modal, RepositoriesRestService, toastr, $timeout, LocationsRestService) {\n    return {\n        restrict: 'E',\n        scope: false,\n        templateUrl: 'js/angular/repositories/templates/fedx-repo.html',\n\n        link: linkFunc\n    };\n\n    function linkFunc($scope) {\n\n        const LOCAL_REPO_STORE = 'ResolvableRepository';\n        const REMOTE_REPO_STORE = 'RemoteRepository';\n        const SPARQL_ENDPOINT_STORE = 'SPARQLEndpoint';\n        const NATIVE_STORE = 'NativeStore';\n\n        $scope.fedxMembers = [];\n        $scope.knownRepos = [];\n        $scope.allLocalRepos = [];\n        $scope.allAttachedRepos = [];\n        $scope.locations = [];\n\n        function getRepositories() {\n            return RepositoriesRestService.getRepositories()\n                .success(function (response) {\n                    $scope.allLocalRepos = response.slice();\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, 'Error');\n                });\n        }\n\n        function getRepositoriesFromLocation(location) {\n            return RepositoriesRestService.getRepositoriesFromKnownLocation(location)\n                .success(function (response) {\n                    $scope.knownRepos = $scope.allLocalRepos.filter(el => $scope.knownRepos.indexOf(el) !== -1);\n                    for (const member of response) {\n                        $scope.allAttachedRepos = $scope.allAttachedRepos.filter(repo => repo.id !== member.id || repo.location !== member.location);\n                    }\n                    $scope.allAttachedRepos = $scope.allAttachedRepos.concat(response.slice());\n                    $scope.knownRepos = $scope.knownRepos.concat($scope.allAttachedRepos);\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, 'Error');\n                });\n        }\n\n        function populateKnownRepos() {\n            for (const member of $scope.fedxMembers) {\n                $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                    if (member.repositoryServer) {\n                        // if the member is a remote attached member\n                        return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                    } else {\n                        // if the member is a local one\n                        return repo.id !== member.repositoryName || !repo.local;\n                    }\n                });\n            }\n        }\n\n        $scope.setWritableRepo = function (member) {\n            let currentWritable = getWritableRepo();\n            if (currentWritable) {\n                if (currentWritable.store === LOCAL_REPO_STORE && (member.store !== LOCAL_REPO_STORE || currentWritable.repositoryName !== member.repositoryName) ) {\n                    currentWritable.writable = 'false';\n                } else if (currentWritable.store === REMOTE_REPO_STORE && (member.store !== REMOTE_REPO_STORE || currentWritable.repositoryName !== member.repositoryName || currentWritable.repositoryServer !== member.repositoryServer)) {\n                    currentWritable.writable = 'false';\n                }\n            }\n            member.writable = JSON.stringify(member.writable === 'false');\n        }\n\n        $scope.getActiveClass = function (member) {\n            return member.writable === 'true' ? ' active' : '';\n        }\n\n        function getWritableRepo() {\n            return $scope.fedxMembers.find(member => member.writable === \"true\");\n        }\n\n        function getKnownRepos() {\n            return getRepositories()\n                .then(function () {\n                    getAttachedRepositories();\n                });\n        }\n\n        function getLocations() {\n            return LocationsRestService.getLocations()\n                .success(function(response) {\n                    $scope.locations = response.slice();\n                }).error(function (response) {\n                    const msg = getError(response);\n                    toastr.error(msg, 'Error');\n                });\n        }\n\n        function getAttachedRepositories() {\n            return getLocations()\n                .then(function() {\n                    $scope.locations.forEach(l => getRepositoriesFromLocation(l.uri)\n                        .then(function () {\n                            if ($scope.editRepoPage) {\n                                $scope.fedxMembers = $scope.repositoryInfo.params.member.value.slice();\n                            }\n                            populateKnownRepos();\n                        }))\n                });\n        }\n\n        $scope.checkIfRepoExist = function (member) {\n            if (member.store === LOCAL_REPO_STORE) {\n                return $scope.allLocalRepos.find(repo => repo.id === member.repositoryName);\n            } else if (member.store === REMOTE_REPO_STORE && checkIfLocationIsAttached(member)) {\n                return $scope.allAttachedRepos.find(repo => repo.id === member.repositoryName && repo.location === member.repositoryServer);\n            } else {\n                return true;\n            }\n        }\n\n        function checkIfLocationIsAttached(repo) {\n            return $scope.locations.find(el => el.uri === repo.repositoryServer);\n        }\n\n        $scope.getRepositoryServer = function (repo) {\n            if (repo.local) {\n                return \"Local\";\n            } else {\n                return repo.location;\n            }\n        }\n\n        const localReposTimer = setInterval(function () {\n            getKnownRepos();\n        }, 5000);\n\n        $scope.$on('$destroy', function () {\n            clearInterval(localReposTimer);\n        });\n\n        $scope.addMember = function(repository) {\n            if ($scope.getRepositoryServer(repository) === \"Local\") {\n                $scope.addLocalMember(repository);\n            } else {\n                let member = {\n                    store: REMOTE_REPO_STORE,\n                    repositoryName: repository.id,\n                    repositoryServer: repository.location,\n                    username: '',\n                    password: '',\n                    supportsASKQueries: \"true\",\n                    writable: \"false\"\n                }\n                $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                    if (member.repositoryServer) {\n                        return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                    } else {\n                        return repo.id !== member.repositoryName || !repo.local;\n                    }\n                });\n                updateMembers(member);\n            }\n        }\n\n        $scope.addLocalMember = function (repository) {\n            let member = {\n                store: LOCAL_REPO_STORE,\n                repositoryName: repository.id,\n                repoType: repository.type,\n                respectRights: \"true\",\n                writable: \"false\"\n            };\n\n            $scope.knownRepos = $scope.knownRepos.filter(function (repo) {\n                if (member.repositoryServer) {\n                    return repo.id !== member.repositoryName || repo.location !== member.repositoryServer;\n                } else {\n                    return repo.id !== member.repositoryName || !repo.local;\n                }\n            });            updateMembers(member);\n        }\n\n        $scope.removeMember = function (member) {\n            if (member.store && member.store === LOCAL_REPO_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName || el.store !== member.store);\n                $scope.allLocalRepos = [];\n                getKnownRepos();\n            } else if (member.store && member.store === SPARQL_ENDPOINT_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.endpoint !== member.endpoint);\n            } else if (member.store && member.store === NATIVE_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryLocation !== member.repositoryLocation);\n            } else if (member.store && member.store === REMOTE_REPO_STORE) {\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName\n                    || el.repositoryServer !== member.repositoryServer || el.store !== member.store);\n                $scope.allAttachedRepos = []\n                getKnownRepos();\n            }\n            $scope.repositoryInfo.params['member'].value = $scope.fedxMembers;\n        }\n\n        $scope.addRemoteMember = function () {\n            $scope.mode = 'remote';\n            $scope.model = {\n                editMode: false,\n                store: REMOTE_REPO_STORE,\n                repositoryName: '',\n                repositoryServer: '',\n                sparqlEndpoint: '',\n                username: '',\n                password: '',\n                supportsASKQueries: \"true\",\n                writable: \"false\"\n            }\n\n            $scope.$modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/add-fedx-remote-repo.html',\n                scope: $scope,\n            });\n        };\n\n        $scope.getMemberIcon = function (member) {\n            if (member.repoType) {\n                return 'icon-repo-' + member.repoType;\n            } else if (member.store === NATIVE_STORE) {\n                return 'icon-warning';\n            } else {\n                return 'icon-link';\n            }\n        }\n\n        $scope.editFedXRepository = function (member) {\n            if (member.store === LOCAL_REPO_STORE) {\n                $scope.mode = 'local';\n                $scope.model = {\n                    editMode: true,\n                    store: member.store,\n                    respectRights: member.respectRights,\n                    repositoryName: member.repositoryName,\n                    repoType: member.repoType,\n                    writable: member.writable\n                }\n            } else {\n                $scope.mode = 'remote';\n                $scope.model = {\n                    editMode: true,\n                    store: member.store,\n                    repositoryName: member.repositoryName,\n                    repositoryServer: member.repositoryServer,\n                    sparqlEndpoint: member.store === SPARQL_ENDPOINT_STORE ? member.endpoint : member.repositoryLocation,\n                    username: member.username,\n                    password: member.password,\n                    supportsASKQueries: member.supportsASKQueries,\n                    writable: member.writable\n                }\n            }\n\n            $scope.$modalInstance = $modal.open({\n                templateUrl: 'js/angular/templates/modal/add-fedx-remote-repo.html',\n                scope: $scope\n            });\n        };\n\n        $scope.resolveName = function (member) {\n            switch (member.store) {\n                case LOCAL_REPO_STORE : {\n                    return member.repositoryName;\n                }\n                case REMOTE_REPO_STORE : {\n                    return member.repositoryName + '@' + member.repositoryServer;\n                }\n                case SPARQL_ENDPOINT_STORE : {\n                    return member.endpoint;\n                }\n                case NATIVE_STORE : {\n                    return member.repositoryLocation;\n                }\n                default :\n                    return \"\";\n            }\n        }\n\n        $scope.cancel = function () {\n            $scope.$modalInstance.dismiss('cancel');\n        };\n\n        function updateMembers(member) {\n            $scope.fedxMembers.push(member);\n            $scope.repositoryInfo.params['member'].value = $scope.fedxMembers;\n        }\n\n        function removeEndingSlash(url) {\n            return url.slice(-1) === '/' ? url.slice(0, -1) : url\n        }\n\n        function checkEditMode() {\n            return $scope.editRepoPage && !$scope.editRepoPage || !$scope.model.editMode;\n        }\n\n        $scope.ok = function () {\n            let member;\n            if ($scope.model.repositoryName && $scope.model.store === LOCAL_REPO_STORE) {\n                member = {\n                    store: LOCAL_REPO_STORE,\n                    repositoryName: $scope.model.repositoryName,\n                    repoType: $scope.model.repoType,\n                    respectRights: $scope.model.respectRights,\n                    writable: $scope.model.writable\n                }\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName || el.store !== member.store );\n            } else if ($scope.model.repositoryName && $scope.model.store === REMOTE_REPO_STORE) {\n                member = {\n                    store: REMOTE_REPO_STORE,\n                    repositoryName: $scope.model.repositoryName,\n                    repositoryServer: removeEndingSlash($scope.model.repositoryServer),\n                    username: $scope.model.username,\n                    password: $scope.model.password,\n                    writable: $scope.model.writable\n                };\n                if (checkEditMode() && $scope.fedxMembers.find(el => el.repositoryName === member.repositoryName\n                    && el.repositoryServer === member.repositoryServer)) {\n                    let resolvedName = $scope.resolveName(member);\n                    toastr.error(`Repository ${resolvedName} already added as a FedX member`);\n                    $scope.$modalInstance.close();\n                    return;\n                }\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.repositoryName !== member.repositoryName\n                    || el.repositoryServer !== member.repositoryServer);\n            } else {\n                member = {\n                    store: SPARQL_ENDPOINT_STORE,\n                    endpoint: removeEndingSlash($scope.model.sparqlEndpoint),\n                    username: $scope.model.username,\n                    password: $scope.model.password,\n                    supportsASKQueries: $scope.model.supportsASKQueries,\n                    writable: $scope.model.writable\n                };\n\n                if (checkEditMode() && $scope.fedxMembers.find(el => el.endpoint === member.endpoint)) {\n                    let resolvedName = $scope.resolveName(member);\n                    toastr.error(`SPARQL endpoint ${resolvedName} already added as a FedX member`);\n                    $scope.$modalInstance.close();\n                    return;\n                }\n\n                $scope.fedxMembers = $scope.fedxMembers.filter(el => el.endpoint !== member.endpoint);\n            }\n\n            updateMembers(member);\n            populateKnownRepos();\n            $scope.$modalInstance.close();\n        };\n\n        getKnownRepos();\n    }\n}\n","import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/rest/license.rest.service';\nimport 'angular/settings/controllers';\nimport 'angular/core/interceptors/unauthorized.interceptor';\nimport 'angular/core/services/jwt-auth.service';\nimport 'ng-file-upload/dist/ng-file-upload.min';\nimport 'ng-file-upload/dist/ng-file-upload-shim.min';\n\nangular.module('graphdb.framework.settings', [\n    'toastr',\n    'ui.bootstrap',\n    'graphdb.framework.rest.license.service',\n    'graphdb.framework.settings.controllers',\n    'graphdb.framework.core.interceptors.unauthorized',\n    'graphdb.framework.core.services.jwtauth'\n])\n    .config(config)\n    .run(run);\n\nconfig.$inject = ['$httpProvider', '$routeProvider'];\n\nfunction config($httpProvider) {\n    $httpProvider.interceptors.push('$unauthorizedInterceptor');\n}\n\nrun.$inject = ['$rootScope', '$location'];\n\nfunction run($rootScope, $location) {\n    $rootScope.$on('$locationChangeStart', function () {\n        if ($rootScope.isLicenseHardcoded && $location.url() === '/license/register') {\n            $location.path('license');\n        }\n    });\n}\n"],"sourceRoot":""}