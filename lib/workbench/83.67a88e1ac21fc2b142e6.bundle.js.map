{"version":3,"sources":["webpack:///./src/js/angular/rest/cluster.rest.service.js"],"names":["angular","module","factory","ClusterRestService","$inject","CLUSTER_MASTERS_ENDPOINT","$http","getMaster","masterRepositoryID","data","get","configureMaster","master","location","url","encodeURIComponent","method","cloneRepository","post","cloningNodeLocation","currentNodeLocation","cloningNodeRepositoryID","selectedNodeName","newNodeRepositoryID","repositoryID","newNodeLocation","locationUri","newNodeTitle","repositoryTitle","connectWorker","masterLocation","workerLocation","workerURL","disconnectWorker","params","dataType","disconnectNodes","connectNodes"],"mappings":"2EAAAA,QACKC,OAAO,yCAA0C,IACjDC,QAAQ,qBAAsBC,GAEnCA,EAAmBC,QAAU,CAAC,SAE9B,MAAMC,EAA2B,uBAEjC,SAASF,EAAmBG,GACxB,MAAO,CACHC,UASJ,SAAmBC,EAAoBC,EAAO,IAC1C,OAAOH,EAAMI,IAAI,GAAGL,KAA4BG,IAAsBC,IATtEE,gBAYJ,SAAyBC,EAAQC,EAAUJ,GACvC,OAAOH,EAAM,CACTQ,IAAK,GAAGT,KAA4BO,oBAAyBG,mBAAmBF,KAChFG,OAAQ,OACRP,UAfJQ,gBAmBJ,SAAyBR,GACrB,OAAOH,EAAMY,KAAK,2BAA4B,CAC1CC,oBAAqBV,EAAKW,oBAC1BC,wBAAyBZ,EAAKa,iBAC9BC,oBAAqBd,EAAKe,aAC1BC,gBAAiBhB,EAAKiB,YACtBC,aAAclB,EAAKmB,mBAxBvBC,cA4BJ,SAAuBjB,EAAQkB,EAAgBC,GAC3C,OAAOzB,EAAM,CACTQ,IAAK,GAAGT,KAA4BO,aACpCI,OAAQ,OACRP,KAAM,CACFuB,UAAWD,EACXD,eAAgBA,MAjCxBG,iBAsCJ,SAA0BrB,EAAQsB,GAC9B,OAAO5B,EAAM,CACTQ,IAAK,GAAGT,KAA4BO,aAAkBsB,IACtDlB,OAAQ,SACRmB,SAAU,UAzCdC,gBA6CJ,SAAyBxB,EAAQsB,GAC7B,OAAO5B,EAAM,CACTQ,IAAK,GAAGT,KAA4BO,WAAgBsB,IACpDlB,OAAQ,SACRmB,SAAU,UAhDdE,aAoDJ,SAAsBzB,EAAQH,GAC1B,OAAOH,EAAM,CACTQ,IAAK,GAAGT,KAA4BO,UACpCI,OAAQ,OACRP","file":"83.67a88e1ac21fc2b142e6.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.cluster.service', [])\n    .factory('ClusterRestService', ClusterRestService);\n\nClusterRestService.$inject = ['$http'];\n\nconst CLUSTER_MASTERS_ENDPOINT = 'rest/cluster/masters';\n\nfunction ClusterRestService($http) {\n    return {\n        getMaster,\n        configureMaster,\n        cloneRepository,\n        connectWorker,\n        disconnectWorker,\n        disconnectNodes,\n        connectNodes\n    };\n\n    function getMaster(masterRepositoryID, data = {}) {\n        return $http.get(`${CLUSTER_MASTERS_ENDPOINT}/${masterRepositoryID}`, data);\n    }\n\n    function configureMaster(master, location, data) {\n        return $http({\n            url: `${CLUSTER_MASTERS_ENDPOINT}/${master}?masterLocation=${encodeURIComponent(location)}`,\n            method: 'POST',\n            data\n        });\n    }\n\n    function cloneRepository(data) {\n        return $http.post('rest/cluster/nodes/clone', {\n            cloningNodeLocation: data.currentNodeLocation,\n            cloningNodeRepositoryID: data.selectedNodeName,\n            newNodeRepositoryID: data.repositoryID,\n            newNodeLocation: data.locationUri,\n            newNodeTitle: data.repositoryTitle\n        })\n    }\n\n    function connectWorker(master, masterLocation, workerLocation) {\n        return $http({\n            url: `${CLUSTER_MASTERS_ENDPOINT}/${master}/workers/`,\n            method: 'POST',\n            data: {\n                workerURL: workerLocation,\n                masterLocation: masterLocation\n            }\n        })\n    }\n\n    function disconnectWorker(master, params) {\n        return $http({\n            url: `${CLUSTER_MASTERS_ENDPOINT}/${master}/workers?${params}`,\n            method: 'DELETE',\n            dataType: 'text'\n        });\n    }\n\n    function disconnectNodes(master, params) {\n        return $http({\n            url: `${CLUSTER_MASTERS_ENDPOINT}/${master}/peers?${params}`,\n            method: 'DELETE',\n            dataType: 'text'\n        });\n    }\n\n    function connectNodes(master, data) {\n        return $http({\n            url: `${CLUSTER_MASTERS_ENDPOINT}/${master}/peers`,\n            method: 'POST',\n            data\n        });\n    }\n}\n"],"sourceRoot":""}