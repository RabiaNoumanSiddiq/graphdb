{"version":3,"sources":["webpack:///./src/js/angular/security/controllers.js"],"names":["securityCtrl","angular","module","parseAuthorities","authorities","userType","USER","grantedAuthorities","repositories","i","length","role","ROLE_ADMIN","ADMIN","ROLE_REPO_MANAGER","REPO_MANAGER","ROLE_USER","indexOf","index","op","substr","repo","read","write","userTypeDescription","getUserRoleName","controller","$scope","$http","toastr","$jwtAuth","$openIDAuth","$location","$rootScope","username","password","loginWithOpenID","loginOpenID","search","noaccess","error","expired","isGDBLoginEnabled","passwordLoginEnabled","isOpenIDEnabled","openIDEnabled","login","method","url","encodeURIComponent","headers","success","data","status","authenticate","then","returnToUrl","path","wrongCredentials","msg","getError","$modal","$window","$timeout","ModalService","SecurityRestService","loader","securityEnabled","isSecurityEnabled","hasExternalAuth","getAuthImplementation","freeAccessEnabled","isFreeAccessEnabled","getUsers","users","pa","$on","toggleSecurity","timer","location","reload","cancel","toggleFreeAccess","updateFreeAccess","getFreeAccess","res","appSettings","open","templateUrl","resolve","defaultAuthorities","repoIds","_","mapKeys","getRepositories","r","id","each","a","hasOwnProperty","result","editFreeAccess","removeUser","openSimpleModal","title","message","warning","deleteUser","name","$modalInstance","hasActiveLocation","isEmpty","globalLocation","globalRepositories","ok","auth","repositoryCheckError","WRITE_REPO","push","READ_REPO","close","dismiss","isAdmin","hasRole","hasEditRestrictions","user","isOverrideAuth","isDefaultAuthEnabled","setGrantedAuthorities","pushAuthority","arguments","authority","hasReadPermission","repositoryId","hasWritePermission","readCheckDisabled","writeCheckDisabled","validatePassword","noPassword","passwordError","confirmPasswordError","confirmpassword","isLocalAuthentication","updateUser","validateForm","updateUserHttp","setNoPassword","$controller","extend","this","mode","saveButtonText","goBack","history","back","pageTitle","passwordPlaceholder","submit","createUser","createUserHttp","pass","usernameError","$routeParams","params","userId","defaultUserSettings","getUserData","getUser","userData","external","undefined","getPrincipal","debugMapping","mapping","split","getRolesMapping","getRoles","roleMappings","roles","keys","mappings","permissionsCount","map","filter","reverse","orderBy","p","currentUserData","updateCurrentUserData","assign","redirectAdmin","redirectToLogin","initUserData","scope","copy","currentScope","updateUserData"],"mappings":"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","file":"12.825d3fc787254f6fa055.bundle.js","sourcesContent":["import 'angular/core/services';\nimport 'angular/core/services/jwt-auth.service';\nimport 'angular/core/services/openid-auth.service';\nimport 'angular/rest/security.rest.service';\nimport {UserUtils, UserRole, UserType} from 'angular/utils/user-utils';\n\nconst SYSTEM_REPO = 'SYSTEM';\nconst READ_REPO = 'READ_REPO';\nconst READ_REPO_PREFIX = 'READ_REPO_';\nconst WRITE_REPO = 'WRITE_REPO';\nconst WRITE_REPO_PREFIX = 'WRITE_REPO_';\n\nconst modules = [\n    'ngCookies',\n    'ui.bootstrap',\n    'graphdb.framework.core.services.jwtauth',\n    'graphdb.framework.core.services.openIDService',\n    'graphdb.framework.rest.security.service',\n    'toastr'\n];\n\nconst securityCtrl = angular.module('graphdb.framework.security.controllers', modules);\n\nconst setGrantedAuthorities = function ($scope) {\n    function pushAuthority() {\n        for (let i = 0; i < arguments.length; i++) {\n            const authority = arguments[i];\n            if (_.indexOf($scope.user.grantedAuthorities, authority) < 0) {\n                $scope.user.grantedAuthorities.push(authority);\n            }\n        }\n    }\n\n    $scope.user.grantedAuthorities = [];\n\n    $scope.repositoryCheckError = true;\n    if ($scope.userType === UserType.ADMIN) {\n        $scope.repositoryCheckError = false;\n        pushAuthority(UserRole.ROLE_ADMIN);\n    } else if ($scope.userType === UserType.REPO_MANAGER) {\n        $scope.repositoryCheckError = false;\n        pushAuthority(UserRole.ROLE_REPO_MANAGER);\n    } else {\n        pushAuthority(UserRole.ROLE_USER);\n        for (const index in $scope.grantedAuthorities.WRITE_REPO) {\n            if ($scope.grantedAuthorities.WRITE_REPO[index]) {\n                $scope.repositoryCheckError = false;\n                pushAuthority(WRITE_REPO_PREFIX + index, READ_REPO_PREFIX + index);\n            }\n        }\n        for (const index in $scope.grantedAuthorities.READ_REPO) {\n            if ($scope.grantedAuthorities.READ_REPO[index]) {\n                $scope.repositoryCheckError = false;\n                pushAuthority(READ_REPO_PREFIX + index);\n            }\n        }\n    }\n};\n\nconst parseAuthorities = function (authorities) {\n    let userType = UserType.USER;\n    const grantedAuthorities = {\n        [READ_REPO]: {},\n        [WRITE_REPO]: {}\n    };\n    const repositories = {};\n    for (let i = 0; i < authorities.length; i++) {\n        const role = authorities[i];\n        if (role === UserRole.ROLE_ADMIN) {\n            userType = UserType.ADMIN;\n        } else if (role === UserRole.ROLE_REPO_MANAGER) {\n            if (userType !== UserType.ADMIN) {\n                userType = UserType.REPO_MANAGER;\n            }\n        } else if (role === UserRole.ROLE_USER) {\n            userType = UserType.USER;\n        } else if (role.indexOf('ROLE_') !== 0) {\n            const index = role.indexOf('_', role.indexOf('_') + 1);\n            const op = role.substr(0, index);\n            const repo = role.substr(index + 1);\n            grantedAuthorities[op][repo] = true;\n            repositories[repo] = repositories[repo] || {};\n            if (op === READ_REPO) {\n                repositories[repo].read = true;\n            } else if (op === WRITE_REPO) {\n                repositories[repo].write = true;\n            }\n        }\n    }\n\n    return {\n        userType: userType,\n        userTypeDescription: UserUtils.getUserRoleName(userType),\n        grantedAuthorities: grantedAuthorities,\n        repositories: repositories\n    };\n};\n\nsecurityCtrl.controller('LoginCtrl', ['$scope', '$http', 'toastr', '$jwtAuth', '$openIDAuth', '$location', '$rootScope',\n    function ($scope, $http, toastr, $jwtAuth, $openIDAuth, $location, $rootScope) {\n        $scope.username = '';\n        $scope.password = '';\n\n        $scope.loginWithOpenID = function() {\n            $jwtAuth.loginOpenID();\n        };\n\n        if ($location.search().noaccess) {\n            toastr.error('User has no access rights or configuration error.', 'Login error');\n        } else if ($location.search().expired) {\n            toastr.error('Your authentication token has expired. Please login again.', 'Login error');\n        }\n\n        $scope.isGDBLoginEnabled = function() {\n            return $jwtAuth.passwordLoginEnabled;\n        };\n\n        $scope.isOpenIDEnabled = function() {\n            return $jwtAuth.openIDEnabled;\n        };\n\n        $scope.login = function () {\n            return $http({\n                method: 'POST',\n                url: 'rest/login/' + encodeURIComponent($scope.username),\n                headers: {\n                    'X-GraphDB-Password': $scope.password\n                }\n            }).success(function (data, status, headers) {\n                $jwtAuth.authenticate(data, headers('Authorization'))\n                    .then(() => {\n                        if ($rootScope.returnToUrl) {\n                            // go back to remembered url\n                            $location.url($rootScope.returnToUrl);\n                        } else {\n                            // no remembered url, go to home\n                            $location.path('/');\n                        }\n                    });\n            }).error(function (data, status) {\n                if (status === 401) {\n                    toastr.error('Wrong credentials!', 'Error');\n                    $scope.wrongCredentials = true;\n                    $scope.username = '';\n                    $scope.password = '';\n                } else {\n                    const msg = getError(data);\n                    toastr.error(msg, status);\n                }\n            });\n        };\n    }]);\n\nsecurityCtrl.controller('UsersCtrl', ['$scope', '$modal', 'toastr', '$window', '$jwtAuth', '$timeout', 'ModalService', 'SecurityRestService',\n    function ($scope, $modal, toastr, $window, $jwtAuth, $timeout, ModalService, SecurityRestService) {\n\n        $scope.loader = true;\n        $scope.securityEnabled = function () {\n            return $jwtAuth.isSecurityEnabled();\n        };\n        $scope.hasExternalAuth = function () {\n            return $jwtAuth.hasExternalAuth();\n        };\n        $scope.getAuthImplementation = function () {\n            return $jwtAuth.getAuthImplementation();\n        };\n        $scope.freeAccessEnabled = function () {\n            return $jwtAuth.isFreeAccessEnabled();\n        };\n        $scope.getUsers = function () {\n            SecurityRestService.getUsers()\n                .success(function (data) {\n                    $scope.users = data;\n                    for (let i = 0; i < $scope.users.length; i++) {\n                        const pa = parseAuthorities($scope.users[i].grantedAuthorities);\n                        $scope.users[i].userType = pa.userType;\n                        $scope.users[i].userTypeDescription = pa.userTypeDescription;\n                        $scope.users[i].repositories = pa.repositories;\n                    }\n                    $scope.loader = false;\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error');\n                    $scope.loader = false;\n                });\n        };\n        $scope.getUsers();\n\n        $scope.$on('repositoryIsSet', function () {\n            $scope.getUsers();\n        });\n\n        $scope.toggleSecurity = function () {\n            $jwtAuth.toggleSecurity(!$jwtAuth.isSecurityEnabled());\n            if ($jwtAuth.isSecurityEnabled()) {\n                const timer = $timeout(function () {\n                    $window.location.reload();\n                }, 500);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        };\n\n        $scope.toggleFreeAccess = function (updateFreeAccess) {\n            if (!$jwtAuth.isFreeAccessEnabled() || ($jwtAuth.isFreeAccessEnabled() && updateFreeAccess)) {\n                SecurityRestService.getFreeAccess().then(function (res) {\n                    let authorities = res.data.authorities;\n                    let appSettings = res.data.appSettings || {\n                        'DEFAULT_SAMEAS': true,\n                        'DEFAULT_INFERENCE': true,\n                        'EXECUTE_COUNT': true,\n                        'IGNORE_SHARED_QUERIES': false,\n                        'DEFAULT_VIS_GRAPH_SCHEMA': true\n                    };\n                    const modalInstance = $modal.open({\n                        templateUrl: 'js/angular/security/templates/modal/default-authorities.html',\n                        controller: 'DefaultAuthoritiesCtrl',\n                        resolve: {\n                            data: function () {\n                                return {\n                                    // converts the array rights to hash ones. why, oh, why do we have both formats?\n                                    defaultAuthorities: function () {\n                                        const defaultAuthorities = {\n                                            [READ_REPO]: {},\n                                            [WRITE_REPO]: {}\n                                        };\n                                        // We might have old (no longer existing) repositories so we have to check that\n                                        const repoIds = _.mapKeys($scope.getRepositories(), function (r) {\n                                            return r.id;\n                                        });\n                                        _.each(authorities, function (a) {\n                                            // indexOf works in IE 11, startsWith doesn't\n                                            if (a.indexOf(WRITE_REPO_PREFIX) === 0) {\n                                                if (repoIds.hasOwnProperty(a.substr(11))) {\n                                                    defaultAuthorities[WRITE_REPO][a.substr(11)] = true;\n                                                }\n                                            } else if (a.indexOf(READ_REPO_PREFIX) === 0) {\n                                                if (repoIds.hasOwnProperty(a.substr(10))) {\n                                                    defaultAuthorities[READ_REPO][a.substr(10)] = true;\n                                                }\n                                            }\n                                        });\n                                        return defaultAuthorities;\n                                    },\n                                    appSettings: appSettings\n                                };\n                            }\n                        }\n                    });\n                    modalInstance.result.then(function (data) {\n                        authorities = data.authorities;\n                        appSettings = data.appSettings;\n                        $jwtAuth.toggleFreeAccess(updateFreeAccess || !$jwtAuth.isFreeAccessEnabled(), authorities, appSettings, updateFreeAccess);\n                    });\n                });\n            } else {\n                $jwtAuth.toggleFreeAccess(!$jwtAuth.isFreeAccessEnabled(), []);\n            }\n        };\n\n        $scope.editFreeAccess = function () {\n            $scope.toggleFreeAccess(true);\n        };\n\n        $scope.removeUser = function (username) {\n            ModalService.openSimpleModal({\n                title: 'Confirm delete',\n                message: 'Are you sure you want to delete the user \\'' + username + '\\'?',\n                warning: true\n            }).result.then(function () {\n                $scope.loader = true;\n                SecurityRestService.deleteUser(username).success(function () {\n                    $scope.getUsers();\n                }).error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error');\n\n                    $scope.loader = false;\n                });\n\n            });\n        };\n\n        // Should be able to send the original username to $routeParams\n        $scope.encodeURIComponent = function (name) {\n            return encodeURIComponent(name);\n        };\n    }]);\n\nsecurityCtrl.controller('DefaultAuthoritiesCtrl', ['$scope', '$http', '$modalInstance', 'data', '$rootScope',\n    function ($scope, $http, $modalInstance, data, $rootScope) {\n        $scope.grantedAuthorities = data.defaultAuthorities();\n        $scope.appSettings = data.appSettings;\n\n        $scope.hasActiveLocation = function () {\n            // Hack to get this from root scope to avoid cyclic dependency\n            return !_.isEmpty($rootScope.globalLocation);\n        };\n\n        $scope.getRepositories = function () {\n            // Hack to get this from root scope to avoid cyclic dependency\n            return $rootScope.globalRepositories;\n        };\n\n        $scope.ok = function () {\n            const auth = [];\n            $scope.repositoryCheckError = true;\n            for (const index in $scope.grantedAuthorities.WRITE_REPO) {\n                if ($scope.grantedAuthorities.WRITE_REPO[index]) {\n                    auth.push(WRITE_REPO_PREFIX + index);\n                    auth.push(READ_REPO_PREFIX + index);\n                    $scope.repositoryCheckError = false;\n                }\n            }\n            for (const index in $scope.grantedAuthorities.READ_REPO) {\n                if ($scope.grantedAuthorities.READ_REPO[index] && auth.indexOf(READ_REPO_PREFIX + index) === -1) {\n                    auth.push(READ_REPO_PREFIX + index);\n                    $scope.repositoryCheckError = false;\n                }\n            }\n            if (!$scope.repositoryCheckError) {\n                $modalInstance.close({authorities: auth, appSettings: $scope.appSettings});\n            }\n        };\n\n        $scope.cancel = function () {\n            $modalInstance.dismiss('cancel');\n        };\n    }]);\n\nsecurityCtrl.controller('CommonUserCtrl', ['$scope', '$http', 'toastr', '$window', '$timeout', '$location', '$jwtAuth',\n    function ($scope, $http, toastr, $window, $timeout, $location, $jwtAuth) {\n\n        $scope.isAdmin = function () {\n            return $jwtAuth.hasRole(UserRole.ROLE_ADMIN);\n        };\n        $scope.hasExternalAuth = function () {\n            return $jwtAuth.hasExternalAuth();\n        };\n\n        $scope.hasEditRestrictions = function () {\n            return $scope.user && $scope.user.username === UserType.ADMIN;\n        };\n\n        $scope.isOverrideAuth = function () {\n            return $jwtAuth.isDefaultAuthEnabled();\n        };\n\n        $scope.setGrantedAuthorities = function () {\n            setGrantedAuthorities($scope);\n        };\n\n        $scope.hasReadPermission = function (repositoryId) {\n            return $scope.userType === UserType.ADMIN || $scope.userType === UserType.REPO_MANAGER\n                || $scope.grantedAuthorities.READ_REPO[repositoryId]\n                || $scope.grantedAuthorities.WRITE_REPO[repositoryId]\n                || repositoryId !== SYSTEM_REPO\n                && ($scope.grantedAuthorities.READ_REPO['*'] || $scope.grantedAuthorities.WRITE_REPO['*']);\n        };\n\n        $scope.hasWritePermission = function (repositoryId) {\n            return $scope.userType === UserType.ADMIN || $scope.userType === UserType.REPO_MANAGER\n                || $scope.grantedAuthorities.WRITE_REPO[repositoryId]\n                || repositoryId !== SYSTEM_REPO && $scope.grantedAuthorities.WRITE_REPO['*'];\n        };\n\n        $scope.readCheckDisabled = function (repositoryId) {\n            return $scope.hasWritePermission(repositoryId)\n                || repositoryId !== SYSTEM_REPO && repositoryId !== '*' && $scope.grantedAuthorities.READ_REPO['*']\n                || $scope.hasEditRestrictions();\n        };\n\n        $scope.writeCheckDisabled = function (repositoryId) {\n            return $scope.userType === UserType.ADMIN || $scope.userType === UserType.REPO_MANAGER\n                || repositoryId !== SYSTEM_REPO && repositoryId !== '*' && $scope.grantedAuthorities.WRITE_REPO['*']\n                || $scope.hasEditRestrictions();\n        };\n\n        $scope.userType = UserType.USER;\n        $scope.grantedAuthorities = {\n            [READ_REPO]: {},\n            [WRITE_REPO]: {}\n        };\n\n        $scope.validatePassword = function() {\n            if ($scope.noPassword) {\n                $scope.passwordError = '';\n                $scope.confirmPasswordError = '';\n                return true;\n            }\n            if ($scope.user.password !== $scope.user.confirmpassword) {\n                if (!$scope.user.password) {\n                    $scope.passwordError = 'Enter password!';\n                    $scope.confirmPasswordError = '';\n                } else {\n                    $scope.passwordError = '';\n                    $scope.confirmPasswordError = 'Confirm password!';\n                }\n                return false;\n            } else {\n                $scope.passwordError = '';\n                $scope.confirmPasswordError = '';\n            }\n            return true;\n        };\n\n        $scope.isLocalAuthentication = function() {\n            return $jwtAuth.getAuthImplementation() === 'Local';\n        };\n\n        $scope.updateUser = function () {\n            if (!$scope.validateForm()) {\n                return false;\n            }\n\n            if ($scope.isLocalAuthentication()) {\n                $scope.setGrantedAuthorities();\n            }\n\n            if (!$scope.repositoryCheckError) {\n                $scope.updateUserHttp();\n            }\n        };\n\n        $scope.setNoPassword = function() {\n            if ($scope.noPassword) {\n                $scope.user.password = '';\n                $scope.user.confirmpassword = '';\n                $scope.passwordError = '';\n                $scope.confirmPasswordError = '';\n            }\n        }\n    }]);\n\nsecurityCtrl.controller('AddUserCtrl', ['$scope', '$http', 'toastr', '$window', '$timeout', '$location', '$jwtAuth', '$controller', 'SecurityRestService',\n    function ($scope, $http, toastr, $window, $timeout, $location, $jwtAuth, $controller, SecurityRestService) {\n\n        angular.extend(this, $controller('CommonUserCtrl', {$scope: $scope}));\n\n        $scope.mode = 'add';\n        $scope.saveButtonText = 'Create';\n        $scope.goBack = function () {\n            const timer = $timeout(function () {\n                $window.history.back();\n            }, 100);\n            $scope.$on('$destroy', function () {\n                $timeout.cancel(timer);\n            });\n        };\n        $scope.pageTitle = 'Create new user';\n        $scope.passwordPlaceholder = 'Password';\n\n        $scope.user = {\n            'username': '',\n            'password': '',\n            'confirmpassword': '',\n            'grantedAuthorities': [],\n            'appSettings': {\n                'DEFAULT_SAMEAS': true,\n                'DEFAULT_INFERENCE': true,\n                'EXECUTE_COUNT': true,\n                'IGNORE_SHARED_QUERIES': false,\n                'DEFAULT_VIS_GRAPH_SCHEMA': true\n            }\n        };\n\n        $scope.submit = function () {\n            $scope.createUser();\n        };\n\n        $scope.createUserHttp = function () {\n            $scope.loader = true;\n            SecurityRestService.createUser({\n                username: $scope.user.username,\n                pass: $scope.user.password,\n                appSettings: $scope.user.appSettings,\n                grantedAuthorities: $scope.user.grantedAuthorities\n            }).success(function () {\n                toastr.success('The user ' + $scope.user.username + ' has been created.');\n                const timer = $timeout(function () {\n                    $scope.loader = false;\n                    $window.history.back();\n                }, 2000);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }).error(function (data) {\n                const msg = getError(data);\n                $scope.loader = false;\n                toastr.error(msg, 'Error');\n            });\n        };\n\n        $scope.createUser = function () {\n            if ($scope.validateForm()) {\n                $scope.setGrantedAuthorities();\n\n                if (!$scope.repositoryCheckError) {\n                    $scope.createUserHttp();\n                }\n            }\n        };\n\n        $scope.validateForm = function () {\n            let result = true;\n            if (!$scope.user.username) {\n                $scope.usernameError = 'Enter username!';\n                result = false;\n            } else {\n                $scope.usernameError = '';\n            }\n            if ($scope.noPassword) {\n                $scope.passwordError = '';\n                $scope.confirmPasswordError = '';\n            } else {\n                if (!$scope.user.password) {\n                    $scope.passwordError = 'Enter password!';\n                    result = false;\n                } else {\n                    $scope.passwordError = '';\n                }\n                if (!$scope.user.confirmpassword || $scope.user.password !== $scope.user.confirmpassword) {\n                    $scope.confirmPasswordError = 'Confirm password!';\n                    result = false;\n                } else {\n                    $scope.confirmPasswordError = '';\n                }\n            }\n\n            return result;\n        };\n    }]);\n\nsecurityCtrl.controller('EditUserCtrl', ['$scope', '$http', 'toastr', '$window', '$routeParams', '$timeout', '$location', '$jwtAuth', '$controller', 'SecurityRestService',\n    function ($scope, $http, toastr, $window, $routeParams, $timeout, $location, $jwtAuth, $controller, SecurityRestService) {\n\n        angular.extend(this, $controller('CommonUserCtrl', {$scope: $scope}));\n\n        $scope.mode = 'edit';\n        $scope.saveButtonText = 'Save';\n        $scope.goBack = function () {\n            const timer = $timeout(function () {\n                $window.history.back();\n            }, 100);\n            $scope.$on('$destroy', function () {\n                $timeout.cancel(timer);\n            });\n        };\n        $scope.params = $routeParams;\n        $scope.pageTitle = 'Edit user: ' + $scope.params.userId;\n        $scope.passwordPlaceholder = 'New password';\n        $scope.userType = UserType.USER;\n        const defaultUserSettings = {\n            'DEFAULT_SAMEAS': true,\n            'DEFAULT_INFERENCE': true,\n            'EXECUTE_COUNT': true,\n            'IGNORE_SHARED_QUERIES': false,\n            'DEFAULT_VIS_GRAPH_SCHEMA': true\n        };\n\n        if (!$jwtAuth.hasRole(UserRole.ROLE_ADMIN)) {\n            $location.url('settings');\n        }\n        $scope.getUserData = function () {\n            SecurityRestService.getUser($scope.params.userId).success(function (data) {\n                $scope.userData = data;\n                $scope.user = {username: $scope.userData.username};\n                $scope.user.password = '';\n                $scope.user.confirmpassword = '';\n                $scope.user.external = $scope.userData.external;\n                $scope.user.appSettings = data.appSettings || defaultUserSettings;\n                $scope.userType = UserType.USER;\n                const pa = parseAuthorities(data.grantedAuthorities);\n                $scope.userType = pa.userType;\n                $scope.grantedAuthorities = pa.grantedAuthorities;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error');\n            });\n        };\n\n        $scope.getUserData();\n\n        $scope.submit = function () {\n            $scope.updateUser();\n        };\n\n        $scope.updateUserHttp = function () {\n            $scope.loader = true;\n            SecurityRestService.updateUser({\n                username: $scope.user.username,\n                pass: ($scope.noPassword) ? '' : $scope.user.password || undefined,\n                appSettings: $scope.user.appSettings,\n                grantedAuthorities: $scope.user.grantedAuthorities\n            }).success(function () {\n                toastr.success('The user ' + $scope.user.username + ' was updated.');\n                const timer = $timeout(function () {\n                    $scope.loader = false;\n                    $window.history.back();\n                }, 2000);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n                // if we update the settings of the currently logged user, update the principal\n                if ($scope.user.username === $jwtAuth.getPrincipal().username) {\n                    $jwtAuth.getPrincipal().appSettings = $scope.user.appSettings;\n                }\n            }).error(function (data) {\n                const msg = getError(data);\n                $scope.loader = false;\n                toastr.error(msg, 'Error');\n            });\n        };\n\n        $scope.validateForm = function () {\n            return $scope.validatePassword();\n        };\n    }]);\n\nsecurityCtrl.controller('RolesMappingController', ['$scope', 'toastr', 'SecurityRestService',\n    function ($scope, toastr, SecurityRestService) {\n\n    $scope.debugMapping = function (role, mapping) {\n        const method = mapping.split(':');\n        SecurityRestService.getRolesMapping({\n            role: role,\n            method: method[1],\n            mapping: method[0]\n        });\n    };\n\n    const loadRoles = function () {\n        SecurityRestService.getRoles()\n            .success(function (data) {\n                $scope.roleMappings = data;\n                $scope.roles = _.keys($scope.roleMappings);\n                $scope.mappings = _.keys($scope.roleMappings[$scope.roles[0]]);\n                const permissionsCount = _.map($scope.roles, function (role) {\n                    return [role, _.filter($scope.roleMappings[role]).length];\n                });\n                $scope.roles = _.reverse(_.map(_.orderBy(permissionsCount, function (p) {\n                    return p[1];\n                }), function (p) {\n                    return p[0];\n                }));\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                $scope.loader = false;\n                toastr.error(msg, 'Error');\n            });\n    };\n\n    $scope.$on('repositoryIsSet', function () {\n        loadRoles();\n    });\n}]);\n\nsecurityCtrl.controller('ChangeUserPasswordSettingsCtrl', ['$scope', 'toastr', '$window', '$timeout', '$jwtAuth', '$rootScope', '$controller', 'SecurityRestService',\n    function ($scope, toastr, $window, $timeout, $jwtAuth, $rootScope, $controller, SecurityRestService) {\n\n        angular.extend(this, $controller('CommonUserCtrl', {$scope: $scope}));\n\n        $scope.mode = 'settings';\n        $scope.hasEditRestrictions = function () {\n            return true;\n        };\n        $scope.saveButtonText = 'Save';\n        $scope.goBack = function () {\n            const timer = $timeout(function () {\n                $window.history.back();\n            }, 100);\n            $scope.$on('$destroy', function () {\n                $timeout.cancel(timer);\n            });\n        };\n        $scope.currentUserData = function () {\n            return $jwtAuth.getPrincipal();\n        };\n\n        $scope.updateCurrentUserData = function () {\n            _.assign($jwtAuth.getPrincipal(), $scope.userData);\n        };\n\n        //call it as a function so I can make test on it\n        $scope.redirectAdmin = function () {\n            if (!$scope.currentUserData()) {\n                $rootScope.redirectToLogin();\n            }\n        };\n\n        $scope.pageTitle = 'Settings';\n        $scope.passwordPlaceholder = 'New password';\n        $scope.grantedAuthorities = {\n            [READ_REPO]: {},\n            [WRITE_REPO]: {}\n        };\n\n        const initUserData = function (scope) {\n            // Copy needed so that Cancel would work correctly, need to call updateCurrentUserData on OK\n            scope.userData = angular.copy(scope.currentUserData());\n            scope.user = {username: scope.userData.username};\n            scope.user.password = '';\n            scope.user.confirmpassword = '';\n            scope.user.external = scope.userData.external;\n            scope.user.appSettings = scope.userData.appSettings;\n            // For backward compatibility\n            if (scope.user.appSettings['DEFAULT_VIS_GRAPH_SCHEMA'] === undefined) {\n                scope.user.appSettings['DEFAULT_VIS_GRAPH_SCHEMA'] = true;\n            }\n\n            const pa = parseAuthorities(scope.userData.authorities);\n            $scope.userType = pa.userType;\n            $scope.grantedAuthorities = pa.grantedAuthorities;\n        };\n\n        if ($scope.currentUserData()) {\n            initUserData($scope);\n        } else {\n            $scope.$on('securityInit', function (scope) {\n                scope.currentScope.redirectAdmin();\n                initUserData(scope.currentScope);\n            });\n        }\n\n        $scope.loader = false;\n\n        $scope.submit = function () {\n            $scope.updateUser();\n        };\n\n        $scope.updateUserHttp = function () {\n            $scope.loader = true;\n            SecurityRestService.updateUserData({\n                username: $scope.user.username,\n                pass: ($scope.noPassword) ? '' : $scope.user.password || undefined,\n                appSettings: $scope.user.appSettings\n            }).success(function () {\n                $scope.updateCurrentUserData();\n                toastr.success('The user ' + $scope.user.username + ' was updated.');\n                const timer = $timeout(function () {\n                    $scope.loader = false;\n                    $window.history.back();\n                }, 2000);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            }).error(function (data) {\n                const msg = getError(data);\n                $scope.loader = false;\n                toastr.error(msg, 'Error');\n            });\n        };\n\n        $scope.updateUser = function () {\n            if (!$scope.validateForm()) {\n                return false;\n            }\n\n            $scope.updateUserHttp();\n        };\n\n        $scope.validateForm = function () {\n            return $scope.validatePassword();\n        };\n    }]);\n\nsecurityCtrl.controller('DeleteUserCtrl', ['$scope', '$modalInstance', 'username', function ($scope, $modalInstance, username) {\n    $scope.username = username;\n\n    $scope.ok = function () {\n        $modalInstance.close();\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}]);\n"],"sourceRoot":""}