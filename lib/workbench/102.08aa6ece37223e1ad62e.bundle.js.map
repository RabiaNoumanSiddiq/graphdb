{"version":3,"sources":["webpack:///./src/js/angular/treeview/ng-tree.js"],"names":["angular","module","directive","$timeout","restrict","template","replace","scope","treeData","onSelect","initialSelection","treeControl","controller","$scope","$element","$http","expandClose","branch","$parent","fetchChildData","expanded","checkBoxClicked","row","showCheckboxes","level","fetchChildDataAll","link","element","attrs","expand_all_parents","expand_level","for_all_ancestors","for_each_branch","get_parent","n","on_treeData_change","select_branch","selected_branch","tree","s","console","log","iconExpand","iconCollapse","iconLeaf","expandLevel","parseInt","length","label","alert","f","do_f","root_branch","_i","_len","_ref","_results","child","children","push","selected","user_clicks_branch","parent","parent_uid","b","uid","fn","tree_rows","add_branch_to_list","Math","random","isArray","e","visible","child_visible","tree_icon","checkboxStatus","undefined","fetched","$watch","isObject","expand_all","collapse_all","get_first_branch","select_first_branch","get_selected_branch","get_parent_branch","get_children","select_parent_branch","p","add_branch","new_branch","add_root_branch","expand_branch","collapse_branch","get_siblings","get_next_sibling","i","siblings","indexOf","get_prev_sibling","select_next_sibling","next","select_prev_sibling","prev","get_first_child","get_closest_ancestor_next_sibling","get_next_branch","select_next_branch","last_descendant","last_child","get_prev_branch","prev_sibling","select_prev_branch","call","this"],"mappings":"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","file":"102.08aa6ece37223e1ad62e.bundle.js","sourcesContent":["(function() {\n  var module;\n\n  module = angular.module('angularBootstrapNavTree', []);\n\n  module.directive('ngTree', [\n    '$timeout', function($timeout) {\n      return {\n        restrict: 'E',\n        template: createTemplate(),\n        replace: true,\n        scope: {\n          treeData: '=',\n          onSelect: '&',\n          initialSelection: '@',\n          treeControl: '='\n        },\n        controller: function($scope, $element, $http){\n        \t$scope.expandClose = function(branch) {\n        \t\t$scope.$parent.fetchChildData(branch);\n        \t\tbranch.expanded = !branch.expanded\n        \t};\n\n        \t$scope.checkBoxClicked = function(row){\n        \t\tif(row.branch.showCheckboxes=='true' && row.level > 2){\n        \t\t\t$scope.$parent.fetchChildDataAll(row.branch);\n            \t\t$scope.$parent.checkBoxClicked(row.branch);\n        \t\t}\n        \t}\n          },\n        link: function(scope, element, attrs) {\n\n        \tvar error, expand_all_parents, expand_level, for_all_ancestors, for_each_branch, get_parent, n, on_treeData_change, select_branch, selected_branch, tree;\n          error = function(s) {\n            console.log('ERROR:' + s);\n            return void 0;\n          };\n          if (attrs.iconExpand == null) {\n            attrs.iconExpand = 'icon-plus  glyphicon glyphicon-plus  fa fa-plus';\n          }\n          if (attrs.iconCollapse == null) {\n            attrs.iconCollapse = 'icon-minus glyphicon glyphicon-minus fa fa-minus';\n          }\n          if (attrs.iconLeaf == null) {\n            attrs.iconLeaf = 'icon-file  glyphicon glyphicon-file  fa fa-file';\n          }\n          if (attrs.expandLevel == null) {\n            attrs.expandLevel = '3';\n          }\n          expand_level = parseInt(attrs.expandLevel, 1);\n//          expand_level = 1;\n          if (!scope.treeData) {\n            alert('no treeData defined for the tree!'); // NOSONAR\n            return;\n          }\n          if (scope.treeData.length == null) {\n            if (treeData.label != null) {\n              scope.treeData = [treeData];\n            } else {\n              alert('treeData should be an array of root branches'); // NOSONAR\n              return;\n            }\n          }\n          for_each_branch = function(f) {\n            var do_f, root_branch, _i, _len, _ref, _results;\n            do_f = function(branch, level) {\n              var child, _i, _len, _ref, _results;\n              f(branch, level);\n              if (branch.children != null) {\n                _ref = branch.children;\n                _results = [];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                  child = _ref[_i];\n                  _results.push(do_f(child, level + 1));\n                }\n                return _results;\n              }\n            };\n            _ref = scope.treeData;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              root_branch = _ref[_i];\n              _results.push(do_f(root_branch, 1));\n            }\n            return _results;\n          };\n          selected_branch = null;\n          select_branch = function(branch) {\n            if (!branch) {\n              if (selected_branch != null) {\n                selected_branch.selected = false;\n              }\n              selected_branch = null;\n              return;\n            }\n            if (branch !== selected_branch) {\n              if (selected_branch != null) {\n                selected_branch.selected = false;\n              }\n              branch.selected = true;\n              selected_branch = branch;\n              expand_all_parents(branch);\n              if (branch.onSelect != null) {\n                return $timeout(function() {\n                  return branch.onSelect(branch);\n                });\n              } else {\n                if (scope.onSelect != null) {\n                  return $timeout(function() {\n                    return scope.onSelect({\n                      branch: branch\n                    });\n                  });\n                }\n              }\n            }\n          };\n          scope.user_clicks_branch = function(branch) {\n            if (branch !== selected_branch) {\n              return select_branch(branch);\n            }\n          };\n          get_parent = function(child) {\n            var parent;\n            parent = void 0;\n            if (child.parent_uid) {\n              for_each_branch(function(b) {\n                if (b.uid === child.parent_uid) {\n                  return parent = b;\n                }\n              });\n            }\n            return parent;\n          };\n          for_all_ancestors = function(child, fn) {\n            var parent;\n            parent = get_parent(child);\n            if (parent != null) {\n              fn(parent);\n              return for_all_ancestors(parent, fn);\n            }\n          };\n          expand_all_parents = function(child) {\n            return for_all_ancestors(child, function(b) {\n              return b.expanded = true;\n            });\n          };\n          scope.tree_rows = [];\n          on_treeData_change = function() {\n            var add_branch_to_list, root_branch, _i, _len, _ref, _results;\n            for_each_branch(function(b, level) {\n              if (!b.uid) {\n                return b.uid = \"\" + Math.random();\n              }\n            });\n            console.log('UIDs are set.');\n            for_each_branch(function(b) {\n              var child, _i, _len, _ref, _results;\n              if (angular.isArray(b.children)) {\n                _ref = b.children;\n                _results = [];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                  child = _ref[_i];\n                  _results.push(child.parent_uid = b.uid);\n                }\n                return _results;\n              }\n            });\n            scope.tree_rows = [];\n            for_each_branch(function(branch) {\n              var child, f;\n              if (branch.children) {\n                if (branch.children.length > 0) {\n                  f = function(e) {\n                    if (typeof e === 'string') {\n                      return {\n                        label: e,\n                        children: []\n                      };\n                    } else {\n                      return e;\n                    }\n                  };\n                  return branch.children = (function() {\n                    var _i, _len, _ref, _results;\n                    _ref = branch.children;\n                    _results = [];\n                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                      child = _ref[_i];\n                      _results.push(f(child));\n                    }\n                    return _results;\n                  })();\n                }\n              } else {\n                return branch.children = [];\n              }\n            });\n            add_branch_to_list = function(level, branch, visible) {\n              var child, child_visible, tree_icon, _i, _len, _ref, _results;\n              if (branch.expanded == null) {\n                branch.expanded = false;\n              }\n              if (branch.checkboxStatus == null || branch.checkboxStatus == undefined) {\n            \t  branch.checkboxStatus = 1;\n              }\n              if (branch.fetched == null || branch.fetched == undefined) {\n                  branch.fetched = 0;\n              }\n\n              branch.showCheckboxes = attrs.showCheckboxes;\n\n              if (!branch.children || branch.children.length === 0) {\n                tree_icon = attrs.iconLeaf;\n              } else {\n                if (branch.expanded) {\n                  tree_icon = attrs.iconCollapse;\n                } else {\n                  tree_icon = attrs.iconExpand;\n                }\n              }\n              scope.tree_rows.push({\n                level: level,\n                branch: branch,\n                label: branch.label,\n                tree_icon: tree_icon,\n                visible: visible\n              });\n              if (branch.children != null) {\n                _ref = branch.children;\n                _results = [];\n                for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n                  child = _ref[_i];\n                  child_visible = visible && branch.expanded;\n                  _results.push(add_branch_to_list(level + 1, child, child_visible));\n                }\n                return _results;\n              }\n            };\n            _ref = scope.treeData;\n            _results = [];\n            for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n              root_branch = _ref[_i];\n              _results.push(add_branch_to_list(1, root_branch, true));\n            }\n            return _results;\n          };\n          scope.$watch('treeData', on_treeData_change, true);\n          if (attrs.initialSelection != null) {\n            for_each_branch(function(b) {\n              if (b.label === attrs.initialSelection) {\n                return $timeout(function() {\n                  return select_branch(b);\n                });\n              }\n            });\n          }\n          n = scope.treeData.length;\n          console.log('num root branches = ' + n);\n          for_each_branch(function(b, level) {\n            b.level = level;\n            return b.expanded = b.level < expand_level;\n          });\n          if (scope.treeControl != null) {\n            if (angular.isObject(scope.treeControl)) {\n              tree = scope.treeControl;\n              tree.expand_all = function() {\n                return for_each_branch(function(b, level) {\n                  return b.expanded = true;\n                });\n              };\n              tree.collapse_all = function() {\n                return for_each_branch(function(b, level) {\n                  return b.expanded = false;\n                });\n              };\n              tree.get_first_branch = function() {\n                n = scope.treeData.length;\n                if (n > 0) {\n                  return scope.treeData[0];\n                }\n              };\n              tree.select_first_branch = function() {\n                var b;\n                b = tree.get_first_branch();\n                return tree.select_branch(b);\n              };\n              tree.get_selected_branch = function() {\n                return selected_branch;\n              };\n              tree.get_parent_branch = function(b) {\n                return get_parent(b);\n              };\n              tree.select_branch = function(b) {\n                select_branch(b);\n                return b;\n              };\n              tree.get_children = function(b) {\n                return b.children;\n              };\n              tree.select_parent_branch = function(b) {\n                var p;\n                if (b == null) {\n                  b = tree.get_selected_branch();\n                }\n                if (b != null) {\n                  p = tree.get_parent_branch(b);\n                  if (p != null) {\n                    tree.select_branch(p);\n                    return p;\n                  }\n                }\n              };\n              tree.add_branch = function(parent, new_branch) {\n                if (parent != null) {\n                  parent.children.push(new_branch);\n                  parent.expanded = true;\n                } else {\n                  scope.treeData.push(new_branch);\n                }\n                return new_branch;\n              };\n              tree.add_root_branch = function(new_branch) {\n                tree.add_branch(null, new_branch);\n                return new_branch;\n              };\n              tree.expand_branch = function(b) {\n                if (b == null) {\n                  b = tree.get_selected_branch();\n                }\n                if (b != null) {\n                  b.expanded = true;\n                  return b;\n                }\n              };\n              tree.collapse_branch = function(b) {\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  b.expanded = false;\n                  return b;\n                }\n              };\n              tree.get_siblings = function(b) {\n                var p, siblings;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  p = tree.get_parent_branch(b);\n                  if (p) {\n                    siblings = p.children;\n                  } else {\n                    siblings = scope.treeData;\n                  }\n                  return siblings;\n                }\n              };\n              tree.get_next_sibling = function(b) {\n                var i, siblings;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  siblings = tree.get_siblings(b);\n                  n = siblings.length;\n                  i = siblings.indexOf(b);\n                  if (i < n) {\n                    return siblings[i + 1];\n                  }\n                }\n              };\n              tree.get_prev_sibling = function(b) {\n                var i, siblings;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                siblings = tree.get_siblings(b);\n                n = siblings.length;\n                i = siblings.indexOf(b);\n                if (i > 0) {\n                  return siblings[i - 1];\n                }\n              };\n              tree.select_next_sibling = function(b) {\n                var next;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  next = tree.get_next_sibling(b);\n                  if (next != null) {\n                    return tree.select_branch(next);\n                  }\n                }\n              };\n              tree.select_prev_sibling = function(b) {\n                var prev;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  prev = tree.get_prev_sibling(b);\n                  if (prev != null) {\n                    return tree.select_branch(prev);\n                  }\n                }\n              };\n              tree.get_first_child = function(b) {\n                var _ref;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  if (((_ref = b.children) != null ? _ref.length : void 0) > 0) {\n                    return b.children[0];\n                  }\n                }\n              };\n              tree.get_closest_ancestor_next_sibling = function(b) {\n                var next, parent;\n                next = tree.get_next_sibling(b);\n                if (next != null) {\n                  return next;\n                } else {\n                  parent = tree.get_parent_branch(b);\n                  return tree.get_closest_ancestor_next_sibling(parent);\n                }\n              };\n              tree.get_next_branch = function(b) {\n                var next;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  next = tree.get_first_child(b);\n                  if (next != null) {\n                    return next;\n                  } else {\n                    next = tree.get_closest_ancestor_next_sibling(b);\n                    return next;\n                  }\n                }\n              };\n              tree.select_next_branch = function(b) {\n                var next;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  next = tree.get_next_branch(b);\n                  if (next != null) {\n                    tree.select_branch(next);\n                    return next;\n                  }\n                }\n              };\n              tree.last_descendant = function(b) {\n                var last_child;\n                n = b.children.length;\n                if (n === 0) {\n                  return b;\n                } else {\n                  last_child = b.children[n - 1];\n                  return tree.last_descendant(last_child);\n                }\n              };\n              tree.get_prev_branch = function(b) {\n                var parent, prev_sibling;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  prev_sibling = tree.get_prev_sibling(b);\n                  if (prev_sibling != null) {\n                    return tree.last_descendant(prev_sibling);\n                  } else {\n                    parent = tree.get_parent_branch(b);\n                    return parent;\n                  }\n                }\n              };\n              return tree.select_prev_branch = function(b) {\n                var prev;\n                if (b == null) {\n                  b = selected_branch;\n                }\n                if (b != null) {\n                  prev = tree.get_prev_branch(b);\n                  if (prev != null) {\n                    tree.select_branch(prev);\n                    return prev;\n                  }\n                }\n              };\n            }\n          }\n        }\n      };\n    }\n  ]);\n\n}).call(this);\n\nfunction createTemplate(){\n\tvar template = \"<ul class=\\\"nav nav-list nav-pills nav-stacked ng-tree\\\">\"+\n\t\t\t\t\t  \"<li ng-repeat=\\\"row in tree_rows | filter:{visible:true} track by row.branch.uid\\\" ng-animate=\\\"'ng-tree-animate'\\\" data-element-id=\\\"{{row.branch.id}}\\\" data-element-label=\\\"{{row.branch.label}}\\\" ng-class=\\\"'level-' + {{ row.level }} + (row.branch.selected ? ' active':'')\\\" class=\\\"ng-tree-row\\\">\"+\n//\t\t\t\t\t  \t\"<a ng-click=\\\"user_clicks_branch(row.branch)\\\">\"+\n\t\t\t\t\t  \t\"<a ng-click=\\\"checkBoxClicked(row)\\\">\"+\n\t\t\t\t\t  \t\t\"<div style='float:left; padding-top:3px;'>\"+\n\t\t\t\t\t\t  \t\t\"<i ng-if=\\\"row.branch.children.length>0\\\" ng-class=\\\"row.tree_icon\\\" ng-click=\\\"expandClose(row.branch); $event.stopPropagation()\\\" class=\\\"indented tree-icon\\\" style=\\\"vertical-align: 2px;\\\"></i>\"+\n\t\t\t\t\t\t  \t\t\"<i ng-if=\\\"row.branch.children.length<1\\\" class=\\\"indented tree-icon ng-scope icon-plus  glyphicon glyphicon-plus fa fa-plus\\\" style=\\\"color:transparent;\\\"></i>\"+\n\t\t\t\t\t\t  \t\t\"<span ng-if=\\\"row.branch.showCheckboxes=='true' && row.branch.checkboxStatus=='1' && row.level > 2 \\\" class='indented bootstrap-checkbox' data-checkbox-id=\\\"{{row.branch.id}}\\\" ng-click=\\\"checkBoxClicked(row); $event.stopPropagation()\\\"></span>\"+\n\t\t\t\t\t\t  \t\t\"<span ng-if=\\\"row.branch.showCheckboxes=='true' && row.branch.checkboxStatus=='2' && row.level > 2 \\\" class='indented bootstrap-checkbox selectedNode' data-checkbox-id=\\\"{{row.branch.id}}\\\" ng-click=\\\"checkBoxClicked(row); $event.stopPropagation()\\\"><i class=\\\"icon-stop\\\"></i></span>\"+\n\t\t\t\t\t\t  \t\t\"<span ng-if=\\\"row.branch.showCheckboxes=='true' && row.branch.checkboxStatus=='3' && row.level > 2 \\\" class='indented bootstrap-checkbox selectedNode' data-checkbox-id=\\\"{{row.branch.id}}\\\" ng-click=\\\"checkBoxClicked(row); $event.stopPropagation()\\\"><i class=\\\"icon-ok\\\"></i></span>\"+\n\t\t\t\t\t\t  \t\t\"<span ng-if=\\\"row.branch.showCheckboxes=='true' && row.branch.checkboxStatus=='1' && row.level < 3 \\\" class='indented bootstrap-checkbox disabledCheckBox' data-checkbox-id=\\\"{{row.branch.id}}\\\"></span>\"+\n\t\t\t\t\t\t  \t\t\"<span ng-if=\\\"row.branch.showCheckboxes=='true' && row.branch.checkboxStatus=='2' && row.level < 3 \\\" class='indented bootstrap-checkbox disabledCheckBox selectedNode' data-checkbox-id=\\\"{{row.branch.id}}\\\"><i class=\\\"icon-stop\\\"></i></span>\"+\n\t\t\t\t\t\t  \t\t\"<span ng-if=\\\"row.branch.showCheckboxes=='true' && row.branch.checkboxStatus=='3' && row.level < 3 \\\" class='indented bootstrap-checkbox disabledCheckBox selectedNode' data-checkbox-id=\\\"{{row.branch.id}}\\\"><i class=\\\"icon-ok\\\"></i></span>\"+\n\t\t\t\t\t  \t\t\"</div>\"+\n\t\t\t\t\t  \t\t\"<div ng-if=\\\"row.branch.checkboxStatus =='1'\\\" ng-class=\\\"'div-level-' + {{ row.level }}\\\" class=\\\"indented tree-label\\\">{{ row.branch.id }} - {{ row.label }} </div>\"+\n\t\t\t\t\t  \t\t\"<div ng-if=\\\"row.branch.checkboxStatus !='1'\\\" ng-class=\\\"'div-level-' + {{ row.level }}\\\" class=\\\"indented tree-label selectedNode\\\">{{ row.branch.id }} - {{ row.label }} </div>\"+\n\t\t\t\t\t  \t\"</a>\"+\n\t\t\t\t\t  \"</li>\"+\n\t\t\t\t\t\"</ul>\";\n\n\treturn template\n}\n"],"sourceRoot":""}