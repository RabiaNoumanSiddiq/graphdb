{"version":3,"sources":["webpack:///./src/js/angular/rest/connectors.rest.service.js","webpack:///./src/js/angular/utils/notifications.js","webpack:///./src/js/angular/externalsync/controllers.js","webpack:///./src/js/angular/core/directives/queryeditor/query-editor.controller.js","webpack:///./src/js/angular/core/directives/queryeditor/query-editor.directive.js","webpack:///./src/js/angular/core/directives/queryeditor/sparql-tab.directive.js","webpack:///./src/js/angular/jdbc/controllers.js","webpack:///./src/js/angular/rest/jdbc.rest.service.js","webpack:///./src/js/angular/jdbc/app.js"],"names":["angular","module","factory","ConnectorsRestService","$inject","CONNECTORS_ENDPOINT","$http","getConnectors","get","initConnector","prefix","hasConnector","checkConnector","data","post","headers","Notifications","toastr","showToastMessageWithDelay","message","Promise","r","success","setTimeout","jsonToFormData","str","Object","keys","forEach","key","push","encodeURIComponent","join","mapCreateValuesToUiValues","values","options","i","length","option","__type","__name","j","__childOptions","child","k","valueK","hasOwnProperty","isDefined","__defaultValue","optionEl","isUndefined","map","_","value","toJson","_evaluateSparqlQuery","http","repository","query","buildNamePrefix","substring","createConnectorQuery","name","fields","reportError","fcopy","sortObject","obj","newObject","each","childOption","copy","arrayMap","reduce","acc","Error","fromJson","e","__label","removeEmptyValues","Array","isArray","filter","item","trim","finalString","replace","ConnectorsCtrl","$scope","$repositories","$modal","ModalService","$q","RDF4JRepositoriesRestService","resetProgress","repair","beingBuiltConnector","percentDone","status","processedEntities","estimatedEntities","indexedEntities","entitiesPerSecond","actionName","waitOnRepairStartOnce","eta","inline","iri","openProgressModal","$","extend","doneCallback","modalInstance","dismiss","open","templateUrl","controller","size","backdrop","scope","executeCreate","connector","errorCallback","modal","addStatements","getActiveRepository","update","then","res","existing","err","error","getError","finally","loader","controllers","definitions","getLoaderMessage","timeSeconds","Date","now","loaderStartTime","timeHuman","getHumanReadableSeconds","progressMessage","extraMessage","setLoader","isRunning","canWriteActiveRepo","connectors","all","connectorIris","createStatusQueryForAny","evaluateSparqlQuery","results","bindings","statusObject","JSON","parse","console","parseFirstBuildingResult","d","split","catch","getOptions","isEmpty","isObject","toPrettyJson","$watch","getActiveLocation","copyConnector","newValues","resolve","result","skipConversion","newConnector","inst","type","openSimpleModal","title","warning","delete","isExternal","indexOf","force","namePrefix","deleteConnectorQuery","viewQuery","DeleteConnectorCtrl","$modalInstance","ok","close","cancel","ExtendNewConnectorCtrl","toQuery","label","addField","index","optionName","newField","defaultValues","splice","addOption","array","deleteOption","addMapOption","deleteMapOption","form","$valid","CreateConnectorCtrl","$controller","this","CreateProgressCtrl","$interval","initProgress","statusIri","createStatusQueryForIri","progressInterval","getFirstStatusFromResult","toFixed","etaSeconds","$on","input","Math","ceil","QueryEditorCtrl","$timeout","SparqlRestService","$filter","$window","$jwtAuth","MonitoringRestService","LocalStorageAdapter","LSKeys","defaultTabConfig","id","inference","sameAs","checkQueryIntervalId","principal","getPrincipal","initTabs","appSettings","DEFAULT_INFERENCE","DEFAULT_SAMEAS","skipCountQuery","EXECUTE_COUNT","ignoreSharedQueries","IGNORE_SHARED_QUERIES","tabsData","tabs","TABS_STATE","$watchCollection","newVal","oldVal","saveQueryToLocal","currentQuery","deleteCachedSparqlResults","currentQueryTab","tab","set","noTimer","yasrInnerContainer","element","document","getElementById","queryIsRunning","queryStartTime","countTimeouted","noLoaderTimer","addClass","currentTrackAlias","abortRequested","removeClass","$$phase","$apply","fixSizesOnHorizontalViewModeSwitch","verticalView","visibleWindowHeight","window","innerHeight","documentElement","clientHeight","body","orientationViewMode","viewMode","newHeight","querySelector","getBoundingClientRect","style","height","noPadding","minHeight","paddingRight","paddingLeft","editor","timer","yasr","container","resize","showHideEditor","foo","params","newRepo","yasrData","undefined","queryType","resultsCount","allResultsCount","sizeDelta","errorMessage","repositoryError","selectTab","runQuery","changePage","explain","executedQueryTab","getQueryType","isActiveRepoOntopType","explainRequested","currentTabConfig","resetCurrentTabConfig","lastRunQueryMode","getQueryMode","toggleSampleQueries","showSampleQueries","getSavedQueries","sampleQueries","collapse","width","msg","getExistingTabId","existingTabId","showModal","modalSelector","shared","savedQuery","getValue","findTabIndexByID","currentScope","hint","createElement","innerHTML","fontSize","color","backgroundColor","position","zIndex","newValue","elRect","appendChild","top","left","right","offsetWidth","parentNode","removeChild","pageSize","page","queryExists","saveTab","idx","loadTab","setValue","updateDownloadDropdown","$broadcast","output","outputType","customError","getException","setYasrResponse","textStatus","jqXhrOrErrorString","hasClass","click","TABS_STATE_CURRENT_ID","offset","allResultsCountExact","timeFinished","timeTook","customUpdateMessage","warningMessage","css","setInterval","showOrHideSaveAsDropDown","isOntop","isFedX","isActiveRepoFedXType","sameAsBtn","inferenceBtn","disabled","handleSameAsAndInferenceBtns","nocount","overrideSameAsInferenceAndNoCountIfNeeded","addNewTab","callback","tabName","isTabChangeOk","maxID","newID","newTab","TABS_STATE_MAXID","callbackArgs","prototype","slice","call","arguments","apply","abortCurrentQuery","abortQueryByAlias","editQuery","edit","okButtonText","queryModal","addNewSavedQuery","deleteQueryHttp","editSavedQuery","getNamespaces","namespacesLoading","getRepositoryNamespaces","usedPrefixes","namespace","namespaces","changePagination","addKnownPrefixes","stringify","querySelected","tabId","highlightNextTabChange","deleteQuery","savedQueryName","deleteSavedQuery","saveQuery","saveQueryHttp","changeViewMode","VIEW_MODE","focusQueryEditor","find","is","focus","getActiveRepositoryNoError","onbeforeunload","clearInterval","mouseup","event","target","has","getQueryID","attr","$saveAsDropDown","queryValid","header","remove","isNew","info","tabEvent","relatedTarget","colors","times","highlightFun","editQueryModal","deleteQueryModal","saveQueryModal","getResultsDescription","desc","currentPageEnd","min","getUpdateDescription","abs","getStaleWarningMessage","secondsAgo","round","bind","unbind","QuerySampleModalCtrl","queryEditorDirective","$location","callbackOnChange","restrict","link","attrs","nostorage","notabs","notoolbar","notoolbarSaved","notoolbarCopy","notoolbarInference","notoolbarSameAs","nostatus","norun","runButtonName","saveQueryAction","runQueryAction","explainQueryAction","goToNextTabAction","goToPreviousTabAction","requestedTab","first","fromTextArea","persistent","indentUnit","createShareLink","cursorHeight","sparql","showQueryButton","acceptHeaderGraph","acceptHeaderSelect","extraKeys","toastBuildIndex","allowHtml","toastError","on","clearTimeout","changesTimeout","hasError","toggleClass","hide","afterCopy","blur","originalExecuteQuery","executeQuery","originalGetUrlArguments","getUrlArguments","createCustomError","statusText","responseText","connectorProgressModal","drawButtons","yasqe","buttons","config","qType","cm","resultsContainer","empty","performance","endpoint","args","thisTabConfig","thisTabId","handlers","countCallback","dataOrJqXhr","setResultsCount","allCount","getTime","setQueryLimit","getValueWithoutComments","doExecute","getRepositorySize","repoSize","parseInt","command","hasSupport","connectorName","pluginName","setNewTabState","progressScope","$new","originalGetAjaxConfig","getAjaxConfig","getResponseHeader","contentType","response","executedQueryTabIdx","queryResultState","toBoolean","v","loadQueryIntoExistingOrNewTab","infer","onHandler","search","execute","addTabWithQueryIfNeeded","owner","getSavedQuery","updateRepositoryAndSecurity","signal","getAuthToken","callbackOrConfig","copyToClipboardQuery","openCopyToClipboardModal","url","location","protocol","host","pathname","param","createQueryURL","copyToClipboardResult","resultURI","goToVisual","paramsToParse","path","getUsedPrefixes","persistency","getQueryResultsAsFormat","downloadFormat","$wbDownload","val","auth","localStorage","getItem","submit","complete","setNewTabStateForThis","updateResultsCallback","repoSizeDiff","Number","responseJSON","max","resetResults","setResponse","drawQueryEditor","directive","sparqlTabDirective","$rootScope","template","$element","state","deleteTab","preventDefault","stopPropagation","shiftKey","selectedTabId","idForDelete","deleteTabByID","editCurrentTab","editCurrentlySelectedOnly","$show","$editableButtons","children","$el","currentTarget","$$currentValue","selectThisTab","JdbcListCtrl","JdbcRestService","getSqlConfigurations","jdbcConfigurations","getJdbcConfigurations","deleteConfiguration","deleteJdbcConfiguration","JdbcCreateCtrl","sqlTypes","oldValue","goBack","history","back","locationChangeListener","isPristine","confirm","removeEventListener","showBeforeunloadMessage","confirmExit","returnValue","addEventListener","isNewConfiguration","readOnly","setQueryFromTabConfig","resetYasqeYasr","setQuery","setDirty","getSuggestions","validateQuery","getColumnNames","columns","getColumnsTypeSuggestion","columnTypes","suggestedColumns","columnName","column_name","column_type","nullable","sparql_type","getCellContentSQL","plugin","sparqlVar","context","hasValidQuery","validateDefinition","containsUnknownColumns","validateColumns","getJdbcConfiguration","goToPage","getColumnsSuggestions","save","createNewJdbcConfiguration","updateJdbcConfiguration","hasPrecision","columnType","containsColumnsWithPrecision","some","el","hasScale","containsColumnsWithScale","isLiteral","containsNonLiteralColumnsOnly","every","selectColumnType","prevColumnType","column","columnSuggestion","deleteColumn","getPreview","successCallback","jqXhr","plugins","table","getCellContent","setPreviewResult","failCallback","sqlView","getNewSqlTablePreview","done","fail","getExistingSqlTablePreview","getTypeLabel","toUpperCase","JDBC_ENDPOINT","configuration","createConfiguration","method","column_names","limit","ajax","dataType","Accept","noCancelOnRouteChange"],"mappings":"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","file":"16.01bd96cfd64f6b616999.bundle.js","sourcesContent":["angular\n    .module('graphdb.framework.rest.connectors.service', [])\n    .factory('ConnectorsRestService', ConnectorsRestService);\n\nConnectorsRestService.$inject = ['$http'];\n\nconst CONNECTORS_ENDPOINT = 'rest/connectors';\n\nfunction ConnectorsRestService($http) {\n\n    return {\n        getConnectors,\n        initConnector,\n        hasConnector,\n        checkConnector\n    };\n\n    function getConnectors() {\n        return $http.get(CONNECTORS_ENDPOINT);\n    }\n\n    function initConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/options?prefix=${prefix}`);\n    }\n\n    function hasConnector(prefix) {\n        return $http.get(`${CONNECTORS_ENDPOINT}/existing?prefix=${prefix}`);\n    }\n\n    function checkConnector(data) {\n        return $http.post(`${CONNECTORS_ENDPOINT}/check`, data, {\n            headers: {\n                'Content-Type': 'text/plain'\n            }\n        });\n    }\n}\n","angular\n    .module('graphdb.framework.utils.notifications', [])\n    .factory('Notifications', Notifications);\n\nNotifications.$inject = ['toastr'];\n\nfunction Notifications(toastr) {\n    return {\n        showToastMessageWithDelay\n    };\n\n    /**\n     *  This method will show message with tiny delay and only after completion\n     *  of latter redirection to \"graphs-visualizations\" page will happen.\n     * @param {string} message The message to be displayed.\n     * @return {Promise<any>}\n     */\n    function showToastMessageWithDelay(message) {\n        return new Promise((r) => {\n            toastr.success(message);\n            setTimeout(r, 200);\n        });\n    }\n}\n","import 'angular/rest/rdf4j.repositories.rest.service';\nimport 'angular/rest/connectors.rest.service';\n\nconst modules = [\n    'graphdb.framework.rest.rdf4j.repositories.service',\n    'graphdb.framework.rest.connectors.service'\n];\n\nangular\n    .module('graphdb.framework.externalsync.controllers', modules)\n    .controller('ConnectorsCtrl', ConnectorsCtrl)\n    .controller('ExtendNewConnectorCtrl', ExtendNewConnectorCtrl)\n    .controller('CreateConnectorCtrl', CreateConnectorCtrl)\n    .controller('CreateProgressCtrl', CreateProgressCtrl)\n    .controller('DeleteConnectorCtrl', DeleteConnectorCtrl)\n    .filter('ceil', ceil);\n\nfunction jsonToFormData(data) {\n    const str = [];\n    Object.keys(data).forEach(function (key) {\n        str.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));\n    });\n    return str.join('&');\n}\n\nfunction toArrayMap(map) {\n    return _.map(map, function (value, key) {\n        return {key: key, value: value};\n    });\n}\n\nfunction fromArrayMap(arrayMap) {\n    return _.reduce(arrayMap, function (acc, value) {\n        if (value.key === '' && value.value === '') {\n            // empty pair, skip it\n        } else if (value.key === '') {\n            throw new Error('Key may not be empty with value \"' + value.value + '\"');\n        } else if (acc.hasOwnProperty(value.key)) {\n            throw new Error('Duplicate key ' + value.key);\n        } else {\n            acc[value.key] = value.value;\n        }\n        return acc;\n    }, {});\n}\n\nfunction mapCreateValuesToUiValues(values, options) {\n    for (let i = 0; i < options.length; i++) {\n        const option = options[i];\n        if (option.__type === 'StringArray') {\n            if (!values[option.__name]) {\n                values[option.__name] = [''];\n            }\n        } else if (option.__type === 'OptionArray') {\n            if (!values[option.__name]) { // values has no entry for this option\n                values[option.__name] = [];\n                const optionEl = {};\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'StringArray') {\n                        optionEl[child.__name] = [''];\n                    } else {\n                        optionEl[child.__name] = (!angular.isUndefined(child.__defaultValue) ? child.__defaultValue : '');\n                    }\n                }\n                values[option.__name].push(optionEl);\n            } else { // values already has en entry for this option\n                // Copies the default value for Boolean child options if no explicit value is set\n                for (let j = 0; j < option.__childOptions.length; j++) {\n                    const child = option.__childOptions[j];\n                    if (child.__type === 'Boolean') {\n                        for (let k = 0; k < values[option.__name].length; k++) {\n                            const valueK = values[option.__name][k];\n                            if (!valueK.hasOwnProperty([child.__name]) && angular.isDefined(child.__defaultValue)) {\n                                valueK[child.__name] = child.__defaultValue;\n                            }\n                        }\n                    }\n                }\n            }\n        } else if (option.__type === 'Map') {\n            if (!values[option.__name]) {\n                values[option.__name] = [];\n            } else {\n                values[option.__name] = toArrayMap(values[option.__name]);\n            }\n        } else if (option.__type === 'JsonString') {\n            if (values[option.__name]) {\n                values[option.__name] = angular.toJson(values[option.__name], 2);\n            }\n        } else {\n            if (angular.isUndefined(values[option.__name])) {\n                values[option.__name] = (!angular.isUndefined(option.__defaultValue) ? option.__defaultValue : '');\n            }\n        }\n    }\n\n    return values;\n}\n\nfunction _evaluateSparqlQuery(http, repository, query) {\n    return http.post('repositories/' + repository, jsonToFormData({query: query}),\n        {\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'Accept': 'application/sparql-results+json',\n                'X-GraphDB-Local-Consistency': 'updating'\n            }\n        });\n}\n\nfunction buildNamePrefix(prefix) {\n    return prefix.substring(0, prefix.length - 1) + '/instance#';\n}\n\nfunction createConnectorQuery(name, prefix, fields, options, reportError) {\n    // Returns a copy of the parameter obj sorted according to the order in options\n    function sortObject(obj, options) {\n        const newObject = {};\n        _.each(options, function (option) {\n            if (angular.isDefined(obj[option.__name])) {\n                if (option.__type === 'OptionArray') {\n                    newObject[option.__name] = [];\n                    _.each(obj[option.__name], function (childOption) {\n                        newObject[option.__name].push(sortObject(childOption, option.__childOptions));\n                    });\n                } else {\n                    newObject[option.__name] = angular.copy(obj[option.__name]);\n                }\n            }\n        });\n        return newObject;\n    }\n\n    const fcopy = sortObject(fields, options);\n\n    for (let i = 0; i < options.length; i++) {\n        try {\n            if (options[i].__type === 'Map') {\n                fcopy[options[i].__name] = fromArrayMap(fcopy[options[i].__name]);\n            } else if (options[i].__type === 'JsonString') {\n                fcopy[options[i].__name] = angular.fromJson(fcopy[options[i].__name]);\n            }\n        } catch (e) {\n            reportError(options[i].__label, e.message);\n            return null;\n        }\n    }\n\n    removeEmptyValues(fcopy);\n    //escapeValues(fields);\n    let finalString = '';\n    finalString += 'PREFIX :<' + prefix + '>\\n';\n    const namePrefix = buildNamePrefix(prefix);\n    finalString += 'PREFIX inst:<' + namePrefix + '>\\n';\n    finalString += 'INSERT DATA {\\n';\n    finalString += \"\\tinst:\" + name + \" :createConnector '''\\n\"; // eslint-disable-line quotes\n    finalString += angular.toJson(fcopy, 2);\n    finalString += \"\\n''' .\\n}\\n\"; // eslint-disable-line quotes\n    finalString = finalString.replace(/\\\\/g, '\\\\\\\\\\\\');\n    return finalString;\n}\n\nfunction createStatusQueryForIri(iri) {\n    const statusIri = iri.replace(/\\/instance#.+$/, '#connectorStatus');\n    let finalString = '';\n    finalString += 'SELECT ?status {\\n';\n    finalString += '\\t<' + iri + '> <' + statusIri + '> ?status';\n    finalString += '\\n}';\n    return finalString;\n}\n\nfunction createStatusQueryForAny(connectors) {\n    const connectorIris = _.map(connectors,\n        function (k) {\n            return '<' + k.value + 'connectorStatus' + '>';\n        }).join('|');\n\n    if (connectorIris) {\n        return 'SELECT ?connector ?status { ?connector ' + connectorIris + ' ?status }';\n    }\n\n    return null;\n}\n\nfunction repairConnectorQuery(name, prefix) {\n    const namePrefix = buildNamePrefix(prefix);\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:repairConnector \"\"\\n' +\n        '}';\n}\n\nfunction deleteConnectorQuery(name, prefix, force) {\n    const namePrefix = prefix.substring(0, prefix.length - 1) + \"/instance#\";\n    return 'PREFIX prefix:<' + prefix + '>\\n' +\n        'INSERT DATA {\\n' +\n        '\\t<' + namePrefix + name + '> prefix:dropConnector \"' + (force ? \"force\" : \"\") + '\"\\n' +\n        '}';\n}\n\nfunction removeEmptyValues(data) {\n    // remove empty values from array\n    if (Array.isArray(data)) {\n        data = _.filter(data, function (item) {\n            return item !== null && (!item.trim || item.trim() !== '');\n        });\n    }\n    // remove empty values from object values\n    Object.keys(data).forEach(function (key) {\n        if ((data[key] === '' || data[key] == null) && data[key] !== false) {\n            delete data[key];\n        } else if (typeof data[key] === 'object') {\n            data[key] = removeEmptyValues(data[key]);\n        }\n    });\n    return data;\n}\n\nfunction parseFirstBuildingResult(results) {\n    if (results.bindings) {\n        for (let i = 0; i < results.bindings.length; i++) {\n            try {\n                const statusObject = JSON.parse(results.bindings[i].status.value);\n                if (statusObject.status === 'BUILDING') {\n                    return {\n                        connector: results.bindings[i].connector.value,\n                        status: statusObject\n                    };\n                }\n            } catch (e) {\n                console.error(e); // eslint-disable-line no-console\n            }\n        }\n    }\n\n    return {};\n}\n\nConnectorsCtrl.$inject = ['$scope', '$http', '$repositories', '$modal', 'toastr', 'ModalService', '$q', 'RDF4JRepositoriesRestService', 'ConnectorsRestService'];\n\nfunction ConnectorsCtrl($scope, $http, $repositories, $modal, toastr, ModalService, $q, RDF4JRepositoriesRestService, ConnectorsRestService) {\n    $scope.loader = false;\n\n    $scope.controllers = [];\n\n    $scope.existing = {};\n\n    $scope.definitions = {};\n\n    $scope.getLoaderMessage = function () {\n        const timeSeconds = (Date.now() - $scope.loaderStartTime) / 1000;\n        const timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        let message = '';\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + '... ' + timeHuman;\n        } else {\n            message = 'Running operation...' + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += '\\n' + $scope.extraMessage;\n        }\n\n        return message;\n    };\n\n    $scope.setLoader = function (isRunning, progressMessage, extraMessage) {\n        if (isRunning) {\n            $scope.loader = true;\n            $scope.loaderStartTime = Date.now();\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n        } else {\n            $scope.loader = false;\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n        }\n    };\n\n    $scope.initConnector = function (connector) {\n        return ConnectorsRestService.initConnector(encodeURIComponent(connector.value))\n            .then(function (res) {\n                $scope.definitions[connector.key] = res.data;\n\n                return ConnectorsRestService.hasConnector(encodeURIComponent(connector.value))\n                    .then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n\n                    });\n            });\n    };\n\n    $scope.getConnectors = function () {\n        if (!$scope.canWriteActiveRepo()) {\n            return;\n        }\n\n        $scope.setLoader(true, 'Fetching connectors', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n\n        ConnectorsRestService.getConnectors()\n            .then(function (res) {\n                $scope.connectors = Object.keys(res.data).map(function (key) {\n                    return {key: key, value: res.data[key]};\n                });\n\n                $q.all(_.map($scope.connectors, function (connector) {\n                    return $scope.initConnector(connector);\n                })).finally(function () {\n                    resetProgress();\n\n                    const query = createStatusQueryForAny($scope.connectors);\n\n                    if (query) {\n                        evaluateSparqlQuery(query)\n                            .then(function (res) {\n                                const status = parseFirstBuildingResult(res.data.results);\n                                if (status.connector) {\n                                    // has a building connector, open progress indicator\n                                    const d = status.connector.split(/#/);\n                                    d[0] = d[0].replace(/\\/instance$/, '#');\n                                    showProgress(d[0], d[1]);\n                                }\n                            })\n                            .finally(function () {\n                                $scope.setLoader(false);\n                            });\n                    } else {\n                        $scope.setLoader(false);\n                    }\n                });\n            }).catch(function (e) {\n                $scope.setLoader(false);\n                toastr.error(getError(e), 'Could not get connectors');\n            });\n\n        $scope.existing = {};\n    };\n\n    $scope.getOptions = function (connector) {\n        return $scope.definitions[connector.key];\n    };\n\n    $scope.isEmpty = function (value) {\n        return angular.isObject(value) && Object.keys(value).length === 0;\n    };\n\n    $scope.toPrettyJson = function (value) {\n        return angular.toJson(value, 2);\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, $scope.getConnectors);\n\n    $scope.$watch(function () {\n        return $repositories.getActiveLocation();\n    }, $scope.getConnectors);\n\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function resetProgress(repair) {\n        $scope.beingBuiltConnector = {\n            percentDone: 0,\n            status: {\n                processedEntities: 0,\n                estimatedEntities: 0,\n                indexedEntities: 0,\n                entitiesPerSecond: 0\n            },\n            actionName: repair ? 'Repairing' : 'Creating',\n            waitOnRepairStartOnce: !!repair,\n            eta: '-',\n            inline: false,\n            iri: null\n        };\n    }\n\n    function openProgressModal(prefix, name, repair) {\n        resetProgress(repair);\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: false,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.modalInstance.dismiss('cancel');\n            }\n        });\n\n        $scope.beingBuiltConnector.modalInstance = $modal.open({\n            templateUrl: 'pages/connectorProgress.html',\n            controller: 'CreateProgressCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            scope: $scope\n        });\n\n        return $scope.beingBuiltConnector.modalInstance;\n    }\n\n    function showProgress(prefix, name) {\n        resetProgress();\n\n        $.extend($scope.beingBuiltConnector, {\n            iri: buildNamePrefix(prefix) + name,\n            name: name,\n            inline: true,\n            doneCallback: function () {\n                $scope.beingBuiltConnector.inline = false;\n            }\n        });\n    }\n\n    function executeCreate(connector, obj, errorCallback) {\n        const modal = openProgressModal(connector.value, obj.name, false);\n        RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: obj.query}))\n            .then(function () {\n                ConnectorsRestService.getConnectors().then(function () {\n                    ConnectorsRestService.hasConnector(encodeURIComponent(connector.value)).then(function (res) {\n                        $scope.existing[connector.key] = res.data;\n                    });\n                });\n                toastr.success('Created connector ' + obj.name);\n            }, function (err) {\n                toastr.error(getError(err));\n                errorCallback();\n            }).finally(function () {\n                modal.dismiss('cancel');\n            });\n    }\n\n    $scope.copyConnector = function (connector, values) {\n        let newValues;\n        if (!angular.isUndefined(values)) {\n            newValues = angular.copy(values);\n            newValues.name = newValues.name + '-copy';\n        }\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(newValues) ? {name: '', values: {}} : newValues;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.newConnector = function (connector, values) {\n        const modal = $modal.open({\n            templateUrl: 'pages/createConnector.html',\n            controller: 'CreateConnectorCtrl',\n            size: 'lg',\n            backdrop: 'static',\n            resolve: {\n                connector: function () {\n                    return connector;\n                },\n                values: function () {\n                    return angular.isUndefined(values) ? {name: '', values: {}} : values;\n                },\n                options: function () {\n                    return $scope.getOptions(connector);\n                }\n            }\n        });\n\n        modal.result.then(function (obj) {\n            executeCreate(connector, obj, function () {\n                obj.skipConversion = true;\n                $scope.newConnector(connector, obj);\n            });\n        });\n    };\n\n    $scope.repair = function (inst, type) {\n        ModalService.openSimpleModal({\n            title: 'Confirm repair',\n            message: 'Are you sure you want to repair this connector?<br>Note that repair means delete + recreate with the same settings.',\n            warning: true\n        }).result\n            .then(function () {\n                const modal = openProgressModal(type.value, inst.name, true);\n\n                const query = repairConnectorQuery(inst.name, type.value);\n\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        toastr.success('Repaired connector ' + inst.name);\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function () {\n                        modal.dismiss('cancel');\n                    });\n            });\n    };\n\n    $scope.delete = function (inst, type) {\n        const isExternal = type.key.indexOf(\"Elastic\") >= 0 || type.key.indexOf(\"Solr\") >= 0;\n\n        $modal.open({\n            templateUrl: 'js/angular/externalsync/templates/deleteConnector.html',\n            controller: 'DeleteConnectorCtrl',\n            resolve: {\n                type: function () {\n                    return type.key;\n                },\n                isExternal: function () {\n                    return isExternal;\n                }\n            }\n        }).result\n            .then(function(force) {\n                $scope.setLoader(true, 'Deleting connector ' + inst.name, 'This is usually a fast operation but it might take a while.');\n\n                const query = deleteConnectorQuery(inst.name, type.value, force);\n                RDF4JRepositoriesRestService.addStatements($repositories.getActiveRepository(), jsonToFormData({update: query}))\n                    .then(function () {\n                        ConnectorsRestService.getConnectors().then(function () {\n                            ConnectorsRestService.hasConnector(encodeURIComponent(type.value)).then(function (res) {\n                                $scope.existing[type.key] = res.data;\n                            });\n                        });\n                        if (force) {\n                            toastr.success(\"Deleted (with force) connector \" + inst.name);\n                            if (isExternal) {\n                                toastr.warning(\"You may have to remove the index manually from \" + type.key);\n                            }\n                        } else {\n                            toastr.success(\"Deleted connector \" + inst.name);\n                        }\n                    }, function (err) {\n                        toastr.error(getError(err));\n                    }).finally(function() {\n                        $scope.setLoader(false);\n                    });\n            });\n    };\n\n    $scope.viewQuery = function (connector, inst) {\n        $modal.open({\n            templateUrl: 'pages/viewQuery.html',\n            controller: 'ViewQueryCtrl',\n            resolve: {\n                query: function () {\n                    const options = $scope.getOptions(connector);\n                    return createConnectorQuery(inst.name, connector.value,\n                        mapCreateValuesToUiValues(inst.values, options), options);\n                }\n            }\n        });\n    };\n}\n\nDeleteConnectorCtrl.$inject = ['$scope', '$modalInstance', 'type', 'isExternal'];\nfunction DeleteConnectorCtrl($scope, $modalInstance, type, isExternal) {\n    $scope.force = false;\n    $scope.type = type;\n    $scope.isExternal = isExternal;\n\n    $scope.ok = function () {\n        $modalInstance.close($scope.force);\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss();\n    };\n}\n\nExtendNewConnectorCtrl.$inject = ['$scope', '$modalInstance', 'connector', '$modal', 'toastr'];\nfunction ExtendNewConnectorCtrl($scope, $modalInstance, connector, $modal, toastr) {\n\n    $scope.connector = connector;\n\n    $scope.addField = function (index, optionName) {\n        const newField = angular.copy($scope.defaultValues[optionName][0]);\n        $scope.values[optionName].splice(index + 1, 0, newField);\n    };\n\n    $scope.addOption = function (index, array) {\n        array.splice(index + 1, 0, '');\n    };\n\n    $scope.deleteOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    $scope.addMapOption = function (index, array) {\n        array.splice(index + 1, 0, {key: '', value: ''});\n    };\n\n    $scope.deleteMapOption = function (index, array) {\n        array.splice(index, 1);\n    };\n\n    function toQuery() {\n        return createConnectorQuery($scope.name, connector.value, $scope.values, $scope.options,\n            function (label, error) {\n                toastr.error(error, label);\n            });\n    }\n\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            const query = toQuery();\n\n            if (query) {\n                $modalInstance.close({name: $scope.name, values: $scope.values, options: $scope.options, query: query});\n            }\n        }\n    };\n\n    $scope.viewQuery = function () {\n        const query = toQuery();\n\n        if (query) {\n            $modal.open({\n                templateUrl: 'pages/viewQuery.html',\n                controller: 'ViewQueryCtrl',\n                resolve: {\n                    query: function () {\n                        return query;\n                    }\n                }\n            });\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n\nCreateConnectorCtrl.$inject = ['$scope', '$controller', '$http', '$modalInstance', 'connector', '$modal', 'values', 'options'];\n\nfunction CreateConnectorCtrl($scope, $controller, $http, $modalInstance, connector, $modal, values, options) {\n    angular.extend(this, $controller('ExtendNewConnectorCtrl', {\n        $scope: $scope,\n        $modalInstance: $modalInstance,\n        connector: connector,\n        $modal: $modal\n    }));\n    $scope.values = values.values;\n    $scope.options = options;\n    $scope.name = values.name;\n    if (!values.skipConversion) {\n        $scope.values = mapCreateValuesToUiValues($scope.values, $scope.options);\n    }\n    $scope.defaultValues = angular.copy($scope.values);\n}\n\n// Note that this is a fancy controller: it's used both for a modal and for a directive.\n// This means you can't rely on custom injection through resolve in the modal and the scope\n// must be shared with the main connectors controller.\nCreateProgressCtrl.$inject = ['$scope', '$interval', '$http', '$repositories'];\n\nfunction CreateProgressCtrl($scope, $interval, $http, $repositories) {\n    function evaluateSparqlQuery(query) {\n        return _evaluateSparqlQuery($http, $repositories.getActiveRepository(), query);\n    }\n\n    function initProgress() {\n        const query = createStatusQueryForIri($scope.beingBuiltConnector.iri);\n\n        // reset iri value so that watch will fire again when we do something with the same connector\n        $scope.beingBuiltConnector.iri = null;\n\n        $scope.progressInterval = $interval(function () {\n            function getFirstStatusFromResult(results) {\n                if (results.bindings) {\n                    if (results.bindings.length > 0) {\n                        try {\n                            return JSON.parse(results.bindings[0].status.value);\n                        } catch (e) {\n                            console.error(e); // eslint-disable-line no-console\n                        }\n                    }\n                }\n\n                return {};\n            }\n\n            evaluateSparqlQuery(query)\n                .then(function (res) {\n                    const status = getFirstStatusFromResult(res.data.results);\n                    if (status.status === 'BUILDING') {\n                        $scope.beingBuiltConnector.status = status;\n                        $scope.beingBuiltConnector.percentDone = (100 * status.processedEntities / status.estimatedEntities).toFixed(0);\n                        $scope.beingBuiltConnector.eta = $scope.getHumanReadableSeconds(status.etaSeconds);\n                        $scope.beingBuiltConnector.actionName = status.repair ? 'Repairing' : 'Creating';\n                        $scope.beingBuiltConnector.waitOnRepairStartOnce = false;\n                    } else if (status.status === 'BUILT' && !$scope.beingBuiltConnector.waitOnRepairStartOnce) {\n                        // done\n                        $interval.cancel($scope.progressInterval);\n                        if ($scope.beingBuiltConnector.doneCallback) {\n                            $scope.beingBuiltConnector.doneCallback();\n                        }\n                    }\n                });\n        }, 1000);\n\n        $scope.$on('$destroy', function () {\n            $interval.cancel($scope.progressInterval);\n        });\n    }\n\n    $scope.beingBuiltConnector = $scope.beingBuiltConnector || {};\n\n    // for modal instance we get the iri before hand and can start progress now\n    if (!$scope.beingBuiltConnector.inline && $scope.beingBuiltConnector.iri) {\n        initProgress();\n    }\n\n    // for inline progress we need to watch for the iri value\n    $scope.$watch('beingBuiltConnector.iri', function (value) {\n        if ($scope.beingBuiltConnector.inline && value) {\n            initProgress();\n        }\n    });\n}\n\nfunction ceil() {\n    return function (input) {\n        return Math.ceil(input);\n    };\n}\n","import 'angular/utils/local-storage-adapter';\nimport 'angular/rest/sparql.rest.service';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.controllers', [\n        'graphdb.framework.utils.localstorageadapter',\n        'graphdb.framework.rest.sparql.service'\n    ])\n    .controller('QueryEditorCtrl', QueryEditorCtrl)\n    .controller('QuerySampleModalCtrl', QuerySampleModalCtrl);\n\nQueryEditorCtrl.$inject = ['$scope', '$timeout', 'toastr', '$repositories', '$modal', 'ModalService', 'SparqlRestService', '$filter', '$window', '$jwtAuth', 'RDF4JRepositoriesRestService', 'MonitoringRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction QueryEditorCtrl($scope, $timeout, toastr, $repositories, $modal, ModalService, SparqlRestService, $filter, $window, $jwtAuth, RDF4JRepositoriesRestService, MonitoringRestService, LocalStorageAdapter, LSKeys) {\n    const defaultTabConfig = {\n        id: \"1\",\n        name: '',\n        query: 'select * where { \\n' +\n        '\\t?s ?p ?o .\\n' +\n        '} limit 100 \\n',\n        inference: true,\n        sameAs: true\n    };\n\n    let principal = $jwtAuth.getPrincipal();\n    let checkQueryIntervalId;\n    if (principal) {\n        initTabs($scope, principal);\n        // principal is not yet set, wait for its initialization\n    } else {\n        $scope.$on('securityInit', function (scope) {\n            principal = $jwtAuth.getPrincipal();\n            initTabs(scope.currentScope, principal);\n        });\n    }\n\n    function initTabs(scope, principal) {\n        defaultTabConfig.inference = principal.appSettings.DEFAULT_INFERENCE;\n        defaultTabConfig.sameAs = principal.appSettings.DEFAULT_SAMEAS;\n\n        scope.skipCountQuery = !principal.appSettings.EXECUTE_COUNT;\n        scope.ignoreSharedQueries = principal.appSettings.IGNORE_SHARED_QUERIES;\n        scope.tabsData = scope.tabs = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        scope.$watchCollection('[currentQuery.inference, currentQuery.sameAs]', function (newVal, oldVal, scope) {\n            saveQueryToLocal(scope.currentQuery);\n        });\n\n        scope.$on('repositoryIsSet', deleteCachedSparqlResults);\n    }\n\n    this.hint =  document.createElement(\"span\");\n    this.hint.innerHTML = \"Hint: \\\"abC\\\" matches \\\"abC*\\\", \\\"ab c*\\\" and \\\"ab-c*\\\"\";\n    this.hint.style.fontSize = \"12px\";\n    this.hint.style.color = \"gray\";\n    this.hint.style.backgroundColor = \"white\";\n    this.hint.style.position = \"absolute\";\n    this.hint.style.zIndex = \"3\";\n    this.hint.style.paddingLeft = 12 + \"px\";\n\n    $scope.$watch(function() {\n        return angular.element('.CodeMirror-hints').length;\n    }, (newValue) => {\n        if (newValue) {\n            const elRect = angular.element('.CodeMirror-hints')[0].getBoundingClientRect();\n            document.body.appendChild(this.hint);\n            this.hint.style.top = elRect.top - 20 + \"px\";\n            this.hint.style.left = elRect.right - this.hint.offsetWidth - 12 +  \"px\";\n        } else {\n            this.hint && this.hint.parentNode && this.hint.parentNode.removeChild(this.hint);\n        }\n    });\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 1000,\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0\n        };\n    };\n\n    $scope.queryExists = false;\n\n    $scope.resetCurrentTabConfig();\n\n    // query tab operations\n    $scope.saveTab = saveTab;\n    $scope.loadTab = loadTab;\n    $scope.addNewTab = addNewTab;\n    $scope.isTabChangeOk = isTabChangeOk;\n\n    // query operations\n    $scope.runQuery = runQuery;\n    $scope.abortCurrentQuery = abortCurrentQuery;\n    $scope.editQuery = editQuery;\n    $scope.getNamespaces = getNamespaces;\n    $scope.changePagination = changePagination;\n    $scope.toggleSampleQueries = toggleSampleQueries;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.getExistingTabId = getExistingTabId;\n    $scope.querySelected = querySelected;\n    $scope.deleteQuery = deleteQuery;\n    $scope.deleteQueryHttp = deleteQueryHttp;\n    $scope.saveQuery = saveQuery;\n    $scope.saveQueryHttp = saveQueryHttp;\n    $scope.saveQueryToLocal = saveQueryToLocal;\n\n    $scope.setLoader = setLoader;\n    $scope.getLoaderMessage = getLoaderMessage;\n\n    // query editor and results orientation\n    $scope.fixSizesOnHorizontalViewModeSwitch = fixSizesOnHorizontalViewModeSwitch;\n    $scope.changeViewMode = changeViewMode;\n    $scope.showHideEditor = showHideEditor;\n    $scope.focusQueryEditor = focusQueryEditor;\n    $scope.orientationViewMode = LocalStorageAdapter.get(LSKeys.VIEW_MODE) ? LocalStorageAdapter.get(LSKeys.VIEW_MODE) === \"true\" : true;\n    $scope.viewMode = 'none';\n\n    // start of repository actions\n    // FIXME: do we need this??\n    // $scope.getActiveRepository();\n    $scope.getActiveRepository = function () {\n        // same as getActiveRepository() but takes into account repo errors\n        return $repositories.getActiveRepository();\n    };\n\n    $scope.getActiveRepositoryNoError = function () {\n        if (!$scope.repositoryError) {\n            return $repositories.getActiveRepository();\n        }\n    };\n\n    function saveQueryToLocal(currentQueryTab) {\n        $scope.tabs.forEach(function (tab, index) {\n            if (tab.id === currentQueryTab.id) {\n                $scope.tabs[index].query = currentQueryTab.query;\n                $scope.tabs[index].inference = currentQueryTab.inference;\n                $scope.tabs[index].sameAs = currentQueryTab.sameAs;\n            }\n        });\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage, noTimer) {\n        const yasrInnerContainer = angular.element(document.getElementById(\"yasr-inner\"));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            $scope.noLoaderTimer = noTimer;\n            yasrInnerContainer.addClass(\"hide\");\n        } else {\n            $scope.progressMessage = \"\";\n            $scope.extraMessage = \"\";\n            $scope.noLoaderTimer = false;\n            $scope.currentTrackAlias = null;\n            $scope.abortRequested = false;\n            yasrInnerContainer.removeClass(\"hide\");\n        }\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function getLoaderMessage() {\n        const timeSeconds = (Date.now() - $scope.queryStartTime) / 1000;\n        let timeHuman = \"\";\n        let message = \"\";\n\n        if (!$scope.noLoaderTimer) {\n            timeHuman = $scope.getHumanReadableSeconds(timeSeconds);\n        }\n\n        if ($scope.progressMessage) {\n            message = $scope.progressMessage + \"... \" + timeHuman;\n        } else {\n            message = \"Running operation... \" + timeHuman;\n        }\n        if ($scope.extraMessage && timeSeconds > 10) {\n            message += \"\\n\" + $scope.extraMessage;\n        }\n\n        return message;\n    }\n\n    // start of query editor results orientation operations\n    function fixSizesOnHorizontalViewModeSwitch(verticalView) {\n        function visibleWindowHeight() {\n            return window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight || 0;\n        }\n\n        if (!$scope.orientationViewMode) {\n            $scope.noPadding = {paddingRight: 15, paddingLeft: 0};\n\n            // window.editor is undefined if no repo is selected\n            if (window.editor && document.querySelector('.CodeMirror-wrap')) {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                document.getElementById('yasr').style.minHeight = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                let timer;\n                if (verticalView) {\n                    timer = $timeout(function () {\n                        $scope.fixSizesOnHorizontalViewModeSwitch(verticalView);\n                    }, 100);\n                } else {\n                    timer = $timeout($scope.fixSizesOnHorizontalViewModeSwitch, 100);\n                }\n\n                $scope.$on(\"$destroy\", function () {\n                    $timeout.cancel(timer);\n                });\n            }\n        } else {\n            if ($scope.viewMode === 'yasr') {\n                let newHeight = visibleWindowHeight() - (document.querySelector('.CodeMirror-wrap').getBoundingClientRect().top);\n                newHeight -= 40;\n                document.querySelector('.CodeMirror-wrap').style.height = newHeight + 'px';\n                //window.editor.refresh();\n            } else {\n                $scope.noPadding = {};\n                document.querySelector('.CodeMirror-wrap').style.height = '';\n                //window.editor.refresh();\n            }\n            document.getElementById('yasr').style.minHeight = '';\n        }\n        if (window.yasr && window.yasr.container) {\n            $timeout(function () {\n                window.yasr.container.resize();\n            }, 100);\n        }\n    }\n\n    if (!$scope.orientationViewMode) {\n        showHideEditor();\n    }\n\n    function changeViewMode() {\n        $scope.viewMode = 'none';\n        $scope.orientationViewMode = !$scope.orientationViewMode;\n        LocalStorageAdapter.set(LSKeys.VIEW_MODE, $scope.orientationViewMode);\n        fixSizesOnHorizontalViewModeSwitch();\n    }\n\n    function showHideEditor() {\n        fixSizesOnHorizontalViewModeSwitch(true);\n    }\n\n    function focusQueryEditor() {\n        if (!angular.element(document).find('.editable-input').is(\":focus\")) {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n    }\n\n    // end of query editor results orientation operations\n\n    function deleteCachedSparqlResults(foo, params) {\n        if (params.newRepo) {\n            $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE);\n            $scope.tabsData.forEach(function (item) {\n                item.yasrData = undefined;\n                item.queryType = undefined;\n                item.resultsCount = 0;\n                item.allResultsCount = 0;\n                item.sizeDelta = undefined;\n            });\n\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n            $scope.tabs = $scope.tabsData;\n\n            // The repository is changed. Remove error messages as well, if any\n            $scope.currentQuery = {};\n            $scope.errorMessage = null;\n            $scope.repositoryError = null;\n        }\n    }\n\n    function selectTab(id) {\n        $timeout(function () {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }, 0);\n    }\n\n    window.onbeforeunload = function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n    };\n\n    $scope.$on('$destroy', function () {\n        if ($scope.currentQuery) {\n            $scope.saveTab($scope.currentQuery.id);\n        }\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n        clearInterval(checkQueryIntervalId);\n    });\n\n    // start of query operations\n    function runQuery(changePage, explain) {\n        $scope.executedQueryTab = $scope.currentQuery;\n        if (explain) {\n            if (!(window.editor.getQueryType() === 'SELECT' || window.editor.getQueryType() === 'CONSTRUCT')) {\n                toastr.warning('Explain only works with SELECT or CONSTRUCT queries.');\n                return;\n            }\n\n            if ($repositories.isActiveRepoOntopType()) {\n                toastr.warning('Explain not supported for Virtual repositories.');\n                return;\n            }\n        }\n\n        $scope.explainRequested = explain;\n        if (!$scope.queryIsRunning) {\n            if (changePage) {\n                $scope.currentTabConfig.resultsCount = 0;\n            } else {\n                $scope.resetCurrentTabConfig();\n            }\n\n            $scope.lastRunQueryMode = window.editor.getQueryMode();\n\n            if ($scope.lastRunQueryMode === 'update' && $repositories.isActiveRepoOntopType()) {\n                toastr.warning('Updates are not supported for Virtual repositories.');\n                return;\n            }\n\n            setLoader(true, $scope.lastRunQueryMode === 'update' ? 'Executing update' : 'Evaluating query');\n            if ($scope.viewMode !== 'none') {\n                $scope.viewMode = 'none';\n                if ($scope.orientationViewMode) {\n                    $scope.fixSizesOnHorizontalViewModeSwitch();\n                }\n                const timer = $timeout(window.editor.query, 500);\n                $scope.$on('$destroy', function () {\n                    $timeout.cancel(timer);\n                });\n            } else {\n                window.editor.query();\n            }\n        }\n    }\n\n    function abortCurrentQuery() {\n        MonitoringRestService.abortQueryByAlias($scope.currentTrackAlias)\n            .success(function () {\n                $scope.abortRequested = true;\n            });\n    }\n\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        $scope.namespacesLoading = true;\n\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                $scope.namespacesLoading = false;\n            });\n    }\n\n    function changePagination() {\n        runQuery(true, $scope.explainRequested);\n    }\n\n    $scope.$on(\"$destroy\", function () {\n        clearInterval(checkQueryIntervalId);\n        window.editor = null;\n        window.yasr = null;\n    });\n\n    function toggleSampleQueries() {\n        $scope.showSampleQueries = !$scope.showSampleQueries;\n        if ($scope.showSampleQueries) {\n            SparqlRestService.getSavedQueries()\n                .success(function (data) {\n                    $scope.sampleQueries = data;\n                    $('#sampleQueriesCollapse').collapse('show').width('300px');\n                })\n                .error(function (data) {\n                    const msg = getError(data);\n                    toastr.error(msg, 'Error! Could not get saved queries');\n                });\n        } else {\n            $('#sampleQueriesCollapse').collapse('hide');\n        }\n    }\n\n    // Hide the sample queries when the user clicks somewhere else in the UI.\n    $(document).mouseup(function (event) {\n        const container = $('#sampleQueriesCollapse');\n        if (!container.is(event.target) // if the target of the click isn't the container..\n            && container.has(event.target).length === 0 //... nor a descendant of the container\n            && $scope.showSampleQueries) {\n            toggleSampleQueries();\n        }\n    });\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    function querySelected(query) {\n        const tabId = getExistingTabId(query);\n        $scope.toggleSampleQueries();\n\n        if ($scope.isTabChangeOk(false)) {\n            $scope.highlightNextTabChange = true;\n            if (!angular.isDefined(tabId)) {\n                $scope.addNewTab(null, query.name, query.body);\n            } else {\n                selectTab(tabId);\n            }\n        }\n    }\n\n    function getExistingTabId(query) {\n        let existingTabId = undefined;\n        $scope.tabsData.forEach(function (item) {\n            if (item.name === query.name && item.query === query.body) {\n                existingTabId = item.id;\n                return item;\n            }\n        });\n        return existingTabId;\n    }\n\n    function editQuery(query) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: 'Edit Saved Query: \"' + query.name + '\"',\n                        query: query,\n                        edit: true,\n                        okButtonText: 'Save'\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (queryModal) {\n            const data = {\n                name: queryModal.name,\n                body: queryModal.body,\n                shared: queryModal.shared\n            };\n            if (query.name !== queryModal.name) {\n                SparqlRestService.addNewSavedQuery(data)\n                    .success(function () {\n                        $scope.deleteQueryHttp(query.name, true);\n                    })\n                    .error(function (data) {\n                        const msg = getError(data);\n                        toastr.error(msg, 'Error! Cannot edit saved query');\n                    });\n            } else {\n                SparqlRestService.editSavedQuery(data)\n                    .success(function () {\n                        $('#editQueryContainer').modal('hide');\n                        $scope.toggleSampleQueries();\n                        toastr.success('Saved query ' + query.name + ' was edited.');\n                    })\n                    .error(function (data) {\n                        const msg = getError(data);\n                        toastr.error(msg, 'Error! Cannot edit Saved query');\n                    });\n            }\n        });\n    }\n\n    function deleteQueryHttp(savedQueryName, edit) {\n        SparqlRestService.deleteSavedQuery(savedQueryName)\n            .success(function () {\n                $scope.toggleSampleQueries();\n                if (!edit) {\n                    toastr.success('Saved query: ' + savedQueryName + ' was deleted.');\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Cannot delete saved query');\n            });\n    }\n\n    function deleteQuery(savedQueryName) {\n        ModalService.openSimpleModal({\n            title: 'Confirm',\n            message: 'Are you sure you want to delete the saved query ' + '\\'' + savedQueryName + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                $scope.deleteQueryHttp(savedQueryName);\n            });\n    }\n\n    function saveQueryHttp(query) {\n        SparqlRestService.addNewSavedQuery(query)\n            .success(function () {\n                toastr.success('Saved query ' + query.name + ' was saved.');\n            })\n            .error(function (data) {\n                let msg = getError(data);\n                toastr.error(msg, 'Error! Cannot create saved query');\n                // TODO: This condition will always be true\n                if (msg = \"Query '\" + query.name + \"' already exists!\") {\n                    query.query = query.body;\n                    const queryExists = true;\n                    $scope.saveQuery(query, queryExists);\n                }\n            });\n    }\n\n    function saveQuery(query, queryExists) {\n        const modalInstance = $modal.open({\n            templateUrl: 'js/angular/core/directives/queryeditor/templates/query-sample.html',\n            controller: 'QuerySampleModalCtrl',\n            resolve: {\n                data: function () {\n                    return {\n                        title: 'Create New Saved Query',\n                        query: {name: query.name, body: query.query, shared: query.shared},\n                        edit: false,\n                        okButtonText: 'Create',\n                        queryExists: queryExists\n                    };\n                }\n            }\n        });\n\n        modalInstance.result.then(function (query) {\n            $scope.saveQueryHttp(query);\n        }, function () {\n        });\n    }\n\n    // end of query operations\n\n    function showModal(modalSelector) {\n        return function (name, query, shared) {\n            $scope.savedQuery = {\n                name: name,\n                query: query || window.editor.getValue(),\n                shared: shared\n            };\n            $(modalSelector).modal('show');\n        };\n    }\n\n\n    // start of query tab operations\n    function findTabIndexByID(id) {\n        for (let i = 0; i < $scope.tabsData.length; i++) {\n            const tab = $scope.tabsData[i];\n            if (tab.id === id) {\n                return i;\n            }\n        }\n    }\n\n    function saveTab(id) {\n        const idx = findTabIndexByID(id);\n        // Tab was deleted, don't try to save it's state\n        if (idx === undefined) {\n            return {};\n        }\n        const tab = $scope.tabsData[idx];\n        //tab.query = window.editor.getValue();\n        $scope.saveQueryToLocal(tab);\n        return tab;\n    }\n\n    let maxID = LocalStorageAdapter.get(LSKeys.TABS_STATE_MAXID) || 1;\n\n    function addNewTab(callback, tabName, savedQuery) { // optional callback to call after tab has been added\n        if (!isTabChangeOk(true)) {\n            return;\n        }\n        let defaultTabConfig;\n        if (tabName || savedQuery) {\n            defaultTabConfig = {\n                id: \"1\",\n                name: tabName,\n                query: savedQuery,\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        } else {\n            defaultTabConfig = {\n                id: \"1\",\n                name: '',\n                query: 'select * where { \\n' +\n                '\\t?s ?p ?o .\\n' +\n                '} limit 100 \\n',\n                inference: principal.appSettings.DEFAULT_INFERENCE,\n                sameAs: principal.appSettings.DEFAULT_SAMEAS\n            };\n        }\n\n        maxID++;\n        const newID = '' + maxID;\n        $scope.tabsData = $scope.tabs;\n\n        const newTab = defaultTabConfig;\n        newTab.id = newID;\n\n        $scope.tabsData.push(newTab);\n\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_MAXID, maxID);\n        LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabsData);\n        const callbackArgs = Array.prototype.slice.call(arguments, 1); // skip one argument, i.e. the callback itself\n        $timeout(function () {\n            $scope.$apply();\n            selectTab(newID);\n            if (callback) {\n                callback.apply(this, callbackArgs);\n            }\n        }, 0);\n        $scope.tabs = $scope.tabsData;\n    }\n\n    function loadTab(id) {\n        $scope.tabsData = LocalStorageAdapter.get(LSKeys.TABS_STATE) || [defaultTabConfig];\n\n        // find available tab\n        const idx = findTabIndexByID(id);\n        const tab = $scope.tabsData[idx];\n\n        if (tab.yasrData) {\n            setLoader(true, 'Rendering results', null, true);\n        }\n\n        // set query in editor available on the current tab\n        $timeout(function () {\n            if ($scope.currentQuery.query === '') {\n                $scope.currentQuery.query = \" \";\n            }\n            $timeout(function () {\n                window.editor.setValue($scope.currentQuery.query);\n                $scope.yasr.updateDownloadDropdown();\n                $scope.$broadcast('tabLoaded', $scope.currentQuery.id);\n\n                // set query results in query results sections after\n                // previous query execution. Yasr response rendering depends on the\n                // query type of window.editor!\n                $scope.yasr.options.output = tab.outputType; // this may be undefined, that's fine!\n                if (tab.yasrData) {\n                    if (tab.yasrData.customError) {\n                        // Our injected custom (not real HTTP) error\n                        $scope.yasr.results = {\n                            getException: function () {\n                                return tab.yasrData.customError;\n                            }\n                        };\n                        setLoader(false);\n                    } else {\n                        // Real YASR result\n                        $timeout(function () {\n                            $scope.setYasrResponse(tab.yasrData, tab.textStatus, tab.jqXhrOrErrorString);\n                            setLoader(false);\n                            if ($('.yasr_btnGroup li:nth-child(2)').hasClass(\"active\")) {\n                                $timeout(function () {\n                                    $('.yasr_btnGroup li:nth-child(2) a').get(0).click();\n                                }, 0);\n                            }\n                        }, 0);\n                    }\n                }\n            }, 0);\n        }, 0);\n\n\n        // persist current tab id in local storage\n        LocalStorageAdapter.set(LSKeys.TABS_STATE_CURRENT_ID, id);\n\n        $scope.currentQuery = tab;\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.allResultsCountExact = tab.allResultsCountExact;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.currentTabConfig.customUpdateMessage = tab.customUpdateMessage;\n            $scope.currentTabConfig.errorMessage = tab.errorMessage;\n            $scope.currentTabConfig.warningMessage = tab.warningMessage;\n\n            $scope.$apply();\n        }, 0);\n\n        //Remove paddign of yasr so it will be aligned with sparql editor\n        $('#yasr').css('padding', '0');\n\n        if (!checkQueryIntervalId) {\n            checkQueryIntervalId = setInterval(showOrHideSaveAsDropDown, 200);\n        }\n        overrideSameAsInferenceAndNoCountIfNeeded();\n    }\n\n    function getQueryID(element) {\n        return $(element).attr('data-id');\n    }\n\n    function showOrHideSaveAsDropDown() {\n        // If selected tab has results and query in editor controller is invalid save as\n        // dropdown menu will be removed and on fixing query latter will be added\n        if ($scope.currentTabConfig.resultsCount >= 0) {\n            const $saveAsDropDown = $('.saveAsDropDown');\n            if ($saveAsDropDown.length > 0 && !window.editor.queryValid) {\n                yasr.header.find('.saveAsDropDown').remove();\n            } else if ($saveAsDropDown.length === 0 && window.editor.queryValid) {\n                yasr.updateDownloadDropdown();\n            }\n        }\n    }\n\n    function isTabChangeOk(isNew) {\n        if ($scope.queryIsRunning && !$scope.namespacesLoading) {\n            if (isNew) {\n                toastr.info('New tabs may not be opened while query or update is running.');\n            } else {\n                toastr.info('Tabs may not be switched while query or update is running.');\n            }\n\n            return false;\n        }\n\n        return true;\n    }\n\n    // Raise this flag to provide visual feedback to the user the next time a tab changes\n    // (either manually or by the system). See GDB-1983.\n    $scope.highlightNextTabChange = false;\n    $scope.$on('tabAction', function (e, tabEvent) {\n        if (tabEvent.relatedTarget) {\n            // Cancel any highlight timer that might have been left by the last highlight\n            $timeout.cancel(tabEvent.relatedTarget.timer);\n            $(tabEvent.relatedTarget).css('color', '');\n\n            $scope.saveTab(getQueryID(tabEvent.relatedTarget));\n        }\n\n        $scope.loadTab(getQueryID(tabEvent.target));\n\n        // These arrays define how the tab change will be visually enhanced.\n        // colors contains the colors to set to the tab name,\n        // while times defines the times in milliseconds to keep each color.\n        // Once we cycle through the arrays we restore the default color.\n        const colors = ['#ED4F2F', '', '#ED4F2F'];\n        const times = [400, 400, 400];\n        if ($scope.highlightNextTabChange) {\n            $scope.highlightNextTabChange = false;\n            let index = 0;\n            $(tabEvent.target).css('color', colors[index]);\n            const highlightFun = function () {\n                index++;\n                if (index < colors.length) {\n                    $(tabEvent.target).css('color', colors[index]);\n                    tabEvent.target.timer = $timeout(highlightFun, times[index]);\n                } else {\n                    $(tabEvent.target).css('color', '');\n                }\n            };\n            $timeout(highlightFun, times[index]);\n        }\n    });\n\n    $scope.$on('deleteAllexeptSelected', function (e, tabs) {\n        $scope.tabsData = tabs;\n        $scope.tabs = tabs;\n    });\n    // end of query tab operations\n\n    $scope.currentQuery = {};\n    // $scope.state = {};\n    $scope.showSampleQueries = false;\n    $scope.savedQuery = {};\n    $scope.sampleQueries = {};\n    $scope.editQueryModal = showModal('#editQueryContainer');\n    $scope.deleteQueryModal = showModal('#confirmDeleteContainer');\n    $scope.saveQueryModal = showModal('#saveQueryContainer');\n\n    $scope.getResultsDescription = function () {\n        let desc;\n        if ($scope.currentTabConfig.resultsCount === 0) {\n            desc = \"No results.\";\n        } else {\n            const currentPageEnd = ($scope.currentTabConfig.page - 1) * $scope.currentTabConfig.pageSize\n                + Math.min($scope.currentTabConfig.resultsCount, $scope.currentTabConfig.pageSize);\n            desc = \"Showing results from \" + $filter('currency')($scope.currentTabConfig.offset, '', 0)\n                + \" to \" + $filter('currency')(currentPageEnd, '', 0);\n            if ($scope.currentTabConfig.allResultsCount > 0) {\n                // Unsure total results count \"of at least\" happens if counting timed out or\n                // counting was disabled and we got at least $pageSize + 1 results for the current page.\n                // It may reset become exact when we navigate and reach the end of results.\n                desc += $scope.currentTabConfig.allResultsCountExact\n                    ? \" of \" : \" of at least \";\n                desc += $filter('currency')($scope.currentTabConfig.allResultsCount, '', 0);\n            }\n            desc += \".\";\n        }\n\n        return desc;\n    };\n\n    $scope.getUpdateDescription = function () {\n        if ($scope.currentTabConfig.customUpdateMessage) {\n            return $scope.currentTabConfig.customUpdateMessage;\n        } else if ($scope.currentTabConfig.sizeDelta === undefined) {\n            return '';\n        } else if ($scope.currentTabConfig.sizeDelta < 0) {\n            return 'Removed ' + Math.abs($scope.currentTabConfig.sizeDelta) + ' statements.';\n        } else if ($scope.currentTabConfig.sizeDelta > 0) {\n            return 'Added ' + $scope.currentTabConfig.sizeDelta + ' statements.';\n        } else {\n            return 'The number of statements did not change.';\n        }\n    };\n\n    $scope.getStaleWarningMessage = function () {\n        const secondsAgo = Math.round((Date.now() - $scope.currentTabConfig.timeFinished) / 60000) * 60;\n        if (secondsAgo >= 3600) { // must be at least an hour\n            return \"Possibly stale result (obtained \" + $scope.getHumanReadableSeconds(secondsAgo) + \" ago).\";\n        }\n    };\n\n    const resize = function () {\n        // $scope.fixSizesOnHorizontalViewModeSwitch();\n    };\n\n    angular.element($window).bind('resize', resize);\n\n    $scope.$on('$destroy', function () {\n        angular.element($window).unbind('resize', resize);\n    });\n\n    /**\n     * In case of Ontop repository, sameAs, inference and nocount are\n     * overridden to true and #sameAs and #inference buttons is disabled, In case of FedX repo nocount is overriden\n     */\n    function overrideSameAsInferenceAndNoCountIfNeeded() {\n        const isOntop = $repositories.isActiveRepoOntopType();\n        const isFedX = $repositories.isActiveRepoFedXType();\n        handleSameAsAndInferenceBtns(isOntop);\n\n        $scope.nocount = (isOntop || isFedX) ? true : !principal.appSettings.EXECUTE_COUNT;\n        $scope.currentQuery.inference = isOntop ? true : principal.appSettings.DEFAULT_INFERENCE;\n        $scope.currentQuery.sameAs = isOntop ? true : principal.appSettings.DEFAULT_SAMEAS;\n    }\n\n    function handleSameAsAndInferenceBtns(isOntop) {\n        const sameAsBtn = document.getElementById('sameAs');\n        const inferenceBtn = document.getElementById('inference');\n\n        sameAsBtn.disabled = !!(sameAsBtn && isOntop);\n        inferenceBtn.disabled = !!(inferenceBtn && isOntop);\n    }\n}\n\nQuerySampleModalCtrl.$inject = ['$scope', '$modalInstance', 'data'];\n\nfunction QuerySampleModalCtrl($scope, $modalInstance, data) {\n    if (data.queryExists) {\n        $scope.queryExists = true;\n    }\n    $scope.query = angular.copy(data.query);\n    $scope.title = data.title;\n    $scope.edit = data.edit;\n    $scope.okButtonText = data.okButtonText;\n    $scope.ok = function () {\n        if ($scope.form.$valid) {\n            $modalInstance.close($scope.query);\n        }\n    };\n\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n","import 'angular/rest/connectors.rest.service';\nimport 'angular/utils/local-storage-adapter';\nimport 'angular/externalsync/controllers';\nimport YASQE from 'lib/yasqe.bundled';\nimport YASR from 'lib/yasr.bundled';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.queryeditor', [\n        'ngCookies',\n        'graphdb.framework.externalsync.controllers',\n        'graphdb.framework.rest.connectors.service',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .directive('queryEditor', queryEditorDirective);\n\nqueryEditorDirective.$inject = ['$timeout', '$location', 'toastr', '$repositories', 'SparqlRestService', 'ModalService', '$modal', '$jwtAuth', 'RDF4JRepositoriesRestService', 'ConnectorsRestService', 'LocalStorageAdapter', 'LSKeys'];\n\nfunction queryEditorDirective($timeout, $location, toastr, $repositories, SparqlRestService, ModalService, $modal, $jwtAuth, RDF4JRepositoriesRestService, ConnectorsRestService, LocalStorageAdapter, LSKeys) {\n\n    let callbackOnChange;\n\n    return {\n        restrict: 'AE',\n        scope: false,\n        templateUrl: 'js/angular/core/directives/queryeditor/templates/query-editor.html',\n        link: linkFunc\n    };\n\n    //function updateLineGutter() in Yasqe receive wrong data and line numbers div have width 100%\n    // magic value 150 seems to work well (including Safari), smaller values work on other browsers but not always on Safari\n    function linkFunc(scope, element, attrs) {\n        // Doesn't store anything in local storage\n        scope.nostorage = attrs.hasOwnProperty('nostorage');\n        // Doesn't allow multiple tabs in the editor, only a single tab is active\n        scope.notabs = attrs.hasOwnProperty('notabs');\n        // Hides all the vertical toolbar inside the editor\n        scope.notoolbar = attrs.hasOwnProperty('notoolbar');\n        // Hides the saved queries icons in the toolbar\n        scope.notoolbarSaved = attrs.hasOwnProperty('notoolbarSaved');\n        // Hides the copy query link icon in the toolbar\n        scope.notoolbarCopy = attrs.hasOwnProperty('notoolbarCopy');\n        // Hides the inference icon in the toolbar\n        scope.notoolbarInference = attrs.hasOwnProperty('notoolbarInference');\n        // Hides the sameAs icon in the toolbar\n        scope.notoolbarSameAs = attrs.hasOwnProperty('notoolbarSameAs');\n        // Doesn't show any status messages in YASR (e.g. no results, query took that many seconds, etc)\n        scope.nostatus = attrs.hasOwnProperty('nostatus');\n        // Doesn't show the run button\n        scope.norun = attrs.hasOwnProperty('norun');\n        // Name of the Run button in the editor\n        scope.runButtonName = \"Run\";\n        if (attrs.runButtonName) {\n            scope.runButtonName = attrs.runButtonName;\n        }\n        // Doesn't execute the count query\n        scope.nocount = attrs.nocount === \"true\";\n\n        // Custom callback to call when the content changes (fired within timeout of 200)\n        if (attrs.callbackOnChange) {\n            const callback = scope[attrs.callbackOnChange];\n            if (typeof callback === 'function') {\n                callbackOnChange = callback;\n            }\n        }\n\n        $timeout(function () {\n            drawQueryEditor(scope);\n        }, 150);\n    }\n\n    function drawQueryEditor(scope) {\n        scope.changePagination = changePagination;\n\n        // start of keyboard shortcut actions\n        function saveQueryAction() {\n            angular.element('#wb-sparql-saveQuery')[0].click();\n        }\n\n        function runQueryAction() {\n            scope.runQuery(false, false);\n        }\n\n        function explainQueryAction() {\n            scope.runQuery(false, true);\n        }\n\n        function goToNextTabAction() {\n            if (scope.tabs.length < 2 || !scope.currentQuery.id || !scope.isTabChangeOk(false)) {\n                return;\n            }\n            let idx = findTabIndexByID(scope.currentQuery.id);\n            idx = (idx + 1) % scope.tabs.length;\n            const tab = scope.tabs[idx];\n            selectTab(tab.id);\n        }\n\n        function goToPreviousTabAction() {\n            if (scope.tabs.length < 2 || !scope.currentQuery.id || !scope.isTabChangeOk(false)) {\n                return;\n            }\n            let idx = findTabIndexByID(scope.currentQuery.id);\n            idx--;\n            if (idx === -1) {\n                idx = scope.tabs.length - 1;\n            }\n            const tab = scope.tabs[idx];\n            selectTab(tab.id);\n        }\n\n        window.editor = YASQE.fromTextArea(\n            document.getElementById(\"query\"), {\n                persistent: null,\n                value: \"\",\n                indentUnit: 4,\n                createShareLink: null,\n                cursorHeight: 1.0,\n                sparql: {\n                    showQueryButton: false,\n                    acceptHeaderGraph: \"application/x-graphdb-table-results+json, application/rdf+json;q=0.9, */*;q=0.8\",\n                    acceptHeaderSelect: \"application/x-sparqlstar-results+json, application/sparql-results+json;q=0.9, */*;q=0.8\"\n                },\n                // We provide a wrapper for executeQuery so we have to redefine those here\n                extraKeys: {\n                    \"Ctrl-Enter\": runQueryAction,\n                    \"Cmd-Enter\": runQueryAction,\n                    \"Shift-Ctrl-Enter\": explainQueryAction,\n                    \"Shift-Cmd-Enter\": explainQueryAction,\n                    \"Ctrl-Alt-T\": scope.addNewTab,\n                    \"Cmd-Alt-T\": scope.addNewTab,\n                    \"Ctrl-S\": saveQueryAction,\n                    \"Cmd-S\": saveQueryAction,\n                    \"Ctrl-Alt-Left\": goToPreviousTabAction,\n                    \"Cmd-Alt-Left\": goToPreviousTabAction,\n                    \"Ctrl-Alt-Right\": goToNextTabAction,\n                    \"Cmd-Alt-Right\": goToNextTabAction\n                }\n            }\n        );\n\n        window.editor.toastBuildIndex = function () {\n            toastr.warning('', '<div class=\"autocomplete-toast\"><a href=\"autocomplete\">Autocomplete is OFF<br>Go to Setup -> Autocomplete</a></div>',\n                {allowHtml: true});\n        };\n\n        window.editor.toastError = function (data) {\n            toastr.error('Cannot execute autocomplete query. ' + getError(data));\n        };\n\n        window.editor.on(\"changes\", function () {\n            angular.element('.CodeMirror-linenumbers').css('width', '1px');\n            angular.element('.CodeMirror-sizer').css('margin-left', '0px');\n            clearTimeout(scope.changesTimeout);\n            const hasError = !window.editor.queryValid;\n            scope.changesTimeout = setTimeout(callbackOnChange ? callbackOnChange() : function () {\n                const idx = findTabIndexByID(scope.currentQuery.id) + 1;\n                $('a[data-id = \"' + idx + '\"]')\n                    .toggleClass('query-has-error', hasError)\n                    .attr('title', hasError ?\n                        'Query contains a syntax error. See the relevant line for more information.' :\n                        '');\n            }, 200);\n            scope.currentQuery.query = window.editor.getValue();\n            scope.currentQuery.queryType = window.editor.getQueryType();\n        });\n\n\n        function selectTab(id) {\n            $timeout(function () {\n                let requestedTab = $('a[data-id = \"' + id + '\"]');\n                if (requestedTab.length === 0) {\n                    // tab has been deleted in another browser window or something else occurred,\n                    // select first tab instead\n                    requestedTab = $('a[data-id]').first();\n                }\n                requestedTab.tab('show');\n            }, 0);\n        }\n\n        // hide unneeded yasqe fullscreen button\n        $(\".fullscreenToggleBtns\").hide();\n\n        const afterCopy = function (event) {\n            $(event.target).removeClass('fa-link').addClass('fa-check').blur();\n            setTimeout(function () {\n                $(event.target).removeClass('fa-check').addClass('fa-link');\n            }, 1000);\n        };\n\n        window.onbeforeunload = function () {\n            if (!scope.nostorage) {\n                LocalStorageAdapter.set(LSKeys.TABS_STATE, scope.tabs);\n            }\n            scope.saveTab(scope.currentQuery.id);\n        };\n\n        /*\n         * Patch the execute query to take into account the inference\n         * and the same as options\n         */\n        const originalExecuteQuery = YASQE.executeQuery;\n        const originalGetUrlArguments = YASQE.getUrlArguments;\n\n        scope.$on('$destroy', function () {\n            if (!scope.nostorage) {\n                LocalStorageAdapter.set(LSKeys.TABS_STATE, scope.tabs);\n            }\n            YASQE.executeQuery = originalExecuteQuery;\n            YASQE.getUrlArguments = originalGetUrlArguments;\n            scope.saveTab(scope.currentQuery.id);\n        });\n\n        /*\n         * Add our own buttons\n         */\n        YASQE.drawButtons = function (yasqe) {\n            // Define this property because otherwise there are errors in yasgui's code.\n            yasqe.buttons = $(\"#yasqe_buttons_mocked\");\n        };\n\n        YASQE.getActiveRepository = function () {\n            return $repositories.getActiveRepository();\n        };\n\n        YASQE.getUrlArguments = function (yasqe, config) {\n            const data = originalGetUrlArguments(yasqe, config);\n            const qType = window.editor.getQueryType();\n            if ('SELECT' === qType || 'CONSTRUCT' === qType || 'DESCRIBE' === qType) {\n                // We request pageSize + 1 to know if there are more pages when total count isn't known\n                data.push({name: 'limit', value: scope.currentTabConfig.pageSize + 1});\n                scope.currentTabConfig.offset = (scope.currentTabConfig.page - 1) * scope.currentTabConfig.pageSize + 1;\n                data.push({name: 'offset', value: scope.currentTabConfig.offset - 1});\n            }\n            // even though we have explainRequested in our scope too it doesn't always contain a fresh value\n            if (scope.explainRequested && ('SELECT' === qType || 'CONSTRUCT' === qType)) {\n                data.push({name: 'explain', value: 'true'});\n            }\n            return data;\n        };\n\n        function createCustomError(status, statusText, responseText) {\n            return {\n                status: status,\n                statusText: statusText,\n                responseText: responseText\n            };\n        }\n\n        // Generates a new tracking alias for queries based on time\n        function newTrackAlias() {\n            return \"query-editor-\" + performance.now() + \"-\" + Date.now();\n        }\n\n        let connectorProgressModal;\n        let yasr;\n\n        YASQE.executeQuery = function (cm) {\n            if (yasr && $(yasr.resultsContainer).length) {\n                $(yasr.resultsContainer).empty();\n            }\n            // Request extra error/warning handling\n            cm.options.sparql.headers['X-GraphDB-Catch'] = scope.currentTabConfig.pageSize + '; throw';\n            scope.currentTrackAlias = newTrackAlias();\n            cm.options.sparql.headers['X-GraphDB-Track-Alias'] = scope.currentTrackAlias;\n            scope.countTimeouted = false;\n            if (cm.getQueryMode() === 'query') {\n                cm.options.sparql.endpoint = 'repositories/' + $repositories.getActiveRepository();\n            } else if (cm.getQueryMode() === 'update') {\n                cm.options.sparql.endpoint = 'repositories/' + $repositories.getActiveRepository() + '/statements';\n            }\n            cm.options.sparql.args = [{\n                name: 'infer',\n                value: scope.currentQuery.inference\n            },\n                {\n                    name: 'sameAs',\n                    value: scope.currentQuery.sameAs\n                }];\n\n            scope.currentTabConfig.customUpdateMessage = \"\";\n\n            if (window.editor.getQueryMode() === \"update\") {\n                const doExecute = function () {\n                    scope.currentTabConfig.queryType = \"UPDATE\";\n\n                    RDF4JRepositoriesRestService.getRepositorySize()\n                        .success(function (data) {\n                            scope.repoSize = parseInt(data);\n                            scope.queryStartTime = new Date().getTime();\n                            return originalExecuteQuery(cm, {});\n                        })\n                        .error(function (data) {\n                            toastr.warning('Could not get repository size for: ' + $repositories.getActiveRepository() + '; ' + getError(data));\n                            scope.queryStartTime = new Date().getTime();\n                            return originalExecuteQuery(cm, {});\n                        });\n                };\n\n                ConnectorsRestService.checkConnector(window.editor.getValue())\n                    .then(function (res) {\n                        if (res.data.command && !res.data.hasSupport) {\n                            // it's a connector query but the relevant plugin isn't active, stop executing and warn the user\n                            scope.currentTabConfig.queryType = 'ERROR';\n                            scope.currentTabConfig.timeFinished = Date.now();\n                            scope.currentTabConfig.timeTook = (scope.currentTabConfig.timeFinished - scope.queryStartTime) / 1000;\n\n                            const customError = createCustomError(-1, 'No support for ' + res.data.connectorName, res.data.connectorName\n                                + ' connectors are not supported because the plugin ' + res.data.pluginName + ' is not active.');\n\n                            yasr.results = {\n                                getException: function () {\n                                    return customError;\n                                }\n                            };\n\n                            scope.setLoader(false);\n\n                            setNewTabState({customError: customError}, '', null);\n\n                            return;\n                        }\n\n                        if (res.data.command === 'create' || res.data.command === 'repair') {\n                            const repair = res.data.command === 'repair';\n                            if (repair) {\n                                scope.setLoader(true, 'Repairing connector ' + res.data.name);\n                                scope.currentTabConfig.customUpdateMessage = 'Repaired connector ' + res.data.name + '.';\n                            } else {\n                                scope.setLoader(true, 'Creating connector ' + res.data.name);\n                                scope.currentTabConfig.customUpdateMessage = 'Created connector ' + res.data.name + '.';\n                            }\n\n                            const progressScope = scope.$new(true);\n\n                            // This duplicates code in the externalsync module but we can't get it from there\n                            progressScope.beingBuiltConnector = {\n                                percentDone: 0,\n                                status: {\n                                    processedEntities: 0,\n                                    estimatedEntities: 0,\n                                    indexedEntities: 0,\n                                    entitiesPerSecond: 0\n                                },\n                                actionName: repair ? 'Repairing' : 'Creating',\n                                eta: \"-\",\n                                inline: false,\n                                iri: res.data.iri,\n                                name: res.data.name,\n                                doneCallback: function () {\n                                    connectorProgressModal.dismiss('cancel');\n                                }\n                            };\n                            progressScope.getHumanReadableSeconds = scope.getHumanReadableSeconds;\n\n                            connectorProgressModal = $modal.open({\n                                templateUrl: 'pages/connectorProgress.html',\n                                controller: 'CreateProgressCtrl',\n                                size: 'lg',\n                                backdrop: 'static',\n                                scope: progressScope\n                            });\n                        } else if (res.data.command === 'drop') {\n                            scope.setLoader(true, 'Deleting connector ' + res.data.name);\n                            scope.currentTabConfig.customUpdateMessage = 'Deleted connector ' + res.data.name + '.';\n                        }\n\n                        doExecute();\n                    }, function () {\n                        // for some reason we couldn't check if this is a connector update, so just execute it\n                        doExecute();\n                    });\n\n            } else {\n                const thisTabConfig = scope.currentTabConfig;\n                const thisTabId = scope.executedQueryTab.id;\n\n                // Assign a fresh callback function so that we can associate the count result\n                // with the right tab (or lack of tab).\n                window.editor.options.sparql.handlers.countCallback = function (dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n                    if (dataOrJqXhr.status === 200) {\n                        const tab = scope.tabs[findTabIndexByID(thisTabId)];\n                        if (tab) {\n                            yasr.setResultsCount(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n                            thisTabConfig.allResultsCount = yasr.allCount;\n                            tab.allResultsCount = yasr.allCount;\n                            thisTabConfig.allResultsCountExact = true;\n                            tab.allResultsCountExact = true;\n                            scope.saveTab(tab.id);\n                        } // Else tab was closed while we wait for the count, ignore result\n                    } else {\n                        // count query timed out or something else went wrong\n                        thisTabConfig.countTimeouted = true;\n                    }\n                };\n\n                // Tell YASR what format we want, or else it will mess it up when switching between tabs.\n                if (scope.currentQuery.outputType != null) {\n                    yasr.options.output = scope.currentQuery.outputType;\n                } else { // Default to table if no format has been configured yet.\n                    yasr.options.output = \"table\";\n                }\n                scope.currentTabConfig.queryType = window.editor.getQueryType();\n                scope.queryStartTime = new Date().getTime();\n                return originalExecuteQuery(cm, {\n                    setQueryLimit: function (query) {\n                        // Until weird conversion of CONSTRUCT queries is fixed\n                        // in Ontop project, comments should be removed from them\n                        // TODO: Remove this check when ${link https://github.com/ontop/ontop/issues/362} is fixed\n                        if (scope.currentTabConfig.queryType === 'CONSTRUCT' && $repositories.isActiveRepoOntopType()) {\n                            return window.editor.getValueWithoutComments();\n                        }\n                        // For all types of queries we handle limit/offset in our RepositoriesController.\n                        // TODO: Get rid of this method\n                        return query;\n                    }\n                });\n            }\n\n        };\n\n        // Override yasqe's getAjaxConfig() so we can inject our authorization header\n        const originalGetAjaxConfig = YASQE.getAjaxConfig;\n        YASQE.getAjaxConfig = function (yasqe, callbackOrConfig) {\n            const config = originalGetAjaxConfig(yasqe, callbackOrConfig);\n\n            _.extend(config.headers, {\n                'Authorization': $jwtAuth.getAuthToken()\n            });\n\n            return config;\n        };\n\n        function createQueryURL(savedQueryName, owner) {\n            let url = [location.protocol, '//', location.host, location.pathname].join('');\n            if (savedQueryName) {\n                url = url + '?savedQueryName=' + encodeURIComponent(savedQueryName);\n                if (owner != null) {\n                    url += '&owner=' + encodeURIComponent(owner);\n                }\n            } else {\n                url = url + '?' + $.param({\n                    name: scope.currentQuery.name,\n                    infer: scope.currentQuery.inference,\n                    sameAs: scope.currentQuery.sameAs,\n                    query: window.editor.getValue()\n                });\n            }\n            return url;\n        }\n\n        scope.copyToClipboardQuery = function (savedQueryName, owner) {\n            ModalService.openCopyToClipboardModal(createQueryURL(savedQueryName, owner));\n        };\n\n        scope.copyToClipboardResult = function (resultURI) {\n            ModalService.openCopyToClipboardModal(resultURI);\n        };\n\n        scope.goToVisual = function () {\n            const paramsToParse = {\n                query: window.editor.getValue(),\n                sameAs: scope.currentQuery.sameAs,\n                inference: scope.currentQuery.inference\n            };\n\n            $location.path('graphs-visualizations').search(paramsToParse);\n        };\n\n        // Adds prefixes when the user pastes a query. This was in the controller before and it stopped working\n        // (needs to happen to after YASQE adds the textarea), see GDB-1936\n        $('textarea').on('paste', function () {\n            $timeout(function () {\n                scope.addKnownPrefixes();\n            }, 0);\n        });\n\n        function setNewTabState(dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n            // store explicitly the contentType\n            if (dataOrJqXhr.getResponseHeader && dataOrJqXhr.getResponseHeader(\"content-type\")) {\n                dataOrJqXhr.contentType = dataOrJqXhr.getResponseHeader(\"content-type\");\n            }\n\n            // We use this when we set YASR results to avoid double JSON parsing and to enforce\n            // using the modified responseJSON. We'll save responseJSON instead (no need to save both).\n            delete dataOrJqXhr.response;\n\n            const executedQueryTabIdx = findTabIndexByID(scope.executedQueryTab.id);\n            const executedQueryTab = scope.tabs[executedQueryTabIdx];\n            const queryResultState = {\n                    queryType: scope.currentTabConfig.queryType,\n                    yasrData: dataOrJqXhr,\n                    textStatus: textStatus,\n                    jqXhrOrErrorString: jqXhrOrErrorString,\n                    page: scope.currentTabConfig.page,\n                    pageSize: scope.currentTabConfig.pageSize,\n                    allResultsCount: scope.currentTabConfig.allResultsCount,\n                    allResultsCountExact: scope.currentTabConfig.allResultsCountExact,\n                    resultsCount: scope.currentTabConfig.resultsCount,\n                    offset: scope.currentTabConfig.offset,\n                    timeTook: scope.currentTabConfig.timeTook,\n                    timeFinished: scope.currentTabConfig.timeFinished,\n                    sizeDelta: scope.currentTabConfig.sizeDelta,\n                    customUpdateMessage: scope.currentTabConfig.customUpdateMessage,\n                    errorMessage: scope.currentTabConfig.errorMessage,\n                    warningMessage: scope.currentTabConfig.warningMessage\n                };\n\n            // Save the output type only if it isn't an update or an ask query.\n            // This way we preserve the existing output type when we execute an update and then\n            // execute a non-ask query.\n            if (scope.currentTabConfig.queryType !== \"ERROR\" && scope.currentTabConfig.queryType !== \"UPDATE\"\n                && scope.currentTabConfig.queryType !== \"ASK\") {\n                queryResultState.outputType = scope.yasr.options.output;\n            }\n\n            // merge query results state with the tab object\n            angular.extend(scope.currentQuery, queryResultState);\n\n            angular.extend(executedQueryTab, queryResultState);\n            if (!scope.nostorage) {\n                LocalStorageAdapter.set(LSKeys.TABS_STATE, scope.tabs);\n            }\n            $('a[data-id = \"' + scope.executedQueryTab.id + '\"]').tab('show');\n        }\n\n        function initYasr() {\n            yasr = YASR(document.getElementById(\"yasr\"), { // eslint-disable-line new-cap\n                getUsedPrefixes: {}, // initially blank, populated when we fetch the namespaces\n                persistency: false\n            });\n            window.yasr = yasr;\n            yasr.afterCopy = afterCopy;\n            yasr.getQueryResultsAsFormat = function (downloadFormat) {\n                // Simple cross-browser download with a form\n                const $wbDownload = $('#wb-download');\n                $wbDownload.attr('action', 'repositories/' + $repositories.getActiveRepository());\n                $('#wb-download-query').val(scope.currentQuery.query);\n                if (window.editor.getValue() !== scope.currentQuery.query) {\n                    toastr.warning('The query in your editor does not match the query results. Download will save the results from the last executed query.');\n                }\n                $('#wb-download-infer').val(scope.currentQuery.inference);\n                $('#wb-download-sameAs').val(scope.currentQuery.sameAs);\n                const auth = localStorage.getItem('com.ontotext.graphdb.auth');\n                if (auth) {\n                    $('#wb-auth-token').val(auth);\n                }\n                $('#wb-download-accept').val(downloadFormat);\n                $wbDownload.submit();\n            };\n            window.editor.options.sparql.handlers.complete = function (dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n                function setNewTabStateForThis() {\n                    setNewTabState(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n                }\n\n                if (connectorProgressModal) {\n                    connectorProgressModal.dismiss('cancel');\n                }\n\n                // If yasqe was destroyed when scope was destroyed, do nothing\n                if (null === window.editor) {\n                    scope.setLoader(false);\n\n                    return;\n                }\n\n                // Extra error/warning through headers\n                scope.currentTabConfig.errorMessage = dataOrJqXhr.getResponseHeader('X-GraphDB-Error');\n                scope.currentTabConfig.warningMessage = dataOrJqXhr.getResponseHeader('X-GraphDB-Warning');\n\n                yasr.currentQuery = scope.currentQuery;\n\n                scope.currentTabConfig.timeFinished = Date.now();\n                scope.currentTabConfig.timeTook = (scope.currentTabConfig.timeFinished - scope.queryStartTime) / 1000;\n\n                if (dataOrJqXhr.status >= 400) {\n                    // Removes useless com.blah.whatever.FooException: ... from the error message\n                    dataOrJqXhr.responseText = dataOrJqXhr.responseText.replace(/^([^: ]+: )+/, '');\n\n                    scope.currentTabConfig.queryType = 'ERROR';\n                    setNewTabStateForThis();\n                    scope.setYasrResponse(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n\n                    scope.setLoader(false);\n\n                    return;\n                }\n\n                if (dataOrJqXhr.status === 0) {\n                    // Query was aborted, typically through window.editor.xhr.abort()\n\n                    scope.currentTabConfig.queryType = 'ERROR';\n\n                    const customError = createCustomError(-1, 'Request was aborted', 'The request has been aborted. There are no results to show.');\n\n                    yasr.results = {\n                        getException: function () {\n                            return customError;\n                        }\n                    };\n\n                    scope.setLoader(false);\n\n                    setNewTabState({customError: customError}, '', null);\n\n                    return;\n                }\n\n                scope.setLoader(false);\n\n                let updateResultsCallback;\n\n                if (window.editor.getQueryMode() === \"update\") {\n                    updateResultsCallback = function () {\n                        RDF4JRepositoriesRestService.getRepositorySize()\n                            .success(function (data) {\n                                let repoSizeDiff;\n                                if (scope.repoSize !== undefined) {\n                                    repoSizeDiff = Number(data) - scope.repoSize;\n                                }\n                                scope.currentTabConfig.sizeDelta = repoSizeDiff;\n                                setNewTabStateForThis();\n                            }).error(function (data) {\n                                toastr.warning('Could not get repository size for: ' + scope.getActiveRepository() + '; ' + getError(data));\n                                scope.currentTabConfig.sizeDelta = undefined;\n                                setNewTabStateForThis();\n                            });\n                    };\n                } else {\n                    if (dataOrJqXhr.status === 200) {\n                        const contentType = dataOrJqXhr.getResponseHeader('Content-Type');\n\n                        if (contentType.indexOf('application/sparql-results+json') === 0\n                            || contentType.indexOf('application/x-sparqlstar-results+json') === 0\n                            || contentType.indexOf('application/x-graphdb-table-results+json') === 0) {\n                            if (dataOrJqXhr.responseJSON.results) {\n                                // SELECT results in one of the standard formats or\n                                // CONSTRUCT or DESCRIBE results in our custom format that looks\n                                // like a SELECT result.\n                                scope.currentTabConfig.resultsCount = dataOrJqXhr.responseJSON.results.bindings.length;\n                                if (dataOrJqXhr.responseJSON.results.bindings.length > scope.currentTabConfig.pageSize) {\n                                    // The results are more than the page size (because we request +1), truncate to page size\n                                    // and raise flag to know we have at least one page more.\n                                    dataOrJqXhr.responseJSON.results.bindings.length = scope.currentTabConfig.pageSize;\n                                }\n                                if (!scope.currentTabConfig.allResultsCountExact) {\n                                    if (scope.nocount || scope.countTimeouted\n                                        || scope.currentTabConfig.resultsCount <= scope.currentTabConfig.pageSize) {\n                                        // No count requested or count timed out or the results are less than the pageSize + 1 buffer\n                                        // In all of these cases it doesn't make sense to run\n                                        // the counting query so we tweak the status to signal that to YASQE.\n                                        dataOrJqXhr.status = 204; // 204 is no content, YASQE counts only if status is 200\n                                    }\n\n                                    // Calculate an \"at least\" all results count, i.e. at least what we have until now + 1.\n                                    // The number will increase when we go to the next page eventually reaching the exact count.\n                                    // A count query may also provide the exact count asynchronously.\n                                    scope.currentTabConfig.allResultsCount = Math.max(scope.currentTabConfig.allResultsCount,\n                                        scope.currentTabConfig.pageSize * (scope.currentTabConfig.page - 1) + scope.currentTabConfig.resultsCount);\n\n                                    // We know we reached the end and the count is exact now.\n                                    if (scope.currentTabConfig.resultsCount <= scope.currentTabConfig.pageSize) {\n                                        scope.currentTabConfig.allResultsCountExact = true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n\n                    // The following long-running code needs to be in timeout to get the updated loader message\n                    scope.setLoader(true, 'Rendering results', null, true);\n\n                    updateResultsCallback = function () {\n                        scope.setYasrResponse(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n\n                        setNewTabStateForThis();\n                        scope.setLoader(false);\n                    };\n                }\n\n                // By having this in timeout we manage to get the updated loader message\n                $timeout(function () {\n                    updateResultsCallback();\n\n                    // Move disabled class to a, and clean from the li\n                    if (window.editor.getQueryType() !== \"CONSTRUCT\") {\n                        $('.yasr_btnGroup.nav.nav-tabs li a.disabled').removeClass('disabled').css('font-weight', '400');\n                        $('.yasr_btnGroup.nav.nav-tabs li.disabled a').addClass('disabled').css('font-weight', '200');\n                        if (window.editor.getQueryType() === \"DESCRIBE\") {\n                            $('.yasr_btnGroup.nav.nav-tabs li a').removeClass('disabled').css('font-weight', '400');\n                        }\n                    } else if (window.editor.getQueryType() === \"CONSTRUCT\") {\n                        $('.yasr_btnGroup.nav.nav-tabs li a.disabled').removeClass('disabled').css('font-weight', '400');\n                    }\n\n\n                    //Remove paddign of yasr so it will be aligned with sparql editor\n                    $('#yasr').css('padding', '0');\n\n                    if ($('.yasr_btnGroup li:nth-child(2)').hasClass(\"active\")) {\n                        $timeout(function () {\n                            $('.yasr_btnGroup li:nth-child(2) a').get(0).click();\n                        }, 100);\n                    }\n\n                    //\n                    $('#wb-sparql-addNewTab').click(function () {\n                        $('.dataTables_filter').hide();\n                        $('.resultsTable').hide();\n                    });\n                }, 100);\n            };\n\n            window.editor.options.sparql.handlers.resetResults = function () {\n            };\n\n            scope.yasr = yasr;\n\n            scope.setYasrResponse = function(dataOrJqXhr, textStatus, jqXhrOrErrorString) {\n                // If YASR doesn't see a \"response\" property it will parse the textual JSON in \"responseText\".\n                // This is both slow and interferes with the +1 result per page policy when we truncate responseJSON.\n                if (dataOrJqXhr.responseJSON) {\n                    dataOrJqXhr.response = dataOrJqXhr.responseJSON;\n                    dataOrJqXhr.responseText = undefined;\n                }\n                yasr.setResponse(dataOrJqXhr, textStatus, jqXhrOrErrorString);\n            };\n\n            // Track changes in the output type (tab in yasr) so that we can save this together with\n            // the rest of the tab's data.\n            scope.$watch('yasr.options.output', function (value) {\n                // Save the output type only if it isn't an update or an ask query (see comment where we save all properties).\n                if (value && scope.currentTabConfig.queryType !== \"UPDATE\" && scope.currentTabConfig.queryType !== \"ASK\") {\n                    const tab = scope.tabs[findTabIndexByID(scope.currentQuery.id)];\n                    // Do not save tab on default yasr initalization since default table overrides saved value\n                    if (angular.isDefined(tab) && scope.currentTabConfig.queryType) {\n                        if (tab.outputType !== value) {\n                            tab.outputType = scope.currentQuery.outputType = value;\n                            scope.saveTab(tab.id);\n                        }\n                    }\n                }\n            });\n\n            scope.$watch('namespaces', function () {\n                if (scope.namespaces) {\n                    if (yasr && yasr.options && scope.namespaces) {\n                        // this way, the URLs in the results are prettified using the defined prefixes\n                        yasr.options.getUsedPrefixes = scope.namespaces;\n                    }\n\n                    // Notify YASQE about the new namespaces\n                    YASQE.signal(window.editor, 'namespacesChanged', scope.namespaces);\n                }\n            });\n        }\n\n        initYasr();\n\n        function changePagination() {\n            scope.runQuery(true, scope.explainRequested);\n        }\n\n        // Hide the sample queries when the user clicks somewhere else in the UI.\n        $(document).mouseup(function (event) {\n            const container = $('#sampleQueriesCollapse');\n            if (!container.is(event.target) // if the target of the click isn't the container..\n                && container.has(event.target).length === 0 //... nor a descendant of the container\n                && scope.showSampleQueries) {\n                scope.toggleSampleQueries();\n            }\n        });\n\n        function findTabIndexByID(id) {\n            for (let i = 0; i < scope.tabs.length; i++) {\n                const tab = scope.tabs[i];\n                if (tab.id === id) {\n                    return i;\n                }\n            }\n        }\n\n        // functions to load query param or saved queries\n        function toBoolean(v) {\n            return angular.isDefined(v) && v !== 'false';\n        }\n\n        function autoexecuteQueryIfRequested() {\n            const isRequested = toBoolean($location.search().execute);\n\n            if (isRequested) {\n                if (window.editor.getQueryMode() === 'update') {\n                    ModalService.openSimpleModal({\n                        title: 'Confirm execute',\n                        message: 'This is an update and it may change the data in the repository.<br>Are you sure you want to execute it automatically?',\n                        warning: true\n                    }).result\n                        .then(function () {\n                            scope.runQuery(false);\n                        });\n                } else {\n                    scope.runQuery(false);\n                }\n            }\n        }\n\n        function loadQueryIntoExistingOrNewTab(query, infer, sameAs) {\n            const tabId = scope.getExistingTabId(query);\n            // Ah, the joys of non-synchronous events\n            const onHandler = scope.$on('tabLoaded', function () {\n                if (angular.isDefined(infer)) {\n                    scope.currentQuery.inference = toBoolean(infer);\n                }\n                if (angular.isDefined(sameAs)) {\n                    scope.currentQuery.sameAs = toBoolean(sameAs);\n                }\n                autoexecuteQueryIfRequested();\n                onHandler();\n            });\n\n            // See comment about this flag in controller. It's a good idea to be consistent and do this\n            // every time a tab changes without the user clicking on it.\n            scope.highlightNextTabChange = true;\n\n            if (!angular.isDefined(tabId)) {\n                scope.addNewTab(null, query.name, query.body);\n            } else {\n                selectTab(tabId);\n            }\n        }\n\n        function loadSavedQueryIntoExistingOrNewTab(savedQueryName, owner, infer, sameAs) {\n            SparqlRestService.getSavedQuery(savedQueryName, owner)\n                .success(function (data) {\n                    loadQueryIntoExistingOrNewTab(data, infer, sameAs);\n                })\n                .error(function (data) {\n                    toastr.error('Could not get data for saved query: ' + savedQueryName + '; ' + getError(data));\n                });\n        }\n\n        function addTabWithQueryIfNeeded() {\n            if ($location.search().savedQueryName) {\n                // new way\n                loadSavedQueryIntoExistingOrNewTab($location.search().savedQueryName, $location.search().owner,\n                    $location.search().infer, $location.search().sameAs);\n            } else if ($location.search().query) {\n                const query = {name: $location.search().name, body: $location.search().query};\n                loadQueryIntoExistingOrNewTab(query, $location.search().infer, $location.search().sameAs);\n            } else {\n                // Restore the previous tab after the dom has loaded\n                const currentid = LocalStorageAdapter.get(LSKeys.TABS_STATE_CURRENT_ID);\n                selectTab(currentid);\n            }\n        }\n\n        function updateRepositoryAndSecurity() {\n            scope.getNamespaces();\n            YASQE.signal(window.editor, \"repositoryOrAuthorizationChanged\",\n                $repositories.getActiveRepository(), $jwtAuth.getAuthToken());\n            addTabWithQueryIfNeeded();\n        }\n\n        if ($repositories.getActiveRepository()) {\n            updateRepositoryAndSecurity();\n        }\n\n        // When no repo is selected (editor hidden) and the user selects a repo the SPARQL params should be handled\n        scope.$on('repositoryIsSet', function () {\n            if ($repositories.getActiveRepository()) {\n                updateRepositoryAndSecurity();\n            }\n        });\n        // end of repository actions\n\n        // focus the editor\n        $timeout(function () {\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }, 50);\n\n    }\n}\n","import 'angular/utils/local-storage-adapter';\n\nangular\n    .module('graphdb.framework.core.directives.queryeditor.sparqltab', [\n        'graphdb.framework.core',\n        'graphdb.framework.utils.localstorageadapter'\n    ])\n    .directive('sparqlTab', sparqlTabDirective);\n\nsparqlTabDirective.$inject = ['$rootScope', 'LocalStorageAdapter', 'LSKeys', 'ModalService'];\n\nfunction sparqlTabDirective($rootScope, LocalStorageAdapter, LSKeys, ModalService) {\n    const SparqlTabCtrl = ['$scope', '$element', '$rootScope', 'ModalService', 'toastr', function ($scope, $element, $rootScope, ModalService, toastr) {\n        $scope.state = {};\n\n        function getQueryID(element) {\n            return $(element).attr('data-id');\n        }\n\n        function findTabIndexByID(id) {\n            for (let i = 0; i < $scope.tabs.length; i++) {\n                const tab = $scope.tabs[i];\n                if (tab.id === id) {\n                    return i;\n                }\n            }\n        }\n\n        $($element).on('shown.bs.tab', function (e) {\n            $rootScope.$broadcast('tabAction', e);\n        });\n\n        $scope.deleteTab = deleteTab;\n        $scope.editCurrentTab = editCurrentTab;\n        $scope.selectThisTab = selectThisTab;\n\n        function selectThisTab(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            if ($scope.isTabChangeOk(false)) {\n                $($element).tab('show');\n            }\n        }\n\n        function selectTab(id) {\n            $('a[data-id = \"' + id + '\"]').tab('show');\n        }\n\n        function deleteTab(e) {\n            e.preventDefault();\n            e.stopPropagation();\n\n            if ($scope.tabs.length < 2) {\n                toastr.warning('Last tab must remain open.');\n                return;\n            }\n\n            if (e.shiftKey) {\n                $scope.state.selectedTabId = getQueryID($element);\n\n                ModalService.openSimpleModal({\n                    title: 'Confirm',\n                    message: 'Are you sure you want to delete all query tabs except selected tab?',\n                    warning: true\n                }).result.then(function () {\n                    deleteAllTabsExceptSelected($scope.state.selectedTabId);\n                });\n            } else {\n                $scope.state.idForDelete = getQueryID($element);\n\n                ModalService.openSimpleModal({\n                    title: 'Confirm',\n                    message: 'Are you sure you want to close this query tab?',\n                    warning: true\n                }).result.then(function () {\n                    deleteTabByID($scope.state.idForDelete);\n                });\n            }\n            angular.element(document).find('.CodeMirror textarea:first-child').focus();\n        }\n\n        function editCurrentTab() {\n            if (getQueryID($element) !== $scope.currentQuery.id) {\n                return;\n            }\n            $scope.editCurrentlySelectedOnly.$show();\n            //fix for buttons for edit\n            const $editableButtons = $(\".editable-buttons\");\n            $editableButtons.children(\".btn.btn-primary\").addClass('btn-sm');\n            $editableButtons.children(\".btn.btn-default\").addClass('btn-sm');\n            $('.editable-controls .editable-input').addClass('form-control-sm').on('change', function ($el) {\n                $scope.currentQuery.name = $el.currentTarget.$$currentValue;\n            });\n            //$('.editable-buttons').css('margin-top', '5px');\n            //$('.editable-input.editable-has-buttons').css('width', '50%');\n            $('.editable-buttons .glyphicon.glyphicon-ok')\n                .removeClass('glyphicon glyphicon-ok')\n                .addClass('fa fa-check');\n            $('.editable-buttons .glyphicon.glyphicon-remove')\n                .removeClass('glyphicon glyphicon-remove')\n                .addClass('fa fa-close');\n        }\n\n        function deleteTabByID(id) {\n            if (angular.isUndefined(id)) {\n                throw 'Delete by id was called with undefined id';\n            }\n            const idx = findTabIndexByID(id);\n            $scope.tabs.splice(idx, 1);\n\n            if (id === $scope.currentQuery.id) {\n                if ($scope.tabs.length > 0) {\n                    if (idx > 0) {\n                        // select previous tab if we deleted any but the first tab\n                        selectTab($scope.tabs[idx - 1].id);\n                    } else {\n                        // select first tab if we deleted the first tab\n                        selectTab($scope.tabs[0].id);\n                    }\n                }\n            }\n        }\n\n        function deleteAllTabsExceptSelected(id) {\n            $scope.tabs = $scope.tabs.filter(function (obj) {\n                if (obj.id === id) {\n                    return obj;\n                }\n            });\n            selectTab($scope.tabs[0].id);\n            LocalStorageAdapter.set(LSKeys.TABS_STATE, $scope.tabs);\n            $rootScope.$broadcast('deleteAllexeptSelected', $scope.tabs);\n        }\n    }];\n\n    return {\n        restrict: 'AE',\n        // for some reason when you extract this template in a file and use templateUrl it selects all tabs when editing the tab name, not only the currently selected one\n        template: '<a class=\"nav-link\" role=\"tab\" data-toggle=\"tab\" blur=\"submit\" editable-text=\"tab.name\" e-form=\"editCurrentlySelectedOnly\" ng-click=\"selectThisTab($event)\" ng-dblclick=\"editCurrentTab()\" ><span ng-class=\"{\\'text-muted\\': !tab.name}\">{{ tab.name || \\'Unnamed\\'}}</span><button type=\"button\" ng-click=\"deleteTab($event)\" class=\"btn btn-link btn-sm secondary delete-sparql-tab-btn\" title=\"Delete tab\"><i class=\"icon-close\"></i></button></a>',\n        replace: true,\n        controller: SparqlTabCtrl\n    };\n}\n","import 'angular/core/services';\nimport 'angular/core/services/repositories.service';\nimport 'angular/rest/monitoring.rest.service';\nimport 'angular/utils/notifications';\n\n\nconst modules = [\n    'ui.bootstrap',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.rest.monitoring.service',\n    'toastr'\n];\n\nangular.module('graphdb.framework.jdbc.controllers', modules, [\n    'graphdb.framework.utils.notifications'\n])\n    .controller('JdbcListCtrl', JdbcListCtrl)\n    .controller('JdbcCreateCtrl', JdbcCreateCtrl);\n\nJdbcListCtrl.$inject = ['$scope', '$repositories', 'JdbcRestService', 'toastr', 'ModalService'];\n\nfunction JdbcListCtrl($scope, $repositories, JdbcRestService, toastr, ModalService) {\n\n    $scope.getSqlConfigurations = function () {\n        // Only do this if there is an active repo that isn't an Ontop or FedX repo.\n        // Ontop and FedX repos don't support JDBC.\n        if ($repositories.getActiveRepository()\n                && !$repositories.isActiveRepoOntopType()\n                    && !$repositories.isActiveRepoFedXType()) {\n            JdbcRestService.getJdbcConfigurations().success(function (data) {\n                $scope.jdbcConfigurations = data;\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not get SQL table configurations');\n            });\n        } else {\n            $scope.jdbcConfigurations = [];\n        }\n    };\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function () {\n        $scope.getSqlConfigurations();\n    });\n\n    $scope.deleteConfiguration = function (name) {\n        ModalService.openSimpleModal({\n            title: 'Warning',\n            message: 'Are you sure you want to delete the SQL table configuration ' + '\\'' + name + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                JdbcRestService.deleteJdbcConfiguration(name).success(function () {\n                    $scope.getSqlConfigurations();\n                }).error(function(e) {\n                    toastr.error(getError(e), 'Could not delete SQL table');\n                });\n            });\n    };\n}\n\nJdbcCreateCtrl.$inject = ['$scope', '$location', 'toastr', '$repositories', '$window', '$timeout', 'JdbcRestService', 'RDF4JRepositoriesRestService', 'SparqlRestService', 'ModalService'];\n\nfunction JdbcCreateCtrl($scope, $location, toastr, $repositories, $window, $timeout, JdbcRestService, RDF4JRepositoriesRestService, SparqlRestService, ModalService) {\n\n    $scope.name = $location.search().name || '';\n    $scope.getNamespaces = getNamespaces;\n    $scope.setLoader = setLoader;\n    $scope.addKnownPrefixes = addKnownPrefixes;\n    $scope.page = 1;\n    $scope.noPadding = {paddingRight: 0, paddingLeft: 0};\n    $scope.sqlTypes = ['string', 'iri', 'boolean', 'byte', 'short', 'int', 'long', 'float', 'double', 'decimal', 'date', 'time', 'timestamp', 'Get suggestion...'];\n    $scope.currentTabConfig = {};\n    // This property is obligatory in order to show YASQUE and YASR properly\n    $scope.orientationViewMode = true;\n    $scope.currentQuery = {};\n\n\n    $scope.$watch(function () {\n        return $repositories.getActiveRepository();\n    }, function (newValue, oldValue) {\n        if (newValue !== oldValue) {\n            $location.path('jdbc');\n        }\n    });\n\n    let timer = null;\n    $scope.goBack = function () {\n        timer = $timeout(function () {\n            $window.history.back();\n        }, 1000);\n    };\n\n    const locationChangeListener = $scope.$on('$locationChangeStart', function (event) {\n        confirmExit(event);\n    });\n\n    window.addEventListener('beforeunload', showBeforeunloadMessage);\n\n    function showBeforeunloadMessage(event) {\n        if (!$scope.currentQuery.isPristine) {\n            event.returnValue = true;\n        }\n    }\n\n    function confirmExit(event) {\n        if (!$scope.currentQuery.isPristine) {\n            if (!confirm('You have unsaved changes. Are you sure that you want to exit?')) {\n                event.preventDefault();\n            } else {\n                window.removeEventListener('beforeunload', showBeforeunloadMessage);\n                locationChangeListener();\n                $timeout.cancel(timer);\n            }\n        }\n    }\n\n    $scope.$on('$destroy', function (event) {\n        window.removeEventListener('beforeunload', showBeforeunloadMessage);\n        locationChangeListener();\n        $timeout.cancel(timer);\n    });\n\n    const defaultTabConfig = {\n        id: '1',\n        name: '',\n        query: 'PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\\n' +\n            '\\n' +\n            '# Selects two variables to use as columns\\n' +\n            'SELECT ?id ?label {\\n' +\n            '    ?id rdfs:label ?label\\n' +\n            '    # The following placeholder must be present in the query\\n' +\n            '    #!filter\\n' +\n            '}',\n        inference: true,\n        sameAs: true,\n        isNewConfiguration: true,\n        isPristine: true\n    };\n\n    $scope.resetCurrentTabConfig = function () {\n        $scope.currentTabConfig = {\n            pageSize: 100, // page limit 100 as this is only used for preview\n            page: 1,\n            allResultsCount: 0,\n            resultsCount: 0,\n            // Hide YASR by default, show on success in callback when needed\n            queryType: ''\n        };\n    };\n\n    $scope.saveTab = function () {\n    };\n\n    // Called when user clicks on a sample query\n    $scope.setQuery = function (query) {\n        // Hack for YASQE bug\n        window.editor.setValue(query ? query : ' ');\n    };\n\n    if ($scope.name) {\n        getJdbcConfiguration($scope.name);\n    } else {\n        setQueryFromTabConfig();\n    }\n\n    // FIXME: this is copy-pasted in graphs-config.controller.js and query-editor.controller.js. Find a way to avoid duplications\n    function getNamespaces() {\n        // Signals the namespaces are to be fetched => loader will be shown\n        setLoader(true, 'Refreshing namespaces', 'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n        RDF4JRepositoriesRestService.getRepositoryNamespaces()\n            .success(function (data) {\n                const usedPrefixes = {};\n                data.results.bindings.forEach(function (e) {\n                    usedPrefixes[e.prefix.value] = e.namespace.value;\n                });\n                $scope.namespaces = usedPrefixes;\n            })\n            .error(function (data) {\n                $scope.repositoryError = getError(data);\n            })\n            .finally(function () {\n                // Signals namespaces were fetched => loader will be hidden\n                setLoader(false);\n                loadTab();\n            });\n    }\n\n    function setLoader(isRunning, progressMessage, extraMessage) {\n        const yasrInnerContainer = angular.element(document.getElementById('yasr-inner'));\n        $scope.queryIsRunning = isRunning;\n        if (isRunning) {\n            $scope.queryStartTime = Date.now();\n            $scope.countTimeouted = false;\n            $scope.progressMessage = progressMessage;\n            $scope.extraMessage = extraMessage;\n            yasrInnerContainer.addClass('hide');\n        } else {\n            $scope.progressMessage = '';\n            $scope.extraMessage = '';\n            yasrInnerContainer.removeClass('hide');\n        }\n\n        // We might call this from angular or outside angular so take care of applying the scope.\n        if ($scope.$$phase === null) {\n            $scope.$apply();\n        }\n    }\n\n    function loadTab() {\n        $scope.tabsData = [$scope.currentQuery];\n\n        const tab = $scope.currentQuery;\n\n        if (!$scope.currentQuery.query) {\n            // hack for YASQE bug\n            window.editor.setValue(' ');\n        } else {\n            window.editor.setValue($scope.currentQuery.query);\n        }\n\n        $timeout(function () {\n            $scope.currentTabConfig = {};\n            $scope.currentTabConfig.queryType = tab.queryType;\n            $scope.currentTabConfig.resultsCount = tab.resultsCount;\n\n            $scope.currentTabConfig.offset = tab.offset;\n            $scope.currentTabConfig.allResultsCount = tab.allResultsCount;\n            $scope.currentTabConfig.page = tab.page;\n            $scope.currentTabConfig.pageSize = tab.pageSize;\n\n            $scope.currentTabConfig.timeFinished = tab.timeFinished;\n            $scope.currentTabConfig.timeTook = tab.timeTook;\n            $scope.currentTabConfig.sizeDelta = tab.sizeDelta;\n            $scope.$apply();\n        }, 0);\n\n        if (!$scope.canWriteActiveRepo()) {\n            window.editor.options.readOnly = true;\n        }\n    }\n\n    $scope.goToPage = function (page) {\n        $scope.page = page;\n        const columns = $scope.currentQuery.columns;\n        if (page === 2 && (!columns || columns.length === 0) && hasValidQuery()) {\n            $scope.getColumnsSuggestions();\n        }\n        resetYasqeYasr();\n    };\n\n    function getJdbcConfiguration(name) {\n        JdbcRestService.getJdbcConfiguration(name).success(function (config) {\n            defaultTabConfig.query = config.query;\n            defaultTabConfig.name = config.name;\n            defaultTabConfig.columns = config.columns;\n\n            defaultTabConfig.isNewConfiguration = !config.name;\n\n            setQueryFromTabConfig();\n        }).error(function (data) {\n            const msg = getError(data);\n            toastr.error(msg, 'Could not get SQL table configuration');\n        });\n    }\n\n    function setQueryFromTabConfig() {\n        $scope.tabsData = $scope.tabs = [defaultTabConfig];\n        $scope.currentQuery = angular.copy(defaultTabConfig);\n\n        resetYasqeYasr();\n\n        if (window.editor) {\n            $scope.setQuery($scope.currentQuery.query);\n            loadTab();\n        }\n\n        $scope.$watch(function () {\n            return $scope.currentQuery.query;\n        }, function (newValue, oldValue) {\n            if (newValue !== oldValue) {\n                $scope.setDirty();\n            }\n        });\n    }\n\n    $scope.save = function () {\n        if (!validateDefinition()) {\n            return;\n        }\n\n        if (!$scope.currentQuery.name) {\n            toastr.error('SQL configuration name is required');\n            return;\n        }\n\n        if ($scope.currentQuery.isNewConfiguration) {\n            JdbcRestService.createNewJdbcConfiguration($scope.currentQuery).success(function () {\n                $scope.currentQuery.isPristine = true;\n                $scope.currentQuery.isNewConfiguration = false;\n                toastr.success('SQL table configuration saved');\n                $scope.goBack();\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not save SQL table configuration');\n            });\n        } else {\n            JdbcRestService.updateJdbcConfiguration($scope.currentQuery).success(function () {\n                $scope.currentQuery.isPristine = true;\n                $scope.currentQuery.isNewConfiguration = false;\n                toastr.success('SQL table configuration updated');\n                $scope.goBack();\n            }).error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Could not save SQL table configuration');\n            });\n        }\n    };\n\n    $scope.hasPrecision = function (columnType) {\n        return columnType === 'iri' || columnType === 'string' || columnType === 'decimal';\n    };\n\n    $scope.containsColumnsWithPrecision = function (columns) {\n        return columns && columns.some((el) => $scope.hasPrecision(el.column_type));\n    };\n\n    $scope.hasScale = function (columnType) {\n        return columnType === 'decimal';\n    };\n\n    $scope.containsColumnsWithScale = function (columns) {\n        return columns && columns.some((el) => $scope.hasScale(el.column_type));\n    };\n\n    $scope.isLiteral = function (columnType) {\n        return columnType !== 'iri' && columnType !== 'unknown';\n    };\n\n    $scope.containsNonLiteralColumnsOnly = function (columns) {\n        return columns && columns.every((el) => !$scope.isLiteral(el.column_type));\n    };\n\n    $scope.containsUnknownColumns = function () {\n        return $scope.currentQuery.columns && $scope.currentQuery.columns\n            .find((el) => el.column_type === 'unknown');\n    };\n\n    // Add known prefixes\n    function addKnownPrefixes() {\n        SparqlRestService.addKnownPrefixes(JSON.stringify(window.editor.getValue()))\n            .success(function (data) {\n                if (angular.isDefined(window.editor) && angular.isDefined(data) && data !== window.editor.getValue()) {\n                    window.editor.setValue(data);\n                }\n            })\n            .error(function (data) {\n                const msg = getError(data);\n                toastr.error(msg, 'Error! Could not add known prefixes');\n                return true;\n            });\n    }\n\n    $('textarea').on('paste', function () {\n        $timeout(function () {\n            addKnownPrefixes();\n        }, 0);\n    });\n\n    $scope.selectColumnType = function (columnName, prevColumnType) {\n        const column = _.find($scope.currentQuery.columns, function (column) {\n            return column.column_name === columnName;\n        });\n\n        if (column.column_type === 'Get suggestion...') {\n            JdbcRestService.getColumnsTypeSuggestion($scope.currentQuery.query, [columnName]).success(function (columnSuggestion) {\n                column.column_type = columnSuggestion[columnName].column_type;\n                if (column.column_type === prevColumnType) {\n                    toastr.info('SQL type is the same after suggest: <b>' + column.column_type + '</b>',\n                        'Suggest SQL type', {allowHtml: true});\n                } else {\n                    toastr.success('SQL type set to: <b>' + column.column_type + '</b>',\n                        'Suggest SQL type', {allowHtml: true});\n                }\n                column.sparql_type = columnSuggestion[columnName].sparql_type;\n            }).error(function(e) {\n                toastr.error(getError(e), 'Could not suggest column type');\n            });\n        }\n        $scope.setDirty();\n    };\n\n    $scope.getColumnsSuggestions = function () {\n        if ($scope.currentQuery.columns && $scope.currentQuery.columns.length > 0) {\n            ModalService.openSimpleModal({\n                title: 'Warning',\n                message: 'Are you sure you want to get suggestions for all columns? This action will overwrite all column type mappings!',\n                warning: true\n            }).result\n                .then(function () {\n                    getSuggestions();\n                });\n        } else {\n            getSuggestions();\n        }\n    };\n\n    function getSuggestions() {\n        if (!validateQuery()) {\n            return;\n        }\n\n        JdbcRestService.getColumnNames($scope.currentQuery.query).success(function (columns) {\n            JdbcRestService.getColumnsTypeSuggestion($scope.currentQuery.query, columns).success(function (columnTypes) {\n                const suggestedColumns = [];\n                _.forEach(columns, function (columnName) {\n                    suggestedColumns.push({\n                        column_name: columnName,\n                        column_type: columnTypes[columnName].column_type,\n                        nullable: true,\n                        sparql_type: columnTypes[columnName].sparql_type\n                    });\n                });\n                $scope.currentQuery.columns = suggestedColumns;\n                $scope.setDirty();\n            }).error(function (e) {\n                toastr.error(getError(e), \"Could not suggest column types\");\n            });\n        }).error(function (e) {\n            toastr.error(getError(e), \"Could not suggest column names\");\n        });\n    }\n\n    $scope.deleteColumn = function (columnName, index) {\n        ModalService.openSimpleModal({\n            title: 'Warning',\n            message: 'Are you sure you want to delete the column ' + '\\'' + columnName + '\\'?',\n            warning: true\n        }).result\n            .then(function () {\n                $scope.currentQuery.columns.splice(index, 1);\n                $scope.setDirty();\n            });\n    };\n\n    $scope.getPreview = function () {\n        if (!validateDefinition()) {\n            return;\n        }\n\n        $scope.executedQueryTab = $scope.currentQuery;\n\n        if (!$scope.queryIsRunning) {\n            $scope.currentQuery.outputType = 'table';\n            $scope.resetCurrentTabConfig();\n\n            setLoader(true, 'Preview of first 100 rows of table ' + $scope.name,\n                'Normally this is a fast operation but it may take longer if a bigger repository needs to be initialised first.');\n\n            const successCallback = function (data, textStatus, jqXhr) {\n                setPreviewResult(data, jqXhr, textStatus);\n                setLoader(false);\n            };\n\n            const failCallback = function (data) {\n                setLoader(false);\n                toastr.error(getError(data, 0, 100), 'Could not show preview');\n            };\n\n            if ($scope.canWriteActiveRepo()) {\n                const sqlView = JSON.stringify({\n                    name: $scope.currentQuery.name,\n                    query: $scope.currentQuery.query,\n                    columns: $scope.currentQuery.columns || []\n                });\n                JdbcRestService.getNewSqlTablePreview(sqlView)\n                    .done(successCallback).fail(failCallback);\n            } else {\n                JdbcRestService.getExistingSqlTablePreview($scope.currentQuery.name)\n                    .done(successCallback).fail(failCallback);\n            }\n        }\n    };\n\n    $scope.setDirty = function () {\n        $scope.currentQuery.isPristine = false;\n    };\n\n    $scope.getTypeLabel = function (type) {\n        switch (type) {\n            case 'iri':\n                return 'VARCHAR: IRI';\n            case 'string':\n                return 'VARCHAR: String';\n            default:\n                return type.indexOf(' ') > 0 ? type : type.toUpperCase();\n        }\n    };\n\n    function resetYasqeYasr() {\n        if ($scope.page === 2) {\n            $scope.viewMode = 'editor';\n        } else {\n            $scope.viewMode = 'none';\n        }\n    }\n\n    function getCellContentSQL(yasr, plugin, bindings, sparqlVar, context) {\n        let value = bindings[sparqlVar].value;\n        value = value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n        const entityHtml = \"<p class='nonUri' style='border: none; background-color: transparent; padding: 0; margin: 0'>\"\n            + value + \"</p>\";\n        return \"<div class = 'literal-cell'>\" + entityHtml + \"</div>\";\n    }\n\n\n    function setPreviewResult(data, jqXhr, textStatus) {\n        if (!data.results || !data.results.bindings || !data.results.bindings.length) {\n            // Hides YASR as it may contain previous results\n            toastr.info('The table definition produced no results', 'Preview SQL');\n        } else {\n            // Custom content extractor that won't insert \" in SQL values (since we treat them as fake literals)\n            window.yasr.plugins.table.options.getCellContent = getCellContentSQL;\n\n            // Set query type so YASR shows the results\n            $scope.currentTabConfig.queryType = 'SELECT';\n            window.yasr.setResponse(jqXhr, textStatus, null);\n        }\n    }\n\n    function hasValidQuery() {\n        return window.editor && window.editor.getQueryType() === 'SELECT';\n    }\n\n    function validateDefinition() {\n        return validateQuery() && validateColumns();\n    }\n\n    function validateQuery() {\n        if (!hasValidQuery()) {\n            toastr.error('The data query must be a SELECT query', 'Invalid query');\n            return false;\n        }\n\n        return true;\n    }\n\n    function validateColumns() {\n        if (!$scope.currentQuery.columns || !$scope.currentQuery.columns.length) {\n            toastr.error('Please define at least one column', 'Invalid columns');\n            return false;\n        }\n\n        if ($scope.containsUnknownColumns()) {\n            toastr.error('Please select SQL type for all columns', 'Invalid columns');\n            return false;\n        }\n\n        return true;\n    }\n}\n","angular\n    .module('graphdb.framework.rest.jdbc.service', [])\n    .factory('JdbcRestService', JdbcRestService);\n\nJdbcRestService.$inject = ['$http', '$repositories'];\n\nconst JDBC_ENDPOINT = 'rest/sql-views';\n\nfunction JdbcRestService($http) {\n\n    return {\n        getJdbcConfigurations,\n        getJdbcConfiguration,\n        createNewJdbcConfiguration,\n        updateJdbcConfiguration,\n        deleteJdbcConfiguration,\n        getColumnNames,\n        getColumnsTypeSuggestion,\n        getExistingSqlTablePreview,\n        getNewSqlTablePreview\n    };\n\n    function getJdbcConfigurations() {\n        return $http.get(`${JDBC_ENDPOINT}/tables`);\n    }\n\n    function getJdbcConfiguration(configuration) {\n        return $http.get(`${JDBC_ENDPOINT}/tables/${configuration}`);\n    }\n\n    function createConfiguration(method, table, configuration) {\n        return $http({\n                method,\n                url: `${JDBC_ENDPOINT}/tables/${table}`,\n                noCancelOnRouteChange: true,\n                data: {\n                    name: configuration.name,\n                    query: configuration.query,\n                    columns: configuration.columns || []\n                }\n            }\n        );\n    }\n\n    function createNewJdbcConfiguration(configuration) {\n        return createConfiguration('POST', '', configuration);\n    }\n\n    function updateJdbcConfiguration(configuration) {\n        return createConfiguration('PUT', configuration.name, configuration);\n    }\n\n    function deleteJdbcConfiguration(name) {\n        return $http.delete(`${JDBC_ENDPOINT}/tables/${name}`);\n    }\n\n    function getColumnNames(query) {\n        const headers = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'text/plain'\n            }\n        };\n\n        return $http.post(`${JDBC_ENDPOINT}/columns`, query, headers);\n    }\n\n    function getColumnsTypeSuggestion(query, columns) {\n        if (!Array.isArray(columns)) {\n            throw 'Column names must be placed in array.'\n        }\n\n        return $http({\n                method: 'POST',\n                url: `${JDBC_ENDPOINT}/types`,\n                data: {\n                    query: query,\n                    column_names: columns\n                }\n            }\n        );\n    }\n    function getExistingSqlTablePreview(name, limit) {\n        // Limit in preview is optional. On backend default value is set to 100\n        return $.ajax({\n            method: 'GET',\n            url: `rest/sql-views/preview/${name}`,\n            params: {\n                limit\n            }\n        })\n    }\n\n    function getNewSqlTablePreview(sqlView, limit) {\n        // Limit in preview is optional. On backend default value is set to 100\n        return $.ajax({\n            method: 'POST',\n            url: \"rest/sql-views/preview\",\n            contentType: \"application/json; charset=utf-8\",\n            dataType: 'json',\n            data: sqlView,\n            params: {\n                limit\n            },\n            headers: {Accept: 'application/sparql-results+json'}\n        })\n    }\n}\n","import 'angular/core/services';\nimport 'angular/core/directives';\nimport 'angular/resources/controllers';\nimport 'angular/core/services/repositories.service';\nimport 'angular/jdbc/controllers';\nimport 'angular/rest/jdbc.rest.service';\nimport 'angular/core/directives/queryeditor/sparql-tab.directive';\nimport 'angular/core/directives/queryeditor/query-editor.controller';\nimport 'angular/core/directives/queryeditor/query-editor.directive';\n\nconst modules = [\n    'toastr',\n    'ui.bootstrap',\n    'graphdb.framework.jdbc.controllers',\n    'graphdb.framework.core.services.repositories',\n    'graphdb.framework.core.directives',\n    'graphdb.framework.rest.jdbc.service',\n    'graphdb.framework.core.directives.queryeditor.controllers',\n    'graphdb.framework.core.directives.queryeditor.sparqltab',\n    'graphdb.framework.core.directives.queryeditor.queryeditor'\n\n];\n\nangular.module('graphdb.framework.jdbc', modules);\n\n"],"sourceRoot":""}